#############################################################################
#	Makefile for the nanoManipulator client application.  Needs to be
# built using 'gmake'.  Should run on any architecture that is currently
# supported.  It should be possible to build simultaneously on multiple
# architectures.
#
# Author: Russ Taylor, 08/22/1997
#	  
# {{{ ChangeLog
#
# modified:
#	9/5/97 Renee Maheshwari
#		-integrated RenderMan compilation with compilation
#		 on HP's, so compiling on HP will automatically include
#		 RenderMan capabilities
#      10/3/97 Tom Hudson (drawing on examples by Dan Aliaga)
#               -Added support for recursively compiling a subdirectory (scope).
#                This isn't perfect, since we still need a list of the
#                object files.
#               -Added support for ../include as a repository for common
#                header files.
#      10/20/97 Sang-Uok Kum
#               -Changed the flags for pxflow compiling. Now you don't have
#                to change the flags everytime. It uses the env. var. that is
#                defined by pbase. 
#	5/13/98 Tom Hudson
#		-Used $(patsubst) and INCLUDE_FILES and export
#		 to get rid of replication of include paths in sub-Makefiles
#		 Also export HW_OS, CC, OBJECT_DIR and COMMON_INCLUDE_DIR
#	7/16/98 Tom Hudson
#		-Added FULL_OBJECT_DIR to put object files in non-replicated
#		 space:  stm/src/not_backed_up
#	8/19/98 Tom Hudson
#		-Changed VLIB and VRPN includes/linking to look for a copy
#		 in src/`whoami`/ first and use src/ otherwise.
#      11/23/98 Tanner Lovelace
#               -Changed QUAT includes/linking to look for a copy in
#                src/`whoami`/ first and use HMD_..._DIR otherwise
#	1/23/98 Xiaohu Guan
#		-integrated vrpn version of nmm_Microscope_Remote class with
#		 non-vrpn version of Microscope class. You can switch between
#		 these two by adding/removing -DUSE_VRPN_MICROSCOPE from
#		 DEFINES flag.
#       4/20/99 Tanner Lovelace
#		-Integrated Makefile to work under the Cygnus Solutions
#		 cygwin environment under Windows NT.
#      11/04/99 Chris Weigle
#               -Nano reorganization.  Used this Makefile for defining common
#                and architecture specific variables (so the individual lib/
#                app/util Makefiles don't need to have the logic for figuring
#                such things out).
#############################################################################

ifndef ($(PWD_COMMAND))

##########################
# Convenience Variables
# Taken straight from the make info page, section "Syntax of Functions"
COMMA :=,
EMPTY :=
SPACE := $(EMPTY) $(EMPTY)

# foo := a b c
# bar:= $(subst $(SPACE),$(COMMA),$(foo))
# bar is now `a,b,c'.

##########################
#
# Get my architecture
#

UNAME := $(shell uname -s)
ifeq ($(UNAME),FreeBSD)             # hw_os does not exist on FreeBSD at UNC
   HW_OS := pc_FreeBSD
else
   ifeq ($(findstring CYGWIN,$(UNAME)),CYGWIN)    # Cygwin may not have HW_OS
      ifdef VC
         # define VC on the command line to compile with VC++ and CL compiler
         HW_OS := pc_win32
      else
         HW_OS := pc_cygwin
      endif
   else
      ifeq ($(UNAME),Linux)         # Linux may not have HW_OS
         HW_OS := pc_linux
      else                          # everybody else has hw_os
         HW_OS := $(shell hw_os)
      endif
   endif
endif

##########################
#
# What SGI ABI?
#

ifeq ($(HW_OS),sgi_irix)
   ifndef SGI_ABI
      SGI_ABI := n32
   endif
   OBJECT_DIR_SUFFIX := .$(SGI_ABI)

   UNAME := $(shell uname -m)
   ifeq ($(UNAME),IP32)
      NEED_SGI_O2_LIBS := 1
   endif
endif

##########################
#
# How do I link?
#

# This works on cygwin as long as MY_NANO_OBJ_DIR is a local drive.
# You do compile that way don't you?
ifeq ($(HW_OS),pc_cygwin)
   LINK = ln -f -n -s
else
   LINK = ln -f -s
endif

##########################
#
# Get my username
#

ifeq ($(HW_OS),pc_cygwin)
   WHOAMI := $(USERNAME)
else
   WHOAMI := $(USER)
endif

##########################
#
# How do I get the real PWD
#

PWD_COMMAND := pwd
ifeq ($(findstring pc_,$(HW_OS)),pc_)
   PWD_COMMAND := pwd
endif

##########################
#
# Which C++ compiler
# depends on which arch
#

ifdef PBASE_ROOT                    # Must be flow
   ifeq ($(PXFL_COMPILER),aCC)      # We commonly use multiple compilers here
      HW_OS := hp_flow_aCC
      CC    := /opt/aCC/bin/aCC -G
   else
      HW_OS := hp_flow
      CC    := g++
   endif
else
   ifeq ($(HW_OS),sgi_irix)
      CC := CC -$(SGI_ABI) -fullwarn
   else
      ifeq ($(HW_OS),hp700_hpux10)  # another odd case, hpux is "different"
         CC := CC +w
      else
	ifeq ($(HW_OS),pc_win32)
      CC := cl
         else                          # default case
            CC := g++ -Wall
         endif
      endif
   endif
endif

##########################
# 
# Setup for using MS VC++ compiler in the cygwin environment
#   All values copied from VCVARS32.BAT

# I don't know how to do this yet. Probably should be set up in the
# cygwin environment before calling make.


##########################
#
# SGI shared memory
#

ifeq ($(HW_OS),sgi_irix)
   SHMEM_LIBS := -lmpc
endif

##########################
#
# Paths to everything
#

DEFAULT_PROJ_HOME    := /afs/cs.unc.edu/project/stm
DEFAULT_PROJ_SRC_DIR := $(DEFAULT_PROJ_HOME)/src
DEFAULT_PROJ_OBJ_DIR := $(DEFAULT_PROJ_SRC_DIR)/not_backed_up
DEFAULT_NANO_SRC_DIR := $(DEFAULT_PROJ_SRC_DIR)/nano

ifndef MY_NANO_SRC_DIR
   # The following calls perl to do the substitution because make's patsubst
   # can't handle it. It reads like this:
   # "s|/nano/src(?\!.*/nano/src/).*||;"
   # s| -- find the pattern
   #   /nano/src -- the string /nano/src
   #            (?! -- not followed by the group
   #               .* -- 0 or more characters
   #                 /nano/src/) -- followed by /nano/src/, end group
   #                            .* -- followed by 0 or more characters
   #                              || replace the pattern with nothing
   MY_NANO_SRC_DIR := $(shell echo $(shell $(PWD_COMMAND)) | perl -pe "s|/nano/src(?!.*/nano/src/).*||;")
endif

TOP_LEVEL_DIR      := $(MY_NANO_SRC_DIR)/nano
TOP_LEVEL_SRC_DIR  := $(TOP_LEVEL_DIR)/src
TOP_LEVEL_MAKE_DIR := $(TOP_LEVEL_SRC_DIR)/share

ifndef MY_NANO_OBJ_DIR
   ifeq ($(HW_OS),pc_win32)
#   if (($(HW_OS)==pc_cygwin)||($(HW_OS)==pc_win32))
      MY_NANO_OBJ_DIR   := /tmp
      TOP_LEVEL_OBJ_DIR := $(MY_NANO_OBJ_DIR)
   else
      MY_NANO_OBJ_DIR   := $(DEFAULT_PROJ_OBJ_DIR)/$(WHOAMI)-nano
      TOP_LEVEL_OBJ_DIR := $(TOP_LEVEL_DIR)/obj
   endif
else
   TOP_LEVEL_OBJ_DIR := $(MY_NANO_OBJ_DIR)
endif

FULL_OBJECT_DIR := $(MY_NANO_OBJ_DIR)/$(HW_OS)$(OBJECT_DIR_SUFFIX)

TCL_INC_DIR := /afs/unc/proj/stm/src/tcltk.sgi_irix/include \
               /net/nano/nano3/tcltk.$(HW_OS)/include
TCL_LIB_DIR := /afs/unc/proj/stm/src/tcltk.$(HW_OS)$(OBJECT_DIR_SUFFIX)/lib \
               /net/nano/nano3/tcltk.$(HW_OS)$(OBJECT_DIR_SUFFIX)/lib \
               /afs/unc/proj/stm/src/tcltk.$(HW_OS)/lib \
               /net/nano/nano3/tcltk.$(HW_OS)/lib

###############################################################################
#
# Need to use a library?  Just say so ...
#

SEARCH_PATH := $(FULL_OBJECT_DIR) $(TOP_LEVEL_DIR) $(MY_NANO_SRC_DIR) \
               $(DEFAULT_NANO_SRC_DIR) $(DEFAULT_PROJ_SRC_DIR)

SEARCH_PROG := $(TOP_LEVEL_SRC_DIR)/share/find-lib.sh

##########################
#
# }}}
# {{{ PixelFlow Porting Base settings
#

ifeq ($(findstring hp_flow,$(HW_OS)),hp_flow)
   include $(PBASE_ROOT)/include/gmake/defs.mk
   APLINKLIBS := $(PRELINKLIBS) $(OPENGL_LINKLIBS)
endif

##########################
#
# }}}
# {{{ Include flags
#

SYS_INCLUDE := $(TCL_INC_DIR) \
               /usr/local/contrib/include /usr/local/contrib/mod/include

ifeq ($(HW_OS),pc_cygwin)
   SYS_INCLUDE := /usr/local/include 
endif

ifeq ($(HW_OS),pc_win32)
   SYS_INCLUDE := $(MY_NANO_SRC_DIR)/external/include
endif

ifeq ($(HW_OS),pc_linux)
   SYS_INCLUDE := /usr/X11R6/include /usr/include /usr/local/contrib/include \
                  /usr/local/contrib/mod/include /usr/include/bsd \
                  /usr/local/contrib/unmod/include/Mesa
endif

ifeq ($(HW_OS),sgi_irix)
   SYS_INCLUDE := $(TCL_INC_DIR) /usr/local/contrib/mod/include
endif

INCLUDE_FLAGS := $(addprefix -I, . $(SYS_INCLUDE))

ifeq ($(findstring hp_flow,$(HW_OS)),hp_flow)
   INCLUDE_FLAGS := $(APDEBUG) $(APCCFLAGS) $(APIFLAGS) -Dhpux -DFLOW \
                    $(INCLUDE_FLAGS)
endif

ifeq ($(HW_OS),hp700_hpux10)
   INCLUDE_FLAGS += +a1 -Dhpux
endif

INCLUDE_FLAGS += $(LATE_INCLUDE_PATH)

##########################
#
# }}}
# {{{ Load flags
#

LOAD_FLAGS := $(addprefix -L, $(TCL_LIB_DIR) /usr/local/lib \
                              /usr/local/contrib/unmod/lib \
                              /usr/local/contrib/mod/lib)

ifeq ($(HW_OS),pc_cygwin)
  LOAD_FLAGS += -L/usr/X11R6.4/lib
endif

ifeq ($(HW_OS),pc_win32)
  LOAD_FLAGS = -L$(MY_NANO_SRC_DIR)/external/lib/pc_win32 -L$(MY_NANO_SRC_DIR)/vrpn/server_src/pc_win32_MTd
endif

ifeq ($(HW_OS),sgi_irix)
   TEMP_LOAD_FLAG := -L/usr/lib/internal

   ifdef NEED_SGI_O2_LIBS
      ifeq ($(SGI_ABI),n32)
         TEMP_LOAD_FLAG := -L/usr/lib32/internal
      endif
   endif

   LOAD_FLAGS += $(TEMP_LOAD_FLAG)
endif

ifeq ($(HW_OS),pc_linux)
  LOAD_FLAGS += -L/usr/X11R6/lib
endif

ifeq ($(HW_OS),hp700_hpux10)
  LOAD_FLAGS += -L/usr/lib/X11R5
endif

ifeq ($(findstring hp_flow,$(HW_OS)),hp_flow)
   APLFLAGS   := $(filter-out -static,$(APLFLAGS))
   LOAD_FLAGS := $(filter-out -L./$(HW_OS)$(OBJECT_DIR_SUFFIX),$(LOAD_FLAGS))

   ifeq ($(HW_OS),hp_flow)
      LOAD_FLAGS := $(filter-out $(V_OPENGL_LIB_DIRS),$(LOAD_FLAGS))
   endif

   LOAD_FLAGS := $(LOAD_FLAGS) $(APDEBUG) $(APCCFLAGS) $(APCFLAGS) \
                 $(APLFLAGS) $(V_OPENGL_LIB_DIRS) -L/usr/lib/X11R5
endif

LOAD_FLAGS += $(LATE_LOAD_PATH)

##########################
# }}}
# {{{ Libraries
#

##########################
#
# Graphics
#

ifeq ($(HW_OS),sgi_irix)
   GRAPHICS_LIBS := -lGLU -lGL
endif

ifeq ($(HW_OS), hp700_hpux10)
   GRAPHICS_LIBS := -lMesaGL
endif

ifeq ($(HW_OS), pc_linux)
   GRAPHICS_LIBS := -lglut -lGLU -lGL
endif

ifeq ($(findstring hp_flow,$(HW_OS)),hp_flow)
   GRAPHICS_LIBS := $(APLINKLIBS) -lpvm3
endif

##########################
#
# Intel architecture
#

ifeq ($(HW_OS),pc_linux)
   ARCH_LIBS := $(addprefix -l,bsd dl pthread)
endif

ifeq ($(HW_OS),pc_cygwin)
   ARCH_LIBS := $(addprefix -l,glut wsock32 user32 gdi32 comdlg32 glu32 \
                               opengl32)
endif

ifeq ($(HW_OS),pc_win32)
   ARCH_LIBS := $(addprefix -l,glut32 wsock32 user32 gdi32 comdlg32 glu32 \
                               opengl32 ghost31 shell32)
endif

##########################
#
# Tcl/Tk
#

TCL_LIBS := $(addprefix -l,itk itcl BLT tk tcl)

ifeq ($(HW_OS),pc_cygwin)
   TCL_LIBS := $(addprefix -l,BLT24 tk80 tcl80 itk30 itcl30)
endif

ifeq ($(HW_OS),pc_win32)
   TCL_LIBS := $(addprefix -l,BLT24 tk82 tcl82)
endif

ifeq ($(HW_OS),sgi_irix)            # Tcl must load statically on Irix
   TCL_LIBS := -B static $(TCL_LIBS) -B dynamic
endif

ifeq ($(HW_OS),pc_linux)            # Tcl must load statically on Linux
   TCL_LIBS := -B static $(TCL_LIBS) -B dynamic
endif

ifeq ($(HW_OS), hp700_hpux10)       # Tcl must load statically on HPUX
   TCL_LIBS := $(subst -l,-l:lib,$(addsuffix .a,$(TCL_LIBS)))
endif

##########################
#
# All together now
#

# Hacks by TCH 1 May 00 to get afmcntsim (and multiscope) to compile -
# added glut to EVERYBODY
LIBS := -lglut $(GRAPHICS_LIBS) $(TCL_LIBS) -lXmu -lXext -lX11 $(ARCH_LIBS) -lm

ifeq ($(HW_OS), hp700_hpux10)
   LIBS := -lPW $(GRAPHICS_LIBS) $(TCL_LIBS) -lXext -lX11 $(ARCH_LIBS) -lm
endif

ifeq ($(findstring hp_flow,$(HW_OS)),hp_flow)
   LIBS := -lPW $(GRAPHICS_LIBS) $(TCL_LIBS) -lXext -lX11 $(ARCH_LIBS) -lm
endif

ifdef VC
   LIBS := $(GRAPHICS_LIBS) $(TCL_LIBS) $(ARCH_LIBS)
endif

LIBS += $(LATE_LIBRARIES)

##########################
#
# }}}
# {{{ Defines for the compilation, CFLAGS
#

BAREBAREDEFINES := INCLUDE_CALLBACK_CODE

ifndef OLD_MICROSCOPE
   BAREDEFINES += USE_VRPN_MICROSCOPE
endif

ifeq ($(HW_OS),sgi_irix) 
  BAREDEFINES += NO_MAGELLAN NO_PHANTOM_SERVER
endif

ifeq ($(HW_OS),pc_cygwin)
  BAREDEFINES += V_GLUT NO_XWINDOWS NO_EXT_TEXTURES NO_MAGELLAN \
  NO_PHANTOM_SERVER
endif

ifeq ($(HW_OS),pc_win32)
  BAREDEFINES += V_GLUT NO_RAW_TERM NO_XWINDOWS NO_ITCL NO_FILTERS \
  NO_EXT_TEXTURES
endif

ifeq ($(HW_OS),pc_linux)
  BAREDEFINES += V_GLUT NO_EXT_TEXTURES NO_MAGELLAN NO_PHANTOM_SERVER
endif

# Allows compilation of viewer-only version of Nano on all platforms. 
ifdef VIEWER
NO_PHANTOM := 1
NO_MSCOPE_CONNECTION := 1
endif

# Selective disable of Phantom
ifdef NO_PHANTOM
      BAREDEFINES += NO_PHANTOM 
endif
# Selective disable of microscope connections
ifdef NO_MSCOPE_CONNECTION
      BAREDEFINES += NO_MSCOPE_CONNECTION 
endif

BAREDEFINES += PROJECTIVE_TEXTURE

DEFINES = $(addprefix -D,$(BAREDEFINES))

CFLAGS += -g

ifeq ($(HW_OS),pc_win32)
  CFLAGS = /nologo /MTd /W3 /GX /Gm /Zi /Od /D "WIN32" /D "_DEBUG" /D "_MBCS" /D "_LIB" /FD /GZ /TP 
# /MTd multi-threaded, debug lib - not DLL.
# /W3 warning level 3
# /Gm enable minimal rebuild - requires /Zi or /ZI
# /GX enable synchronous exception handling
# /Od turn off optimizations - (debug build).
# /Z7 include C7 debug info. /Zi program database.
# /YX use precompiled headers.
# /Fp output name/dir for precompiled headers.
# /Fo output name/directory for .obj
# /Fd program database name/directory
# /FD do good stuff with dependencies.
# /GZ catch bugs cause by optimizations when using debug code
# /TP compile everything C++
# /c suppresses link.
endif

#ifeq ($(HW_OS),pc_cygwin)
#  CFLAGS += -fhuge-objects
#endif

###########################
#
# }}}
# {{{ exports

export SPACE
export COMMA

export HW_OS
export WHOAMI

export PWD_COMMAND

export CC

export TOP_LEVEL_DIR
export TOP_LEVEL_SRC_DIR
export TOP_LEVEL_OBJ_DIR
export TOP_LEVEL_MAKE_DIR

export SEARCH_PATH
export SEARCH_PROG

export FULL_OBJECT_DIR
export OBJECT_DIR_SUFFIX

export INCLUDE_FLAGS

export LOAD_FLAGS
export LIBS

export DEFINES
export CFLAGS

export NO_PHANTOM
export NO_MSCOPE_CONNECTION

endif
