##############################################################################
#
# Typical stuff
#

CWD := $(shell $(PWD_COMMAND))

THIS_DIR := $(subst $(TOP_LEVEL_SRC_DIR),,$(CWD))

OBJECT_DIR := $(join $(FULL_OBJECT_DIR),$(THIS_DIR))

DIR := $(shell test -d $(OBJECT_DIR) && echo "true")
ifneq ($(DIR),true)
   DUMMY := $(shell mkdir -p $(REAL_OBJECT_DIR))
   DUMMY += $(shell $(LINK) $(REAL_OBJECT_DIR)/ $(FULL_OBJECT_DIR))
   DUMMY += $(shell mkdir -p $(OBJECT_DIR))
endif

###############################################################################
#
# Got more CFLAGS?
#

ifdef EXTRA_CFLAGS
   CFLAGS += $(EXTRA_CFLAGS)
endif

###############################################################################
#
# Specifics for a library
#

ifndef SRC_SUFFIXES
   SRC_SUFFIXES := .C .c .cc
endif

ifndef APP_SRC
   APP_SRC := $(foreach suffix,$(SRC_SUFFIXES),$(wildcard *$(suffix)))
   APP_SRC := $(filter-out $(EXCLUDE_SRC),$(APP_SRC))
endif

ifndef APP_OBJ
ifdef VC
   APP_OBJ := $(addprefix $(OBJECT_DIR)/, \
                          $(addsuffix .obj, $(strip $(basename $(APP_SRC)))))
   # HACK - which drive do files live on?
   APP_OBJ_LINK := $(addprefix c:, $(APP_OBJ))
else 
   APP_OBJ := $(addprefix $(OBJECT_DIR)/, \
                          $(addsuffix .o, $(strip $(basename $(APP_SRC)))))
   APP_OBJ_LINK := $(APP_OBJ)
endif
endif

ifndef APP_NAME
   APP_NAME := $(notdir $(CWD))
endif

ifndef APP_EXEC
   APP_EXEC := $(OBJECT_DIR)/$(APP_NAME)
endif

ifdef VC
  OUTPUT_CMD := /OUT:"c:$(APP_EXEC).exe"
  # Must be =, not :=, because DEP_LIBS_LIB isn't defined yet.
  # Strip the -l prefix, add a .lib suffix.
  DPL = $(addsuffix .lib,$(subst -l,,$(DEP_LIBS_LIB)))
  LINK_FLAGS =  /DEBUG /PDB:none /NOLOGO
# /MTd /Z7 /link
# Path to libraries. Default stored in LIB env var. Our additions should
# be in semi-colon separated list, no spaces! Replace -L with ;, remove spaces
# ;; shows up at the end of LIB, get rid of it
# HACK Add C: to the front of every path.
#  DLD = $(subst ;,;C:,$(subst ;;,;,\
#      /LIBPATH:C:$(LIB)$(subst $(SPACE),,$(subst -L,;,$(strip $(DEP_LIBS_LD))))))
  DLD = /LIBPATH:$(LIB)
  LIBS := $(addsuffix .lib,$(filterout -l,$(LIBS)))
else
  OUTPUT_CMD := -o $(APP_EXEC)
  # Must be =, not :=, because DEP_LIBS_LIB isn't defined yet.
  DPL = $(DEP_LIBS_LIB)
  LINK_FLAGS = $(CFLAGS) $(DEFINES)
endif

###############################################################################
#
# Special targets
#

.PHONY: default
default: $(OBJECT_DIR) $(APP_EXEC)

.PHONY: all
all: $(OBJECT_DIR) $(APP_OBJ) $(APP_EXEC)

.PHONY: clean
clean: 
	-rm -rf $(OBJECT_DIR) 

.PHONY: thisclean
thisclean:
	-rm -f $(OBJECT_DIR)/*

.PHONY: clobber
clobber: thisclean
	-rm -f $(OBJECT_DIR)/.depend*

#############################################################################
#
# implicit rule for all .c files
#

.SUFFIXES: .c .C .cc .o .a .obj

$(OBJECT_DIR):
	-mkdir -p $(REAL_OBJECT_DIR)
	$(LINK) $(REAL_OBJECT_DIR) $(FULL_OBJECT_DIR)
	-mkdir -p $(OBJECT_DIR)

$(OBJECT_DIR)/%.o: %.c
	$(CC) $(CFLAGS) $(DEFINES) $(DEP_LIBS_INC) $(INCLUDE_FLAGS) -o $@ -c $<

$(OBJECT_DIR)/%.o: %.cc
	$(CC) $(CFLAGS) $(DEFINES) $(DEP_LIBS_INC) $(INCLUDE_FLAGS) -o $@ -c $<

$(OBJECT_DIR)/%.o: %.C
	$(CC) $(CFLAGS) $(DEFINES) $(DEP_LIBS_INC) $(INCLUDE_FLAGS) -o $@ -c $<

$(OBJECT_DIR)/%.obj: %.c
	$(CC) $(CFLAGS) $(DEFINES) $(DEP_LIBS_INC) $(INCLUDE_FLAGS) /Fo"$@" /c $<
# /Fd"$(OBJECT_DIR)" /Fp"$(OBJECT_DIR)"
$(OBJECT_DIR)/%.obj: %.C
	$(CC) $(CFLAGS) $(DEFINES) $(DEP_LIBS_INC) $(INCLUDE_FLAGS) /Fo"$@" /c $<

$(OBJECT_DIR)/%.obj: %.cc
	$(CC) $(CFLAGS) $(DEFINES) $(DEP_LIBS_INC) $(INCLUDE_FLAGS) /Fo"$@" /c $<

$(APP_EXEC): $(APP_OBJ)
ifdef VC
	link $(LINK_FLAGS) $(OUTPUT_CMD) $(APP_OBJ_LINK) $(DLD) $(DPL) $(LIBS)
else
	$(CC) $(LINK_FLAGS) $(OUTPUT_CMD) $(APP_OBJ_LINK) $(DEP_LIBS_LD) $(LOAD_FLAGS) $(DPL) $(LIBS)
endif

ifneq ($(findstring clean,$(MAKECMDGOALS)),clean)
   ifneq ($(findstring clobber,$(MAKECMDGOALS)),clobber)
      include $(TOP_LEVEL_MAKE_DIR)/Makefile.depend
   endif
endif
