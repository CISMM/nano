/* The nanoManipulator and its source code have been released under the
 * Boost software license when nanoManipulator, Inc. ceased operations on
 * January 1, 2014.  At this point, the message below from 3rdTech (who
 * sublicensed from nanoManipulator, Inc.) was superceded.
 * Since that time, the code can be used according to the following
 * license.  Support for this system is now through the NIH/NIBIB
 * National Research Resource at cismm.org.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef NMB_TRANSFORMMATRIX44_H
#define NMB_TRANSFORMMATRIX44_H

#include <vrpn_Types.h>

class nmb_TransformMatrix44 {
  public:
    nmb_TransformMatrix44();
	void init();
    nmb_TransformMatrix44 & operator = (const nmb_TransformMatrix44 &);

    void set(int i_dest, int i_src, double value);
	double get(int i_dest, int i_src);
	void translate(double tx, double ty, double tz);
	void scale(double sx, double sy, double sz);
	void rotate(double thetaX, double thetaY, double thetaZ);
    void setMatrix(double *matrix);
    void getMatrix(double *matrix);
	void compose(double *matrix);
    void compose(nmb_TransformMatrix44 &m);
    virtual void transform(double *p_src, double *p_dest) const;
    virtual void transform(double *pnt) const;
    virtual void transformVector(double *p_src, double *p_dest) const;
    virtual void transformVector(double *pnt) const;
    virtual void invTransform(double *p_src, double *p_dest);
    virtual void invTransform(double *pnt);
    virtual void invTransformVector(double *p_src, double *p_dest);
    virtual void invTransformVector(double *pnt);
    virtual void invert();
    virtual nmb_TransformMatrix44 *duplicate() const;
    virtual vrpn_bool hasInverse();
    virtual vrpn_bool is2D();
    // assuming the transformation is only in the x-y plane and
    // the order is Translate.Rotate.Shear.Scale and the rotation,
    // shear and scaling part of the transformation is about the point given
    // by (centerX, centerY), what are the 6 parameters 
    // of the transformation (tx, ty, phi, shz, scx, scy)
    virtual vrpn_bool getTScShR_2DParameters(double centerX, double centerY,
                        double &tx, double &ty,
                        double &phi, double &shz,
                        double &scx, double &scy);
    virtual void print();

    void transform(double x1, double y1, double &x2, double &y2) const;
    void transformVector(double x1, double y1, double &x2, double &y2) const;

  protected:
    void buildIdentity(double m[4][4]);
    vrpn_bool computeInverse();
    inline void switch_rows(double m[4][4], int r1, int r2) const
    {
        for(int i=0;i<4;i++){
            double tmp=m[r1][i];
            m[r1][i]=m[r2][i];
            m[r2][i]=tmp;
        }
    }
    inline void sub_rows(double m[4][4], int r1, int r2, double mul) const
    {
        for(int i=0;i<4;i++)
            m[r1][i] -= m[r2][i]*mul;
    }


    double xform[4][4];
    double inverse_xform[4][4];
    vrpn_bool inverse_needs_to_be_computed;
    vrpn_bool inverse_valid;
};

#endif
