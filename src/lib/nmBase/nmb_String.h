/* The nanoManipulator and its source code have been released under the
 * Boost software license when nanoManipulator, Inc. ceased operations on
 * January 1, 2014.  At this point, the message below from 3rdTech (who
 * sublicensed from nanoManipulator, Inc.) was superceded.
 * Since that time, the code can be used according to the following
 * license.  Support for this system is now through the NIH/NIBIB
 * National Research Resource at cismm.org.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef NMB_STRING_H
#define NMB_STRING_H
/*===3rdtech===
  Copyright (c) 2001 by 3rdTech, Inc.
  All Rights Reserved.

  This file may not be distributed without the permission of 
  3rdTech, Inc. 
  ===3rdtech===*/

#include <stdlib.h>  // for NULL

typedef void (nmb_STRING_CALLBACK) (const char * newValue, void * userdata);

#define nmb_STRING_LENGTH 128

/**
Originally from Tcl_Linkvar
Abstracted here so we could remove Base's dependance
on Tcl.
  nmb_String and nmb_ListOfStrings objects contain information
which will be changed in the user interface. By putting them
in an object with virtual accesssor functions, we can write
classes which inherit, which change the user interface and 
respond to changes in the user interface.
Look at Tcl_Linkvar.[Ch] to see how this is done.
*/
class nmb_ListOfStrings {

  friend class nmb_String;
    // Expose addString only to String so that we can
    // guarantee consistency of our circular pointers.
    // I'm sure there's a better way in one of the books.

  public:

    nmb_ListOfStrings (void);
    virtual ~nmb_ListOfStrings (void);

    int numEntries (void) const { return d_numEntries; }
    const char * entry (int i) const;
    int getIndex(const char * name) const;

    // Return nonzero on failure.  Do consistency, legality checks.
    virtual int clearList ();
    virtual int addEntry (const char *);
    virtual int deleteEntry (const char *);

    virtual int copyList(nmb_ListOfStrings * newList);

    enum { NUM_ENTRIES = 100 };

  protected:

    int d_numEntries;
    char *d_entries [NUM_ENTRIES];


};

nmb_ListOfStrings * allocate_nmb_ListOfStrings();

class nmb_String {

  public:

    nmb_String (const char * initialValue = "");
    virtual ~nmb_String (void);

    // ACCESSORS

    operator const char * (void) const;
    const char * string (void) const;

    const char * lastString (void) const;

    // MANIPULATORS

    virtual const char * operator = (const char *);
    virtual const char * operator = (char *);
      // XXX aargh!  SGI compiler doesn't treat the (const char *) version
      // right;  we end up invoking the plainest Tclvar_string
      // constructor.  Maybe we ought to get rid of it...

    virtual void Set (const char *);

  protected:

    char d_myString [nmb_STRING_LENGTH + 1];
    char d_myLastString [nmb_STRING_LENGTH + 1];

};

nmb_String * allocate_nmb_String (const char * initialValue);


#endif  // NMB_STRING_H

