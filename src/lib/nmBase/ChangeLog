2001-06-17  Tom Hudson  <hudson@cs.unc.edu>

	* nmb_Types.h : remove dead code, move all #include statements to
	top of file.

2001-06-14  Andrea Hilchey  <hilchey@cs.unc.edu>

	* BCPlane.h:  added "friend class nma_ShapeIdentified" so this class
		could access _grid

2001-06-05  David Marshburn  <marshbur@cs.unc.edu>

	* nmb_Image.h:  
	        - changed "friend nmb_Dataset" to "friend class nmb_Dataset"
	          in order to avoid loads of warnings on the SGIs.
	        - added a new accessor, getImageByPlane( BCPlane* )
	* nmb_Dataset.C, .h:
	        - removed all the code for calculated plane creation
	          and update, as well as data members for lists of
	          specific types of calculated planes.
	        - added methods addNewCalculatedPlane( ... ) and
	          getHostname(), and data member to keep a list
	          of calculated planes.
	* nmb_CalculatedPlane.C, .h:
	        - base class for all calculated plane types.
	* nmb_FlattenedPlane.C, .h:
	        - data type for flattened planes.
	* nmb_LBLFlattenedPlane.C, .h:
	        - data type for line-by-lin flattened planes.
	* nmb_SummedPlane.C, .h:
	        - data type for summed planes.

2001-06-01  Aron Helser  <helser@cs.unc.edu>

	* nmb_Dataset.Ch (nmb_Dataset): Change d_hostname to nmb_String so
	it can be updated after construction.
	(computeFlattenedPlane): same

2001-05-31  Aron Helser  <helser@cs.unc.edu>

	* nmb_Dataset.Ch (addImageToGrid): new. Plane contained in
	nmb_ImageGrid added to main BCGrid. 
	(imagePlaneNames): new, moved from AFMState.C
	(all): handle move of imagePlaneNames here. 

2001-05-15  Adam Seeger  <seeger@cs.unc.edu>

	* nmb_Decoration.C (nmb_Decoration::nmb_Decoration):
	added initialization of selectedRegionMinX, selectedRegionMinY, 
	selectedRegionMaxX, selectedRegionMaxY and num_slow_line_3d_markers
	(the last was done in one constructor but not the other)

2001-05-14  Adam Seeger  <seeger@cs.unc.edu>

	* nmb_Image.hC (nmb_ImageArray::exportToTIFF): new function plus
	changes to num_export_formats and export_formats_list to let you
	save SEM data as a TIFF file
	- added const char * argument to exportToTIFF to match Aron's changes
	two days ago but my commit to ImgFormat library makes this unnecessary
	(I think)

2001-05-12  Aron Helser  <helser@cs.unc.edu>

	* BCGrid.hC (writeTIFFile): new
	(readFile): Strip the directory name from new plane names. 
	New filename param when reading/writing files.
	* BCPlane.hC : added tm_offset and tm_scale to make ThermoMicro
	files easier to write. 
	* Topo.C : tweaks to reading/writing topo file, take advantage of
	more headers sent for non-heightplanes from Thermo server. All
	header info should be consistent/usable for any saved Thermo
	file. 
	* nmb_Image.hC : added tm_offset and tm_scale, added TIFF file
	writing. 

2001-05-11  Aron Helser  <helser@cs.unc.edu>

	* nmb_Dataset.C (computeFlattenedPlane): Enable code to add "from
	hostname" to new flatten plane.

	* nmb_Types.h: New mode, USER_REGION_MODE

2001-04-30  Adam Seeger  <seeger@cs.unc.edu>

	* nmb_Image.C : replaced MAXSHORT with SHRT_MAX so it would compile
	on all pc installations instead of just some of them

2001-04-19  Adam Seeger  <seeger@cs.unc.edu>

	* BCPlane.Ch - took out changes from yesterday to reduce complexity
	* nmb_Dataset.Ch (computeLBLFlattenedPlane): changed this so
	it does nothing until it sees the last point in a line

2001-04-18  Adam Seeger  <seeger@cs.unc.edu>

	(oops, my last change would have messed up how the regular plane
	flattening works)
	* BCPlane.C : made separate callback lists for callbacks to be called
	per point and those to be called per line; made separate list
	management functions for each 
	* nmb_Dataset.C (computeLBLFlattenedPlane): changed this to be in the
	form of a Plane_Linecall instead of a Plane_Valuecall (removed x param)

2001-04-18  Adam Seeger  <seeger@cs.unc.edu>

	* BCPlane.C (setValue): added an optional boolean argument to this 
	that controls whether or not callbacks for the plane are called 
	This way we don't have to do line-by-line flattening once for every
	point in the image - instead we can just do it once per line and
	increase efficiency

2001-04-18  Adam Seeger  <seeger@cs.unc.edu>

	* nmb_Dataset.C (computeLBLFlattenedPlane): fixed a bug involving 
	passing the wrong pointer to BCPlane::remove_callback in the case
	when the lbl flatten plane already exists

2001-04-17  Adam Seeger  <seeger@cs.unc.edu>

	* nmb_Image.C (nmb_ImageArray::nmb_ImageArray):
	changed padded image size to the next larger power of two even if the 
        image is exactly a power of two wide or high

2001-04-16  Adam Seeger  <seeger@cs.unc.edu>

	* nmb_Image.Ch (nmb_ImageGrid::nmb_ImageGrid),
                       (nmb_ImageGrid::getBounds),
                       (nmb_ImageGrid::boundX),
                       (nmb_ImageGrid::boundY):
        for nmb_ImageGrid, added a boolean data member 
        d_imagePositionSet that keeps track of whether d_imagePosition has
        been set through the nmb_Image interface. If not, it uses the related
        values for the image position given by the related plane/grid object
        (minX, minY, maxX, maxY) when this state is requested through 
        getBounds, boundX, boundY 
        * nmb_Image.C (nmb_Image::areaInWorld): added a call to update
	d_imagePosition using the getBounds function in case the particular
        derived class does not keep this state consistent with the return
        value of the function as is the case with nmb_ImageGrid because of
        possible external references to the BCGrid/BCPlane object

2001-03-29  Adam Seeger  <seeger@cs.unc.edu>

	* BCPlane.Ch : replaced the _border variable with _borderMinX,
        _borderMaxX, _borderMinY, _borderMaxY and added a #define
        PAD_IMAGE_TO_POWER_OF_TWO so that array dimensions are all padded
        to powers of two - this makes it possible to load images as textures
        without copying them or using gluBuild2DMipmaps
        * nmb_Image.Ch : replaced the border() function with borderMinX(),
        borderMaxX(), borderMinY(), borderMaxY() and made a change to
        nmb_ImageArray analogous to that made in BCPlane

2001-03-02  Adam Seeger  <seeger@cs.unc.edu>

	* BCGrid.C (readPPMorPGMFile): creates a NOT_TIMED plane instead
	of a TIMED plane and uses the min and max values in the file instead
	of scaling and shifting everything to 0..400
	* nmb_Image.C (areaInWorld): new function that calculates the area
	covered by this image in the world
	(nmb_ImageGrid::openFile, nmb_ImageGrid::getNextImage): these new
	static functions provide an interface to the file reading capabilities
	of the BCGrid class and returns each plane in the file with its
	own copy of the grid so they can be handled independently
	(nmb_ImageGrid::boundX, boundY, setBoundX, setBoundY): fixed these
	so they use the boundary information in the base class which gets
	initialized to the original min/max x and y in the grid in the 
	constructor - this fixes a problem with the boundary rectangle not
	being right if the image has been rotated or sheared)
	(nmb_ImageArray::nmb_ImageArray): fixed a problem with image width
	not being an even number of words - fixed by using the border to 
	pad the lines out depending on the pixel type (this caused problems
	when using the image as a texture in openGL)
	(nmb_ImageList::addImage): fixed bug here when you exceed the maximum
	number of images for the list
	also, changed this so that it adds the image name to the tcl list
	last so that if this then sets some other variables through tcl which
	trigger callbacks in c we will the corresponding image actually in 
	the list

2001-02-09  Jason Clark  <jclark@cs.unc.edu>

	* nmb_Dataset.h: New viz plane
	* nmb_Dataset.C: same
	* nmb_PlaneSelection.h: same
	* nmb_PlaneSelection.C: same

2001-01-14  Jason Clark  <jclark@cs.unc.edu>

	* nmb_PlaneSelection.h: Added two new planes, mask and transparency.

	* nmb_PlaneSelection.C: Added two new planes, mask and transparency.

	* nmb_Dataset.h: Added two new planes, mask and transparency.

	* nmb_Dataset.C: Added two new planes, mask and transparency.
	Mask is used to control multi-pass drawing of the surface, and
	transparency is just for controlling the alpha value at each vertex.

2001-01-08  Tom Hudson  <hudson@cs.unc.edu>

	* nmb_SharedDevice.h:  tweak comments
	* nmb_Device.h:  same

2000-12-20  Aron Helser  <helser@cs.unc.edu>

	* all: 3rdtech merge into main trunk. 

2000-12-05  Tom Hudson  <hudson@cs.unc.edu>

	* nmb_Device.C : add new member d_redundancy
	(nmb_Device::dispatchRedundantMessage) : new function
	(nmb_Device_Client::dispatchRedundantMessage) : same
	(nmb_Device_Client::bufferMessage) : same
	(nmb_Device_Client::dispatchMessage) : factor common code into
	bufferMessage()
	* nmb_SharedDevice.C
	(nmb_SharedDevice_Remote::sendBuffer) : instead of duplicating
	code, call nmb_Device_Client::sendBuffer()
	(nmb_SharedDevice_Remote::dispatchRedundantMessage) : new function


2000-12-05  Kwan Torrich Skinner <skinner@cs.unc.edu>

	* BCPlane.[C,h] (BCPlane::computeOptimizeMinMax) : new function.

2000-11-29  Adam Seeger  <seeger@cs.unc.edu>

	* BCPlane.[Ch] : changes to allow a border to be put in the data array
        The default border width is now 1 and a value of 0 should do the same
	thing as before.
	* nmb_Image.[Ch] : removed template usage from this code and replaced
	with a bunch of different code to dynamically handle different
        pixel types. Also added border code and normalize routine
        to nmb_ImageArray class for texture mapping purposes 

2000-10-17  Adam Seeger  <seeger@cs.unc.edu>

	* nmb_Image.C (nmb_ImageGrid::setBounds) : now modifies plane->_grid
	instead of seg-faulting when dealing with a grid that may contain
	multiple planes (works like setBoundX and setBoundY now)

2000-10-11  Adam Seeger  <seeger@cs.unc.edu>

	* BCPlane.C (minNonZeroValue, maxNonZeroValue) : In the rare case
	that all the data is the same non-zero value, these two functions
	were concluding that there was no data and this fixes the code
        so that only the conventional stronger yet still not completely right
        assumption is used
        (that there is no data only if both min and max are 0)
	The offending stream file was:
        /afs/unc/proj/stm/data/snider/2000/Aug/nm/081800/4-probe-test.nm

2000-10-08  Adam Seeger  <seeger@cs.unc.edu>

        * nmb_Image.C (normalize) : new function that normalizes an image to
        some range of values (0-1 for float), 0-maxForType for integer types
        so that we can easily render the image using openGL
        * nmb_Image.C (nmb_ImageGrid::setBoundX, setBoundY) : now modifies
        plane->_grid instead of failing when dealing with a grid that 
        may contain multiple planes
        * nmb_Image.h (nmb_Image::nmb_Image) : added missing initialization 
        for d_worldToImageMatrixSet

2000-10-05  Tom Hudson  <hudson@cs.unc.edu>

	* nmb_Line (normalize) : add bounds checking to fix problem in
	collaboration

2000-10-04  Adam Seeger  <seeger@cs.unc.edu>

        * nmb_Image.C (pixelToWorld) : changed to use width, height instead
        of width-1, height-1 since the latter just looked wrong or at least
        it was inconsistent with worldToPixel
        * nmb_Image.C (setWorldToImageTransform) : new function, this
        not only sets a transformation matrix stored in the nmb_Image
        base class but also sets the locations of the corners of the
        image in the world to be consistent with this transformation
        * nmb_Image.C (getWorldToImageTransform) : this now returns
        the same thing as before as long as you don't call
        setWorldToImageTransform but otherwise it returns the thing
        you passed to setWorldToImageTransform

2000-10-03  Tom Hudson  <hudson@cs.unc.edu>

	* Point.C (Point_list::clear) : add check for non-NULL before
        deleting

2000-10-02  Adam Seeger  <seeger@cs.unc.edu>

        * nmb_Image.C (nmb_ImageArray::boundX, boundY) : fixed these
	to return the right thing
	* BCPlane.C (general change) : changed indexing of _value to
	be row-major instead of column-major - this change should be
	completely transparent except to those who use the function
	flatValueArray() - I looked for any use of this function and
	didn't see any but I have added a call in nmb_Image.C - this change is 
	useful because it lets us dump the pixel data directly into
	texture memory 
	* BCPlane.C (writePPMFile) : changed this so it would map valid values
	to 1-255 and invalid values to 0 so that output is a little nicer
	when you don't have a full grid of data
        * nmb_Image.C (getValueInterpolatedNZ) : new function that is
	just like getValueInterpolated but will return 0 if any of the
	neigboring pixels that would come into the computation of the
	interplated value is 0 (in other parts of the program 
	we use this to tell us where there is no data)
	* nmb_Image.C (nmb_ImageGrid::minNonZeroValue) -  changed to use
	the corresponding function in BCPlane
	* nmb_Image.C (class nmb_Image8bit) - replaced this class with
	a template class nmb_ImageArray which also derives from nmb_Image
        * nmb_Image.C (nmb_ImageGrid::pixelData) - returns something now
	instead of just NULL by returning plane->flatValueArray()

2000-10-02  Jason Clark  <jclark@cs.unc.edu>

	* nmb_Debug.C (collabVerbose): Added missing ;

2000-09-26  Tom Hudson  <hudson@cs.unc.edu>

	* nmb_Debug.C : add collab_verbosity, collabVerbose()

2000-09-21  Tom Hudson  <hudson@cs.unc.edu>

	* nmb_TimerList.h : new data members nmb_TimerList::d_startTime,
        nmb_Timestamp::wasPending
	* nmb_TimerList.C (isBlocked) : new function
        (start) : same
        (newTimestep) : fix accounting for blocked timers
        (unblock) : set wasPending
        (report) : use data from start(), wasPending
        (newTS) : clear wasPending

2000-09-14  Adam Seeger  <seeger@cs.unc.edu>

	* nmb_Dataset.C (constructor) : initializes colorMapName to 
	"none" instead of "CUSTOM". This is in order to keep things
	consistent between tcl and C but I don't understand why when
	all the tcl files get sourced this doesn't fix itself since the
	tcl code executes after the nmb_Dataset is created. (was causing
	some problem when collaboration code went to copy stuff around since
	CUSTOM is not the name of a colormap file and the code in nmg_Graphics
	that checked for this may have been removed recently)

2000-09-08  Adam Seeger  <seeger@cs.unc.edu>

	* nmb_Device.C (nmb_Device) : initialize vrpn_HANDLERPARAM passed 
	to gotConnection handlers but not used (avoids warnings)
	* nmb_SharedDevice.[hC] (unregister*) : adds several new functions
	to unregister device-level handlers to match the ones for registering
	handlers

2000-09-07  Adam Seeger  <seeger@cs.unc.edu>

        * nmb_Decoration.C,h (setScrapeHeightScale) : new function
                             (getScrapeHeightScale) : new function
                             (setScrapeHeightOffset) : new function
                             (getScrapeHeightOffset) : new function
                             (traverseVisibleScrapes): made this so it uses
        scaling and size to affect stored scrape marks instead of using
        values from the past that have already been applied to the marker
        parameters (this affects where marker_height gets applied)
                             (addScrapeMark) : this now uses the surface_z
        to compute the maximum depth into the surface (image z values) for
        modification z values to be used later in determining how high to 
        make the markers

2000-08-31  Kwan Torrich Skinner  <skinner@cs.unc.edu>

        * all : merged merge-2000-summer-thirdtech code with trunk.

2000-08-17  Adam Seeger <seeger@cs.unc.edu>

	* nmb_Image.C,h	(nmb_ImageX(nmb_Image *)) : new constructor
			(maxValidValue) : new function
			(minValidValue) : new function
			(maxNonZeroValue) : new function
			(minNonZeroValue) : new function

2000-08-11  Kwan Torrich Skinner  <skinner@cs.unc.edu>

	* all: Merge thirdtech_branch code to trunk.

2000-08-10  Jeffrey Juliano  <juliano@cs.unc.edu>

	* BCGrid.h (class BCGrid): Add comments to some members.

	* ChangeLog: New file.

2000-08-07  Jeffrey Juliano  <juliano@cs.unc.edu>

	* PPM.h: (constructor_worker): New function.

	* PPM.C (PPM): Initialize fields.
	Bug fix - move real work to constructor_worker, and call it.
	(constructor_worker): New function.  This code used to be in one
	of the two constructors.

