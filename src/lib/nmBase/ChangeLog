2004-10-01  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* nmb_ImgMagick.C : White-space removal.  Adding more (and more
		descriptive) error messages.

2004-09-16  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* nmb_Device.C : Uses new VRPN_CALLBACK definition.
	* nmb_Device.h : Uses new VRPN_CALLBACK definition.
	* nmb_DeviceSequencer.h : Uses new VRPN_CALLBACK definition.
	* nmb_SharedDevice.C : Uses new VRPN_CALLBACK definition.
	* nmb_SharedDevice.h : Uses new VRPN_CALLBACK definition.

2004-06-11  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* nmBase.dsp : Removed include of 16-bit version of ImageMagick,
		which was causing problems.  This will break the video
		stuff for spot tracking, but no helping it.
	* nmb_Image.C : Made the names of the save types match those found
		in the Tcl script.
	* nmb_MorphologyPlane.C : Switched from glut.h to glut_unc.h
	* nmb_String.h : Added a "come fix" comment.

2004-04-26  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* readHamburgFile.h : Data and routines needed to parse and
		read the STM format in use at the University of Hamburg
		Physics department (Weisendanger group).  This format
		turns out to be very very similar to DI format, but
		not quite the same.
	* readHamburgFile.C : Same.
	* BCGrid.C : Changed it to try and read Hamburg format for the
		shared magic cookie between that and the DI file format.
		If Hamburg fails, then try to load as DI.  Tested it
		loading both Hamburg and DI and bogus files.
	* BCPlane.C : Same.
	* BCPlane.h : Same.
	* nmBase.dsp : Adding in the above files.

2004-03-17  David Borland  <borland@cs.unc.edu>

        * nmb_CalculatedPlane.Ch : Added MorphologyPlane type.
        * nmb_MorphologyPlane.Ch : New class for creating a dilation, erosion,
        opening, or closing of a heightfield with a tip image.

2004-03-04  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* nmb_ImgMagick.C : Modified so that it will compile both with the
		original version of ImageMagick and with version 5.7.7
		while we are in transition.

2004-02-18  David Marshburn  <marshbur@cs.unc.edu>

	* Point.C (Point_list::clear):  correctly delete the entries
	in the list of points.

2004-01-14  David Marshburn  <marshbur@cs.unc.edu>

	* Point.h,C:  removed MAX_POINT_LIST and _num_entries members. 
	_entries (the list of points) is now an STL vector, so its length
	is not explicitly bounded.

2003-08-07  Aron Helser  <helser@cs.unc.edu>

	* readNanotecFile.Ch: new, allows reading of WSxM format files. 
	* wsxmHeader.ch: same
	* BCGrid, BCPlane: changes to support reading of WSxM files. 
	* nmBase.dsp: added new files. 

2003-03-31  Adam Seeger  <seeger@cs.unc.edu>

	* nmb_Image.C : changed file format names to match those used by 
	ImgMagick

2003-02-27  Adam Seeger  <seeger@cs.unc.edu>

   * nmb_ImageMagick.C (writeFileMagick): there are three versions of this
	function. This change makes the one used for screen captures use the
	type argument in the same way as the other 2 do

2003-02-26  Adam Seeger  <seeger@cs.unc.edu>

   * nmb_ImgMagick.C (writeFileMagick): adds more informative printout
   in case of error

2002-11-13 Jameson Miller <millerj@cs.unc.edu>
	*nmb_SummedPlane.C: fixed backwards test in dependsOnPlane function.

2002-11-06  Adam Seeger  <seeger@cs.unc.edu>

	* nmb_ImageDisplay.h : removed functions that weren't being used
	* nmb_ColorMap.hC : added copy constructor

2002-11-04  David Borland <borland@cs.unc.edu>
 
        * nmb_ImageDisplay.h : added function declarations for use in setting
        the video texture's alpha value and colormap.

2002-10-24  David Borland <borland@cs.unc.edu>

        * nmb_ImageDisplay.h : added a function declaration for use in setting
        the colormap (slow) texture's alpha value.

2002-10-08  Adam Seeger  <seeger@cs.unc.edu>

	* Point.h : added an assertion to make sure that the z value is not
	used from Point_results that aren't part of a force curve
	* Topo.C (imageToTopoData): change to match change in nmb_ImageBound type
	* nmb_Image.h: Moved the ImageBoundPoint type outside of the 
	nmb_ImageBound class
	(getWorldRectangle): new function
	

2002-10-01 Jameson Miller <millerj@cs.unc.edu>
	* nmb_decoration.c (.h) - added variables to keep track of the
        step size for the graphics of direct step (ds_AXIS_COLOR_ss)

2002-09-30  Adam Seeger  <seeger@cs.unc.edu>

	* nmb_ImageDisplay.h (updateDisplayTransform): added parameter

2002-09-27  Adam Seeger  <seeger@cs.unc.edu>

	* nmb_Image.C (registerChangeHandler): new function
	(unregisterChangeHandler): new function
    (triggerChangeHandlers): new function
    * nmb_Image.h: turned off a VC++ warning about long function names
	added #include <list> to be used for the callback list

2002-09-04  Adam Seeger  <seeger@cs.unc.edu>

	* nmb_Image.C (getImageToTextureTransform): added optional arguments to
	specify the size of the texture array in texture memory
	This function is now in more widespread use because it is in
    URProjectiveTexture.C
	* nmb_TransformMatrix44.Ch (get): new function to get matrix element
	(translate), (scale), (compose): some handy new functions that do the
	same thing as openGL glTranslate, glScale and glMultMatrix

2002-08-13  Adam Seeger  <seeger@cs.unc.edu>

	* BCPlane.C (minNonZeroValue): took out debugging file I/O code that was
	making things run very slowly
	* nmb_Image.C : fixed bad memory bug for one of the
	nmb_ImageArray constructors
	* nmb_TransformMatrix44.C: no significant changes

2002-08-01  Adam Seeger  <seeger@cs.unc.edu>

	* nmb_TransformMatrix44.[Ch] (transformVector): new function
                                     (invTransformVector): new function
	* nmb_Transform_TScShR.[Ch] (transformVector): new function
                                    (invTransformVector): new function

2002-07-24 David Borland <borland@cs.unc.edu>

        * nmb_Image.C (nmb_ImageArray() : changed default values for the
        uint16 and float32 data arrays to get rid of a black border when
        then image is used to create a texture.

2002-07-18 Jameson Miller <millerj@cs.unc.edu>
	*nmb_decoration.c (h) - added state variable to keep track
	of if we are dsiplaying the an axis at the position of the sphere
	for direct step

2002-07-02  Adam Seeger  <seeger@cs.unc.edu>

	* nmb_TransformMatrix44.C (getTScShR_2DParameters): changed name for
	rotation angle - thought the sign of the angle should change but
	when I tried that it was backwards so the math is the same (!)
	* nmb_Transform_TScShR.C : changed parametrization of rotation part
	so lots of formulas and variable names related to rotation have
	been changed including most formulas for calculating derivatives
	The rotation part now matches one of the more common Euler
	angle conventions

2002-07-01  Aron Helser  <helser@cs.unc.edu>

	* nmb_Decoration.h (totalStreamTime): Stores length of stream file.

2002-06-30  Adam Seeger  <seeger@cs.unc.edu>

	* nmb_Image.C (nmb_ImageGrid::nmb_ImageGrid): changed constructor
	to use the actual world dimensions of the image when available instead
	of the resolution to set d_acquisitionDistX,Y - this makes the
	angle of projection for projective textures get set correctly

2002-06-28  Adam Seeger  <seeger@cs.unc.edu>

	* BCPlane.[Ch] (valueDAC, setValueDAC): functions to access AFM data
	in raw DAC units (I intend to use this for some of my image processing
	code)

2002-06-26  Andrea Hilchey <hilchey@cs.unc.edu>

        * BCPlane.C,.h : added function float * rowbeginning(int y)
        which returns the address of the beginning of row number y.
        aids in using plane data for time-sensitive purposes, such
        as sending height/scan data to the eroder

2002-06-14  Aron Helser  <helser@cs.unc.edu>

	* nmb_ImgMagick.C (writeFileMagick): Comments about compression.

2002-05-29  David Borland <borland@cs.unc.edu>

        * nmb_Dataset.C (loadFile) : when the loaded image is either the
	first static file loaded or is put into the input grid because its 
	resolution matching the input grid, we set the acquisition 
	dimensions for the corresponding nmb_Image in the dataImages list.

2002-05-13  Adam Seeger  <seeger@cs.unc.edu>

	* nmb_Image.Ch : changed so nmb_ImageArray uses ImgMagick now and
	  has more formats available

2002-05-10  David Marshburn  <marshbur@cs.unc.edu>

	* nmb_Image.C (nmb_ImageArray::nmb_ImageArray(...)): initialize
	acquisition dimensions.

2002-04-19  David Marshburn  <marshbur@evans.cs.unc.edu>

	* BCGrid.[C,h]:  compiler pragmas to prevent warnings from system 
	files.  Also removed some dead #include statements.
	* Point.h:  same
	* Scanline.h:  same
	* nmb_Image.h:  same

2002-04-11  David Marshburn  <marshbur@cs.unc.edu>

	* nmb_FlattenedPlane.C:  only calculates data within the valid
	data interval now.
	* nmb_LBLFlattenedPlane.C:  same
	* nmb_SummedPlane.C:  same

2002-04-01  Aron Helser  <helser@cs.unc.edu>

	* nmb_Dataset.C (nmb_Dataset): Removed ChangeAll call,
	unnecessary. 

	* Point.Ch (outputToText): New, replaces writeToTclWindow, uses a
	string instead of tcl commands. Allocates all memory up front,
	maybe significant speed improvement. 

2002-03-29  Aron Helser  <helser@cs.unc.edu>

	* nmb_Interval.C (operator +=): Better handling of empty
	intervals. 
	(operator -=): same. 

2002-03-28  Aron Helser  <helser@cs.unc.edu>

	* nmb_Interval.Ch: Added copyrights
	(includes): new, true if one interval is inside another interval.
	(clear): sets interval to 0, -1, empty.

2002-03-22  David Marshburn  <marshbur@evans.cs.unc.edu>

	* vc_dirent.[c,h]:  changed vc_opendir and vc_readdir back to
	opendir and readdir, with a preprocessor macro to rename them
	on the PC.

2002-03-21  Aron Helser  <helser@cs.unc.edu>

	* BCString.Ch: Removed. Replace with <string> std header.
	* BCGrid.Ch: Handle replacement BCString -> string
		
	* BCPlane.Ch: same
	* Point.Ch: same
	* Position.h: same
	* Scanline.Ch: same
	* Topo.C: same
	* filter.C: same
	* nmb_CalculatedPlane.Ch: same
	* nmb_Dataset.C: same
	* nmb_FlattenedPlane.C: same
	* nmb_Image.Ch: same
	* nmb_ImageManager.C: same
	* nmb_LBLFlattenedPlane.C: same
	* nmb_SummedPlane.C: same

	* vc_dirent.ch: Changed opendir and readdir to vc_opendir and
	vc_readdir because of very weird memory/build error in VC++ which
	prevented debugging these functions, plus caused them to return
	garbage, or write garbage over other data structures. Only
	manifested in pseudoStream application. Name change seems to have
	fixed...  

	* nmBase.dsp: Release config now builds.


2002-03-18  David Marshburn  <marshbur@evans.cs.unc.edu>

	* BCString.h:  on teh SGI, turn some compiler warnings off before
	including stream headers, and turn the warnings on afterward.

	* nmb_Image.C (~nmb_ImageArray): delete the pixel with the
	type allocated (e.g., 32-bit, 8-bit. etc) (avoids a compiler warning)

2002-03-13  Aron Helser  <helser@cs.unc.edu>

	* BCString.h: Change to standard iostream/STL headers. 

2002-03-12  Aron Helser  <helser@cs.unc.edu>

	* BCPlane.Ch (findValidDataRange): Changed parameter order for better
	clarity. WARNING if you use this function, the parameter order
	must be changed!
	(setValue): corrected tracking of valid region. 
	(CTimedPlane): corrected parameter order to findValidDataRange - it
	was wrong to begin with. 
	(Cplane): same
	(clear): new, clears data and params for findValidDataRange. 
	(resetValid): new. 
	* BCGrid.Ch (clear): new, same as BCPlane.

	* Topo.C: corrected calls to findValidDataRange.
	* nmb_Image.Ch (validDataRange): Changed to match BCPlane. WARNING
	if you use this function, the parameter order must be changed!
	Changed calls to validDataRange. 
	
	* nmb_Decoration.Ch (initScanline): Handle own memory allocation.
	(clearScanline): new, clear scanline indicator for static files. 

	* nmb_Interval (operator -=): handle empty interval explicity. 
	(operator +=): same
	(includes): new

	* nmb_Subgrid.C: indicator for empty subgrid stays within grid
	bounds. 
	
2002-03-04  David Marshburn  <marshbur@cs.unc.edu>

	* nmb_CalculatedPlane.Ch (getCalculatedPlane):  new function; returns
	the calculated plane of a given name, if one exists.
	* nmb_FlattenedPlane.C (_handle_PlaneSynch):  test for and ignore
	idempotent plane creation messages.
	* nmb_LBLFlattenedPlane.C (_handle_PlaneSynch):  same
	* nmb_SummedPlane.C (_handle_PlaneSynch):  same
	* nmBase.dsp:  turn on compiler run-time type identification flag.
	
2002-02-15  Aron Helser  <helser@cs.unc.edu>

	* nmb_Dataset.Ch (nmb_Dataset): Added d_topoFile data member,
	ReadMode method, as these belong here. 
	(loadFile): use d_topoFile data member.

2002-02-13  Aron Helser  <helser@cs.unc.edu>

	* Topo.C (imageToTopoData): Fixed rounding error. Written and read
	data is now exactly the same. 
	(gridToTopoData): same
	(topoDataToGrid): same 

2002-02-13  Aron Helser  <helser@cs.unc.edu>

	* BCGrid.C (loadFile): Changed comparison so files with same
	region size, but not necessarily position, will be loaded in same
	grid. Fixed problem with saving and immediately reloading Thermo
	file. 
	(readSPIPFile): Fixed some bugs, added handling for # comments. 
	(writeSPIPFile): Fixed scaling bug. 
	* BCPlane.C (readSPIPFile): Handle endian flag (intelmode) from
	header while reading data. 

	* nmb_Image.h (valueScaleDAC): overload so writing out thermo file
	is scaled correctly. 
	* Topo.C (imageToTopoData): Fixed scaling of data. 
	(gridToTopoData): same
	(topoDataToGrid): same

2002-02-12  Aron Helser  <helser@cs.unc.edu>

	* BCPlane.C (writeSPIPFile): Quick tweak reads data in correct
	orientation. Set intelmode correctly for byte-swapped data. Remove
	write of unused/unnecessary params. 
	(readSPIPFile): Same tweak. 

	* nmb_Image.C (num_export_formats): Should be 7, not 5. Missed SPIP!

2002-02-08  Aron Helser  <helser@cs.unc.edu>

	* readNanoscopeFile.Ch: More tweaks to reading
	DI files. 4.3+ should have correct units now. 
	* BCGrid.h (parseNSv4_3): changed function name. 

2002-02-01  David Marshburn  <marshbur@cs.unc.edu>

	* nmBase.dsp:  added readNanoscopeFile.[C,h] to the project.

2002-01-31 David Marshburn   <marshbur@cs.unc.edu>

	* nmBase.dsp:  compiles with non-static run-time libraries now.

2002-01-29  Aron Helser  <helser@cs.unc.edu>

	* readNanoscopeFile.C (parseNanoscopeFileHeader): New additions to
	correctly read and display DI/NanoScope III files, versions 4.1, 4.2
	and 4.4. We can probably read NanoScope II, version 2.5 files as
	well. Data scaling for 4.4 may be wrong. 
	* readNanoscopeFile.h: new, so we can compile readNanoscopeFile.C
	separately. 

	* BCPlane.hC (tweakScale): new, sets reasonable scale for viewing
	planes with non-nm units. Called in file read fcns.  

	* BCGrid.C: removed include of readNanoscopeFile.C, and remove
	obsolete fcns to read PPMs - handled by ImageMagick. 

	* nmb_Dataset.C (loadFile): Read multi-layer files, like DI files,
	into image list. 

2002-01-21  Aron Helser  <helser@cs.unc.edu>

	* readNanoscopeFile.C (parseNanoscopeFileHeader): Add some
	defaults and fix parse error so we can read newer DI files. Bug:
	default values assumed are unjustified. 

2002-01-11  Aron Helser  <helser@cs.unc.edu>

	* nmb_CalculatedPlane.C (nmb_CalculatedPlane): fixed ifdef
	THIRDTECH 

2002-01-09  David Marshburn  <marshbur@cs.unc.edu>

	* nmb_Datset.[h,C]:  (removeCalculatedPlane): new.  removes a 
	calculated plane from the list of planes.
	* BCGrid.[h,C]:  (removePlane):  new.  removes a plane from the
	grid and deletes it (since BCGrid allocated it).
	* nmb_Calculatedplane.[h,C]:  (~nmb_CalculatedPlane):  now removes
	the deleted plane from dataset, grid, image.

2002-01-04  David Marshburn  <marshbur@cs.unc.edu>

	* nmb_Dataset.[h,C]:  this was keeping a list of all the calculated
	planes, but wasn't using it and didn't need it, so I removed it.

2002-01-04  David Marshburn  <marshbur@cs.unc.edu>

	* nmb_Dataset.h:  removed a spurious comment
	* nmb_SummedPlane.[h,C]:  added destructor and dependsOnPlane functions
	* nmb_LBLFlattenedPlane.[h,C]:  same
	* nmb_FlattenedPlane.[h,C]:  same, plus removed two erroneously 
	overridden functions from nmb_CalculatedPlane
	* nmb_CalculatedPlane.[h,C]:  added destructor and dependsOnPlane 
	functions.  The destructor now also deletes any planes that depend
	on the to-be-deleted plane.

2001-12-20  David Marshburn  <marshbur@evans.cs.unc.edu>

        * Makefile:  remove ImgFormat from USES_LIBS

2001-12-18  David Marshburn  <marshbur@evans.cs.unc.edu>

	* BCGrid.C: remove compiler warnings, remove commented-out code
	* nmb_Dataset.C: same
	* nmb_Image.C: same
	* nmb_ImgMagick.C: same

2001-12-18  Aron Helser  <helser@cs.unc.edu>

	* nmb_Types.h: Added USER_CROSS_SECTION_MODE
	* nmb_Subgrid.C: compiler warning fix
	* Point.C: minor modfile formatting change

2001-12-18  Adam Seeger  <seeger@cs.unc.edu>

	* nmb_TransformMatrix44.Ch (transform): new convenient form of
	this function that takes 4 doubles as arguments for applying 2D
	transformations

2001-12-18  Adam Seeger  <seeger@cs.unc.edu>

	* nmb_Image.hC: changed a bunch of functions to be const
	(pixelToWorld and worldToPixel): these were inconsistent if the
	image axes were not aligned with the axes of the world coordinates
	now they are fixed
	* nmb_TransformMatrix44.C (operator=): this was copying the
	inverse transformation matrix from the normal transformation matrix!
	now its fixed

2001-12-16  Adam Seeger  <seeger@cs.unc.edu>

	* nmb_ImageManager.C (addImageToGrid): if there is no input grid then
	the image still gets added to the list (it wasn't added before)
        * nmb_TransformMatrix44.C (transform): checks to make sure the input
	point is not the same as the output point (at least in the version of
	that function that doesn't handle that case)
        * nmb_Transform_TScShR.C (transform): "

2001-11-29  Adam Seeger  <seeger@cs.unc.edu>

	* nmb_ImageManager.hC : new file - along the same lines as 
        nmb_ImageDisplay, this is used to reduce the complexity of the 
	interface between nmr_RegistrationUI and the rest of the nano code

2001-11-27  Adam Seeger  <seeger@cs.unc.edu>

	* nmb_Dataset.C (nmb_Dataset::loadFile): changed a variable's scope
	* nmb_Image.C (getWorldToScaledImageTransform): new function
	(getScaledImageToImageTransform): new function
	(getImageToScaledImageTransform): new function
	* nmb_ImageDisplay.h : new file specifying a common interface for
	modules that display images (for example, as a texture, a surface, or
	any other projection)

2001-11-04    <marshbur@MUSHROOM-CS>

	* nmb_CalculatedPlane.h, .C:  moved a lot of common functionality
	up into this, the superclass, particularly that relating to plane
	naming and adding planes to the dataset.  This was mis-implemented
	when I first did it.
	* nmb_FlattenedPlane.h, .C:  same
	* nmb_LBLFlattenedPlane.h, .C:  same
	* nmb_SummedPlane.h, .C:  same

2001-10-23  Adam Seeger  <seeger@cs.unc.edu>

	* nmb_Dataset.C (nmb_Dataset::nmb_Dataset): moved initialization of
	the list of images in dataImages to later in this function in 
	accordance with the latest change to the nmb_ImageList constructor
	* nmb_Device.C (fixed some buffer synchronization problems here that
	caused a race condition in the seegerizer)
        * nmb_Image.hC (nmb_ImageList::nmb_ImageList): separated out the
	part of the constructor that initializes the list of images
	from a list of file names
	(nmb_ImageList::addFileImages): new function to handle what was
	previously done in the constructor

2001-10-19  Aron Helser  <helser@cs.unc.edu>

	* BCPlane.Ch (valueAt): overloaded to take float * arg. 

2001-10-17  Adam Seeger  <seeger@cs.unc.edu>

	* nmb_Transform_TScShR.hC (setParameter, getParameter): new functions
	to access the transformation parameters
	(addScale): new function to change the scale parameter

2001-09-04  Adam Seeger  <seeger@cs.unc.edu>

	* nmb_Image.C (nmb_ImageArray::setValue),
                      (nmb_ImageArray::setLine),
                      (nmb_ImageArray::setImage): added an update here of
                      min/max_x/y_set so that min/maxValidValue() works right
        (nmb_ImageArray::exportToTIFF): moved code from here into 
        nmb_ImgMagick::writeFileMagick(..., nmb_Image *, ...)
	* nmb_ImgMagick.C (writeFileMagick): added a new version of this
        function that takes a pointer to an nmb_Image *

2001-08-21  Aron Helser  <helser@cs.unc.edu>

	* nmb_Dataset.C (loadFile): printout formatting.
	* nmb_Image.C: remove useless #include. 

2001-08-20  Adam Seeger  <seeger@cs.unc.edu>

	* nmb_Device.hC : moved buffering code from nmb_Device_Client into
	the base class nmb_Device so that it is available to nmb_Device_Server
	as well
	Synchronized access to the buffer with a semaphore mutex
	* nmb_Image.hC (getImageToTextureTransform): new function that
	encapsulates code which is used outside this class to compensate
	for the borders of the image array when setting texture coordinates
	- this basically tells you where the image lies inside the array
	* nmb_ImgMagick.C (readFileMagick): added a error print statement

2001-08-02  David Marshburn  <marshbur@cs.unc.edu>

	* nmb_Dataset.C: removed d_hostname member, removed hostname
	argument from constructor, removed getHostname().
	* nmb_SummedPlane.C (nmb_SummedPlane): for naming, uses gethostname() 
	instead of hostname parameter from nmb_Dataset.
	* nmb_LBLFlattenedPlane.C (nmb_LBLFlattenedPlane): ditto
	* nmb_FlattenedPlane.C (nmb_FlattenedPlane): ditto

2001-07-30  Aron Helser  <helser@cs.unc.edu>

	* nmb_Decoration.C: Compile warning fix. 

2001-07-27  David Marshburn  <marshbur@evans.cs.unc.edu>

	* Makefile:  added USES_EXTERNAL_LIBS := magick for SGI build

2001-07-26  Aron Helser  <helser@cs.unc.edu>

	* BCGrid.Ch (BCGrid): Remove constructors which load files, so
	nmb_Dataset can do error handling. 
	(loadFiles): If grid conflict, pass loaded data out to caller. 
	(readFile): use nmb_ImgMagick for image files, TIF, PPM, etc. 
	(writeFile): same. 

	* nmb_Dataset.Ch (nmb_Dataset): handle grid/region conflicts when
	loading files by adding conflicting image to dataImages list. 
	(loadFiles): same

	* nmb_Image.C: file loading/writing changes using nmb_ImgMagick
	(writeOtherImageFile): new

	* nmb_String.Ch: copyright. 
	
2001-07-25    <marshbur@GOLD-CS>

	* nmb_LBLFlattenedPlane.C (nmb_LBLFlattenedPlane): removed call
	to dataset->inputPlaneNames->addEntry
	* nmb_SummedPlane.C (nmb_SummedPlane): ditto
	* nmb_FlattenedPlane.C (nmb_FlattenedPlane): ditto
	
	* nmb_Dataset.C (addNewCalculatedPlane): adds the new plane's name
	to the list of inputPlaneNames

2001-07-24  Adam Seeger  <seeger@cs.unc.edu>
	
	* nmb_TransformMatrix44.C (transform): added one argument version
	  (invTransform): "

2001-07-17  Adam Seeger  <seeger@cs.unc.edu>
	* BCGrid.C (readPPMorPGMFileNew): changed intensity units from "nm"
	"unknown_units" since we don't have any way to know what the units are
	in this case
	* nmb_Image.hC (get/setAcquisitionDimensions):
	added these to get and set the dimensions of the image if we
	have any idea what those dimensions might be (according to the 
	instrument calibration); these affect
	the space in which rotations are applied to an image but are completely
	independent from what the values set for the world position or 
	world to image transformation
        (setWidthWorld, setHeightWorld): improved and then
	commented-out these functions because they are complicated and
 	now unnecessary with my new design for how to keep track of image
	dimensions
        (get/setWorldToImageTransform): changed the concept of what image
	coordinates are back to what it was before the last commit since
	things got too complicated with the new semantics
	* nmb_TransformMatrix44 (= operator): added this

2001-07-12  Adam Seeger  <seeger@cs.unc.edu>
	* nmb_ImageTransform.hC: removed
	* nmb_TransformMatrix44.hC: new class to replace nmb_ImageTransform
	* nmb_Transform_TScShR.hC: new file that implements a specific order
	of linear transformations followed by a translation - provides 
	easy access to translation, scale, shear, and rotation parameters
	and the derivatives of the transformation matrix with respect to those
	parameters
	* BCPlane.C (findValidDataRange): got rid of the part that scans the
	whole image to find the valid data range - made this get computed
	as values get set in the image so things run a lot more quickly - 
	added _validXMin/Max, _validYMin/Max data members
	* nmb_Image.hC (deleteImage): added this function to replace the
	destructor to make sure that images that are still part of a list
	don't get deleted by accident
	(getGradient): computes x,y components of the gradient of an image
	at a point (separate integer and float coordinate versions)
	(setWidthWorld): convenience function that scales the image region
	to match the specified width (x span in world)
	(setHeightWorld): convenience function that scales the image region
        to match the specified height (y span in world)
	(getWorldToImageTransform): changed the concept of what image
	coordinates are (the axes are still aligned with the image axes but
	the units are world units instead of being normalized to the image
	dimension) - this is in accordance with changes to the registration
	module 

2001-06-25 Jameson Miller <millerj@cs.unc.edu>
	* BCPlane.c, .h - moved optimize_now code to its own file in nmMScope
	directory
	
2001-06-25  Andrea Hilchey  <hilchey@cs.unc.edu>

	* BCString.h: removed function listed below because found way
		to work around already existant functions

2001-06-25  Andrea Hilchey  <hilchey@cs.unc.edu>

	* BCString.h: added new function:  nonconst_characters(), which
		returns a char * but otherwise acts just like Characters(),
		which returns a const char *.  This was necessary so that
		I could load char * values from BCString objects into an 
		array in a for loop (can't make it a const char * array
		unless fill it in at declaration...)


2001-06-21  Aron Helser  <helser@cs.unc.edu>

	* nmb_Line.C (normalize): Line height based on data range, to
	avoid very tall lines. Tall lines create quantized positions on
	some graphics cards. 

	* BCPlane.C (minNonZeroValue): If no real data, return 0. Helps in
	nmb_Line. 
	(maxNonZeroValue): same.

2001-06-17  Tom Hudson  <hudson@cs.unc.edu>

	* nmb_Types.h : remove dead code, move all #include statements to
	top of file.

2001-06-15  Andrea Hilchey  <hilchey@cs.unc.edu>

	* BCPlane.h: added function GetGrid() to BCPlane to access private data
 		member _grid so that didn't have to make nma_ShapeAnalyze a friend
		class to BCPlane.  changed line of code in nma_ShapeAnalyze
 		from ...->_grid to ...->GetGrid()

2001-06-14  Andrea Hilchey  <hilchey@cs.unc.edu>

	* BCPlane.h:  added "friend class nma_ShapeIdentified" so this class
		could access _grid

2001-06-05  David Marshburn  <marshbur@cs.unc.edu>

	* nmb_Image.h:  
	        - changed "friend nmb_Dataset" to "friend class nmb_Dataset"
	          in order to avoid loads of warnings on the SGIs.
	        - added a new accessor, getImageByPlane( BCPlane* )
	* nmb_Dataset.C, .h:
	        - removed all the code for calculated plane creation
	          and update, as well as data members for lists of
	          specific types of calculated planes.
	        - added methods addNewCalculatedPlane( ... ) and
	          getHostname(), and data member to keep a list
	          of calculated planes.
	* nmb_CalculatedPlane.C, .h:
	        - base class for all calculated plane types.
	* nmb_FlattenedPlane.C, .h:
	        - data type for flattened planes.
	* nmb_LBLFlattenedPlane.C, .h:
	        - data type for line-by-lin flattened planes.
	* nmb_SummedPlane.C, .h:
	        - data type for summed planes.

2001-06-01  Aron Helser  <helser@cs.unc.edu>

	* nmb_Dataset.Ch (nmb_Dataset): Change d_hostname to nmb_String so
	it can be updated after construction.
	(computeFlattenedPlane): same

2001-05-31  Aron Helser  <helser@cs.unc.edu>

	* nmb_Dataset.Ch (addImageToGrid): new. Plane contained in
	nmb_ImageGrid added to main BCGrid. 
	(imagePlaneNames): new, moved from AFMState.C
	(all): handle move of imagePlaneNames here. 

2001-05-15  Adam Seeger  <seeger@cs.unc.edu>

	* nmb_Decoration.C (nmb_Decoration::nmb_Decoration):
	added initialization of selectedRegionMinX, selectedRegionMinY, 
	selectedRegionMaxX, selectedRegionMaxY and num_slow_line_3d_markers
	(the last was done in one constructor but not the other)

2001-05-14  Adam Seeger  <seeger@cs.unc.edu>

	* nmb_Image.hC (nmb_ImageArray::exportToTIFF): new function plus
	changes to num_export_formats and export_formats_list to let you
	save SEM data as a TIFF file
	- added const char * argument to exportToTIFF to match Aron's changes
	two days ago but my commit to ImgFormat library makes this unnecessary
	(I think)

2001-05-12  Aron Helser  <helser@cs.unc.edu>

	* BCGrid.hC (writeTIFFile): new
	(readFile): Strip the directory name from new plane names. 
	New filename param when reading/writing files.
	* BCPlane.hC : added tm_offset and tm_scale to make ThermoMicro
	files easier to write. 
	* Topo.C : tweaks to reading/writing topo file, take advantage of
	more headers sent for non-heightplanes from Thermo server. All
	header info should be consistent/usable for any saved Thermo
	file. 
	* nmb_Image.hC : added tm_offset and tm_scale, added TIFF file
	writing. 

2001-05-11  Aron Helser  <helser@cs.unc.edu>

	* nmb_Dataset.C (computeFlattenedPlane): Enable code to add "from
	hostname" to new flatten plane.

	* nmb_Types.h: New mode, USER_REGION_MODE

2001-04-30  Adam Seeger  <seeger@cs.unc.edu>

	* nmb_Image.C : replaced MAXSHORT with SHRT_MAX so it would compile
	on all pc installations instead of just some of them

2001-04-19  Adam Seeger  <seeger@cs.unc.edu>

	* BCPlane.Ch - took out changes from yesterday to reduce complexity
	* nmb_Dataset.Ch (computeLBLFlattenedPlane): changed this so
	it does nothing until it sees the last point in a line

2001-04-18  Adam Seeger  <seeger@cs.unc.edu>

	(oops, my last change would have messed up how the regular plane
	flattening works)
	* BCPlane.C : made separate callback lists for callbacks to be called
	per point and those to be called per line; made separate list
	management functions for each 
	* nmb_Dataset.C (computeLBLFlattenedPlane): changed this to be in the
	form of a Plane_Linecall instead of a Plane_Valuecall (removed x param)

2001-04-18  Adam Seeger  <seeger@cs.unc.edu>

	* BCPlane.C (setValue): added an optional boolean argument to this 
	that controls whether or not callbacks for the plane are called 
	This way we don't have to do line-by-line flattening once for every
	point in the image - instead we can just do it once per line and
	increase efficiency

2001-04-18  Adam Seeger  <seeger@cs.unc.edu>

	* nmb_Dataset.C (computeLBLFlattenedPlane): fixed a bug involving 
	passing the wrong pointer to BCPlane::remove_callback in the case
	when the lbl flatten plane already exists

2001-04-17  Adam Seeger  <seeger@cs.unc.edu>

	* nmb_Image.C (nmb_ImageArray::nmb_ImageArray):
	changed padded image size to the next larger power of two even if the 
        image is exactly a power of two wide or high

2001-04-16  Adam Seeger  <seeger@cs.unc.edu>

	* nmb_Image.Ch (nmb_ImageGrid::nmb_ImageGrid),
                       (nmb_ImageGrid::getBounds),
                       (nmb_ImageGrid::boundX),
                       (nmb_ImageGrid::boundY):
        for nmb_ImageGrid, added a boolean data member 
        d_imagePositionSet that keeps track of whether d_imagePosition has
        been set through the nmb_Image interface. If not, it uses the related
        values for the image position given by the related plane/grid object
        (minX, minY, maxX, maxY) when this state is requested through 
        getBounds, boundX, boundY 
        * nmb_Image.C (nmb_Image::areaInWorld): added a call to update
	d_imagePosition using the getBounds function in case the particular
        derived class does not keep this state consistent with the return
        value of the function as is the case with nmb_ImageGrid because of
        possible external references to the BCGrid/BCPlane object

2001-03-29  Adam Seeger  <seeger@cs.unc.edu>

	* BCPlane.Ch : replaced the _border variable with _borderMinX,
        _borderMaxX, _borderMinY, _borderMaxY and added a #define
        PAD_IMAGE_TO_POWER_OF_TWO so that array dimensions are all padded
        to powers of two - this makes it possible to load images as textures
        without copying them or using gluBuild2DMipmaps
        * nmb_Image.Ch : replaced the border() function with borderMinX(),
        borderMaxX(), borderMinY(), borderMaxY() and made a change to
        nmb_ImageArray analogous to that made in BCPlane

2001-03-02  Adam Seeger  <seeger@cs.unc.edu>

	* BCGrid.C (readPPMorPGMFile): creates a NOT_TIMED plane instead
	of a TIMED plane and uses the min and max values in the file instead
	of scaling and shifting everything to 0..400
	* nmb_Image.C (areaInWorld): new function that calculates the area
	covered by this image in the world
	(nmb_ImageGrid::openFile, nmb_ImageGrid::getNextImage): these new
	static functions provide an interface to the file reading capabilities
	of the BCGrid class and returns each plane in the file with its
	own copy of the grid so they can be handled independently
	(nmb_ImageGrid::boundX, boundY, setBoundX, setBoundY): fixed these
	so they use the boundary information in the base class which gets
	initialized to the original min/max x and y in the grid in the 
	constructor - this fixes a problem with the boundary rectangle not
	being right if the image has been rotated or sheared)
	(nmb_ImageArray::nmb_ImageArray): fixed a problem with image width
	not being an even number of words - fixed by using the border to 
	pad the lines out depending on the pixel type (this caused problems
	when using the image as a texture in openGL)
	(nmb_ImageList::addImage): fixed bug here when you exceed the maximum
	number of images for the list
	also, changed this so that it adds the image name to the tcl list
	last so that if this then sets some other variables through tcl which
	trigger callbacks in c we will the corresponding image actually in 
	the list

2001-02-09  Jason Clark  <jclark@cs.unc.edu>

	* nmb_Dataset.h: New viz plane
	* nmb_Dataset.C: same
	* nmb_PlaneSelection.h: same
	* nmb_PlaneSelection.C: same

2001-01-14  Jason Clark  <jclark@cs.unc.edu>

	* nmb_PlaneSelection.h: Added two new planes, mask and transparency.

	* nmb_PlaneSelection.C: Added two new planes, mask and transparency.

	* nmb_Dataset.h: Added two new planes, mask and transparency.

	* nmb_Dataset.C: Added two new planes, mask and transparency.
	Mask is used to control multi-pass drawing of the surface, and
	transparency is just for controlling the alpha value at each vertex.

2001-01-08  Tom Hudson  <hudson@cs.unc.edu>

	* nmb_SharedDevice.h:  tweak comments
	* nmb_Device.h:  same

2000-12-20  Aron Helser  <helser@cs.unc.edu>

	* all: 3rdtech merge into main trunk. 

2000-12-05  Tom Hudson  <hudson@cs.unc.edu>

	* nmb_Device.C : add new member d_redundancy
	(nmb_Device::dispatchRedundantMessage) : new function
	(nmb_Device_Client::dispatchRedundantMessage) : same
	(nmb_Device_Client::bufferMessage) : same
	(nmb_Device_Client::dispatchMessage) : factor common code into
	bufferMessage()
	* nmb_SharedDevice.C
	(nmb_SharedDevice_Remote::sendBuffer) : instead of duplicating
	code, call nmb_Device_Client::sendBuffer()
	(nmb_SharedDevice_Remote::dispatchRedundantMessage) : new function


2000-12-05  Kwan Torrich Skinner <skinner@cs.unc.edu>

	* BCPlane.[C,h] (BCPlane::computeOptimizeMinMax) : new function.

2000-11-29  Adam Seeger  <seeger@cs.unc.edu>

	* BCPlane.[Ch] : changes to allow a border to be put in the data array
        The default border width is now 1 and a value of 0 should do the same
	thing as before.
	* nmb_Image.[Ch] : removed template usage from this code and replaced
	with a bunch of different code to dynamically handle different
        pixel types. Also added border code and normalize routine
        to nmb_ImageArray class for texture mapping purposes 

2000-10-17  Adam Seeger  <seeger@cs.unc.edu>

	* nmb_Image.C (nmb_ImageGrid::setBounds) : now modifies plane->_grid
	instead of seg-faulting when dealing with a grid that may contain
	multiple planes (works like setBoundX and setBoundY now)

2000-10-11  Adam Seeger  <seeger@cs.unc.edu>

	* BCPlane.C (minNonZeroValue, maxNonZeroValue) : In the rare case
	that all the data is the same non-zero value, these two functions
	were concluding that there was no data and this fixes the code
        so that only the conventional stronger yet still not completely right
        assumption is used
        (that there is no data only if both min and max are 0)
	The offending stream file was:
        /afs/unc/proj/stm/data/snider/2000/Aug/nm/081800/4-probe-test.nm

2000-10-08  Adam Seeger  <seeger@cs.unc.edu>

        * nmb_Image.C (normalize) : new function that normalizes an image to
        some range of values (0-1 for float), 0-maxForType for integer types
        so that we can easily render the image using openGL
        * nmb_Image.C (nmb_ImageGrid::setBoundX, setBoundY) : now modifies
        plane->_grid instead of failing when dealing with a grid that 
        may contain multiple planes
        * nmb_Image.h (nmb_Image::nmb_Image) : added missing initialization 
        for d_worldToImageMatrixSet

2000-10-05  Tom Hudson  <hudson@cs.unc.edu>

	* nmb_Line (normalize) : add bounds checking to fix problem in
	collaboration

2000-10-04  Adam Seeger  <seeger@cs.unc.edu>

        * nmb_Image.C (pixelToWorld) : changed to use width, height instead
        of width-1, height-1 since the latter just looked wrong or at least
        it was inconsistent with worldToPixel
        * nmb_Image.C (setWorldToImageTransform) : new function, this
        not only sets a transformation matrix stored in the nmb_Image
        base class but also sets the locations of the corners of the
        image in the world to be consistent with this transformation
        * nmb_Image.C (getWorldToImageTransform) : this now returns
        the same thing as before as long as you don't call
        setWorldToImageTransform but otherwise it returns the thing
        you passed to setWorldToImageTransform

2000-10-03  Tom Hudson  <hudson@cs.unc.edu>

	* Point.C (Point_list::clear) : add check for non-NULL before
        deleting

2000-10-02  Adam Seeger  <seeger@cs.unc.edu>

        * nmb_Image.C (nmb_ImageArray::boundX, boundY) : fixed these
	to return the right thing
	* BCPlane.C (general change) : changed indexing of _value to
	be row-major instead of column-major - this change should be
	completely transparent except to those who use the function
	flatValueArray() - I looked for any use of this function and
	didn't see any but I have added a call in nmb_Image.C - this change is 
	useful because it lets us dump the pixel data directly into
	texture memory 
	* BCPlane.C (writePPMFile) : changed this so it would map valid values
	to 1-255 and invalid values to 0 so that output is a little nicer
	when you don't have a full grid of data
        * nmb_Image.C (getValueInterpolatedNZ) : new function that is
	just like getValueInterpolated but will return 0 if any of the
	neigboring pixels that would come into the computation of the
	interplated value is 0 (in other parts of the program 
	we use this to tell us where there is no data)
	* nmb_Image.C (nmb_ImageGrid::minNonZeroValue) -  changed to use
	the corresponding function in BCPlane
	* nmb_Image.C (class nmb_Image8bit) - replaced this class with
	a template class nmb_ImageArray which also derives from nmb_Image
        * nmb_Image.C (nmb_ImageGrid::pixelData) - returns something now
	instead of just NULL by returning plane->flatValueArray()

2000-10-02  Jason Clark  <jclark@cs.unc.edu>

	* nmb_Debug.C (collabVerbose): Added missing ;

2000-09-26  Tom Hudson  <hudson@cs.unc.edu>

	* nmb_Debug.C : add collab_verbosity, collabVerbose()

2000-09-21  Tom Hudson  <hudson@cs.unc.edu>

	* nmb_TimerList.h : new data members nmb_TimerList::d_startTime,
        nmb_Timestamp::wasPending
	* nmb_TimerList.C (isBlocked) : new function
        (start) : same
        (newTimestep) : fix accounting for blocked timers
        (unblock) : set wasPending
        (report) : use data from start(), wasPending
        (newTS) : clear wasPending

2000-09-14  Adam Seeger  <seeger@cs.unc.edu>

	* nmb_Dataset.C (constructor) : initializes colorMapName to 
	"none" instead of "CUSTOM". This is in order to keep things
	consistent between tcl and C but I don't understand why when
	all the tcl files get sourced this doesn't fix itself since the
	tcl code executes after the nmb_Dataset is created. (was causing
	some problem when collaboration code went to copy stuff around since
	CUSTOM is not the name of a colormap file and the code in nmg_Graphics
	that checked for this may have been removed recently)

2000-09-08  Adam Seeger  <seeger@cs.unc.edu>

	* nmb_Device.C (nmb_Device) : initialize vrpn_HANDLERPARAM passed 
	to gotConnection handlers but not used (avoids warnings)
	* nmb_SharedDevice.[hC] (unregister*) : adds several new functions
	to unregister device-level handlers to match the ones for registering
	handlers

2000-09-07  Adam Seeger  <seeger@cs.unc.edu>

        * nmb_Decoration.C,h (setScrapeHeightScale) : new function
                             (getScrapeHeightScale) : new function
                             (setScrapeHeightOffset) : new function
                             (getScrapeHeightOffset) : new function
                             (traverseVisibleScrapes): made this so it uses
        scaling and size to affect stored scrape marks instead of using
        values from the past that have already been applied to the marker
        parameters (this affects where marker_height gets applied)
                             (addScrapeMark) : this now uses the surface_z
        to compute the maximum depth into the surface (image z values) for
        modification z values to be used later in determining how high to 
        make the markers

2000-08-31  Kwan Torrich Skinner  <skinner@cs.unc.edu>

        * all : merged merge-2000-summer-thirdtech code with trunk.

2000-08-17  Adam Seeger <seeger@cs.unc.edu>

	* nmb_Image.C,h	(nmb_ImageX(nmb_Image *)) : new constructor
			(maxValidValue) : new function
			(minValidValue) : new function
			(maxNonZeroValue) : new function
			(minNonZeroValue) : new function

2000-08-11  Kwan Torrich Skinner  <skinner@cs.unc.edu>

	* all: Merge thirdtech_branch code to trunk.

2000-08-10  Jeffrey Juliano  <juliano@cs.unc.edu>

	* BCGrid.h (class BCGrid): Add comments to some members.

	* ChangeLog: New file.

2000-08-07  Jeffrey Juliano  <juliano@cs.unc.edu>

	* PPM.h: (constructor_worker): New function.

	* PPM.C (PPM): Initialize fields.
	Bug fix - move real work to constructor_worker, and call it.
	(constructor_worker): New function.  This code used to be in one
	of the two constructors.

