2000-12-20  Aron Helser  <helser@cs.unc.edu>

	* all: 3rdtech merge into main trunk. 

2000-12-05  Tom Hudson  <hudson@cs.unc.edu>

	* nmb_Device.C : add new member d_redundancy
	(nmb_Device::dispatchRedundantMessage) : new function
	(nmb_Device_Client::dispatchRedundantMessage) : same
	(nmb_Device_Client::bufferMessage) : same
	(nmb_Device_Client::dispatchMessage) : factor common code into
	bufferMessage()
	* nmb_SharedDevice.C
	(nmb_SharedDevice_Remote::sendBuffer) : instead of duplicating
	code, call nmb_Device_Client::sendBuffer()
	(nmb_SharedDevice_Remote::dispatchRedundantMessage) : new function


2000-12-05  Kwan Torrich Skinner <skinner@cs.unc.edu>

	* BCPlane.[C,h] (BCPlane::computeOptimizeMinMax) : new function.

2000-11-29  Adam Seeger  <seeger@cs.unc.edu>

	* BCPlane.[Ch] : changes to allow a border to be put in the data array
        The default border width is now 1 and a value of 0 should do the same
	thing as before.
	* nmb_Image.[Ch] : removed template usage from this code and replaced
	with a bunch of different code to dynamically handle different
        pixel types. Also added border code and normalize routine
        to nmb_ImageArray class for texture mapping purposes 

2000-10-17  Adam Seeger  <seeger@cs.unc.edu>

	* nmb_Image.C (nmb_ImageGrid::setBounds) : now modifies plane->_grid
	instead of seg-faulting when dealing with a grid that may contain
	multiple planes (works like setBoundX and setBoundY now)

2000-10-11  Adam Seeger  <seeger@cs.unc.edu>

	* BCPlane.C (minNonZeroValue, maxNonZeroValue) : In the rare case
	that all the data is the same non-zero value, these two functions
	were concluding that there was no data and this fixes the code
        so that only the conventional stronger yet still not completely right
        assumption is used
        (that there is no data only if both min and max are 0)
	The offending stream file was:
        /afs/unc/proj/stm/data/snider/2000/Aug/nm/081800/4-probe-test.nm

2000-10-08  Adam Seeger  <seeger@cs.unc.edu>

        * nmb_Image.C (normalize) : new function that normalizes an image to
        some range of values (0-1 for float), 0-maxForType for integer types
        so that we can easily render the image using openGL
        * nmb_Image.C (nmb_ImageGrid::setBoundX, setBoundY) : now modifies
        plane->_grid instead of failing when dealing with a grid that 
        may contain multiple planes
        * nmb_Image.h (nmb_Image::nmb_Image) : added missing initialization 
        for d_worldToImageMatrixSet

2000-10-05  Tom Hudson  <hudson@cs.unc.edu>

	* nmb_Line (normalize) : add bounds checking to fix problem in
	collaboration

2000-10-04  Adam Seeger  <seeger@cs.unc.edu>

        * nmb_Image.C (pixelToWorld) : changed to use width, height instead
        of width-1, height-1 since the latter just looked wrong or at least
        it was inconsistent with worldToPixel
        * nmb_Image.C (setWorldToImageTransform) : new function, this
        not only sets a transformation matrix stored in the nmb_Image
        base class but also sets the locations of the corners of the
        image in the world to be consistent with this transformation
        * nmb_Image.C (getWorldToImageTransform) : this now returns
        the same thing as before as long as you don't call
        setWorldToImageTransform but otherwise it returns the thing
        you passed to setWorldToImageTransform

2000-10-03  Tom Hudson  <hudson@cs.unc.edu>

	* Point.C (Point_list::clear) : add check for non-NULL before
        deleting

2000-10-02  Adam Seeger  <seeger@cs.unc.edu>

        * nmb_Image.C (nmb_ImageArray::boundX, boundY) : fixed these
	to return the right thing
	* BCPlane.C (general change) : changed indexing of _value to
	be row-major instead of column-major - this change should be
	completely transparent except to those who use the function
	flatValueArray() - I looked for any use of this function and
	didn't see any but I have added a call in nmb_Image.C - this change is 
	useful because it lets us dump the pixel data directly into
	texture memory 
	* BCPlane.C (writePPMFile) : changed this so it would map valid values
	to 1-255 and invalid values to 0 so that output is a little nicer
	when you don't have a full grid of data
        * nmb_Image.C (getValueInterpolatedNZ) : new function that is
	just like getValueInterpolated but will return 0 if any of the
	neigboring pixels that would come into the computation of the
	interplated value is 0 (in other parts of the program 
	we use this to tell us where there is no data)
	* nmb_Image.C (nmb_ImageGrid::minNonZeroValue) -  changed to use
	the corresponding function in BCPlane
	* nmb_Image.C (class nmb_Image8bit) - replaced this class with
	a template class nmb_ImageArray which also derives from nmb_Image
        * nmb_Image.C (nmb_ImageGrid::pixelData) - returns something now
	instead of just NULL by returning plane->flatValueArray()

2000-10-02  Jason Clark  <jclark@cs.unc.edu>

	* nmb_Debug.C (collabVerbose): Added missing ;

2000-09-26  Tom Hudson  <hudson@cs.unc.edu>

	* nmb_Debug.C : add collab_verbosity, collabVerbose()

2000-09-21  Tom Hudson  <hudson@cs.unc.edu>

	* nmb_TimerList.h : new data members nmb_TimerList::d_startTime,
        nmb_Timestamp::wasPending
	* nmb_TimerList.C (isBlocked) : new function
        (start) : same
        (newTimestep) : fix accounting for blocked timers
        (unblock) : set wasPending
        (report) : use data from start(), wasPending
        (newTS) : clear wasPending

2000-09-14  Adam Seeger  <seeger@cs.unc.edu>

	* nmb_Dataset.C (constructor) : initializes colorMapName to 
	"none" instead of "CUSTOM". This is in order to keep things
	consistent between tcl and C but I don't understand why when
	all the tcl files get sourced this doesn't fix itself since the
	tcl code executes after the nmb_Dataset is created. (was causing
	some problem when collaboration code went to copy stuff around since
	CUSTOM is not the name of a colormap file and the code in nmg_Graphics
	that checked for this may have been removed recently)

2000-09-08  Adam Seeger  <seeger@cs.unc.edu>

	* nmb_Device.C (nmb_Device) : initialize vrpn_HANDLERPARAM passed 
	to gotConnection handlers but not used (avoids warnings)
	* nmb_SharedDevice.[hC] (unregister*) : adds several new functions
	to unregister device-level handlers to match the ones for registering
	handlers

2000-09-07  Adam Seeger  <seeger@cs.unc.edu>

        * nmb_Decoration.C,h (setScrapeHeightScale) : new function
                             (getScrapeHeightScale) : new function
                             (setScrapeHeightOffset) : new function
                             (getScrapeHeightOffset) : new function
                             (traverseVisibleScrapes): made this so it uses
        scaling and size to affect stored scrape marks instead of using
        values from the past that have already been applied to the marker
        parameters (this affects where marker_height gets applied)
                             (addScrapeMark) : this now uses the surface_z
        to compute the maximum depth into the surface (image z values) for
        modification z values to be used later in determining how high to 
        make the markers

2000-08-31  Kwan Torrich Skinner  <skinner@cs.unc.edu>

        * all : merged merge-2000-summer-thirdtech code with trunk.

2000-08-17  Adam Seeger <seeger@cs.unc.edu>

	* nmb_Image.C,h	(nmb_ImageX(nmb_Image *)) : new constructor
			(maxValidValue) : new function
			(minValidValue) : new function
			(maxNonZeroValue) : new function
			(minNonZeroValue) : new function

2000-08-11  Kwan Torrich Skinner  <skinner@cs.unc.edu>

	* all: Merge thirdtech_branch code to trunk.

2000-08-10  Jeffrey Juliano  <juliano@cs.unc.edu>

	* BCGrid.h (class BCGrid): Add comments to some members.

	* ChangeLog: New file.

2000-08-07  Jeffrey Juliano  <juliano@cs.unc.edu>

	* PPM.h: (constructor_worker): New function.

	* PPM.C (PPM): Initialize fields.
	Bug fix - move real work to constructor_worker, and call it.
	(constructor_worker): New function.  This code used to be in one
	of the two constructors.

