/* The nanoManipulator and its source code have been released under the
 * Boost software license when nanoManipulator, Inc. ceased operations on
 * January 1, 2014.  At this point, the message below from 3rdTech (who
 * sublicensed from nanoManipulator, Inc.) was superceded.
 * Since that time, the code can be used according to the following
 * license.  Support for this system is now through the NIH/NIBIB
 * National Research Resource at cismm.org.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef NMB_INTERVAL_H
#define NMB_INTERVAL_H
/*===3rdtech===
  Copyright (c) 2002 by 3rdTech, Inc.
  All Rights Reserved.

  This file may not be distributed without the permission of 
  3rdTech, Inc. 
  ===3rdtech===*/

class nmb_Interval {

  public:

    nmb_Interval (void);  ///< constructs the (empty) interval [0, -1]
    nmb_Interval (int low, int high);
    nmb_Interval (const nmb_Interval &);
    ~nmb_Interval (void);

    nmb_Interval & operator = (const nmb_Interval &);
    nmb_Interval & operator += (const nmb_Interval &);
    nmb_Interval & operator -= (const nmb_Interval &);

    nmb_Interval operator + (const nmb_Interval &) const;
    nmb_Interval operator - (const nmb_Interval &) const;
      ///< does not handle cases that would split the base interval
      ///< into two intervals

    void clear(); ///< Resets to empty interval [0,-1]

    int operator == (const nmb_Interval &) const;
    int overlaps (const nmb_Interval &) const;
    int adjacent (const nmb_Interval &) const;
    int includes (int) const;
    int includes (const nmb_Interval &) const;
    int empty (void) const; 

    int low (void) const
      { return d_low; }
    int high (void) const
      { return d_high; }

  private:

    int d_low; 
    int d_high;
};

#endif  // NMB_INTERVAL_H
