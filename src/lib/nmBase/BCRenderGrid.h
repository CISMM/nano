/* The nanoManipulator and its source code have been released under the
 * Boost software license when nanoManipulator, Inc. ceased operations on
 * January 1, 2014.  At this point, the message below from 3rdTech (who
 * sublicensed from nanoManipulator, Inc.) was superceded.
 * Since that time, the code can be used according to the following
 * license.  Support for this system is now through the NIH/NIBIB
 * National Research Resource at cismm.org.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef BC_RENDER_GRID_H
#define BC_RENDER_GRID_H

#include "BCGrid.h"

// BCRenderGrid
//
// Given a grid, uses BCGrid::decimate() or interpolate() to expand
// to a given size, attempting to normalize to the range [0, 1].
// Registers callbacks on all planes in the BCGrid so that as new
// data comes in to the BCGrid it is automatically
// filtered into the BCRenderGrid.

class BCRenderGrid : public BCGrid {

  public:

    // CONSTRUCTORS

    BCRenderGrid (BCGrid * sourceGrid,
                  short numX, short numY,
                  float scale = 1.0f);
      // "scale" determines the range of the data.
      // By default, data is normalized to [0, 1].
      // If scale is specified, data will be normalized to
      // [0, scale].

    ~BCRenderGrid (void);

    // ACCESSORS

    // MANIPULATORS

    // void setScale (float scale);

  protected:

    void computeMask (short numX, short numY);
      // Fill in d_gaussian, d_GaussianNum[XY] for a given extent.

  private:

    static void decimate_value (BCPlane * sourcePlane,
                                int x, int y, void * userdata);
      // Callback to be placed on planes in sourceGrid so that
      // our copies are updated when they change.

    BCGrid * d_sourceGrid;
    short d_resampledNumX;
    short d_resampledNumY;

    float d_scale;
      // Scaling to perform on source grid.
      // Currently fixed at compile time, but needs (?) to be made
      // variable;  maybe we have to resample everything from
      // d_sourceGrid?

    double ** d_gaussian;
    short d_gaussianNumX;
    short d_gaussianNumY;

};

#endif  // BC_RENDER_GRID_H

