/* The nanoManipulator and its source code have been released under the
 * Boost software license when nanoManipulator, Inc. ceased operations on
 * January 1, 2014.  At this point, the message below from 3rdTech (who
 * sublicensed from nanoManipulator, Inc.) was superceded.
 * Since that time, the code can be used according to the following
 * license.  Support for this system is now through the NIH/NIBIB
 * National Research Resource at cismm.org.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef NMB_SUBGRID_H
#define NMB_SUBGRID_H

#include "nmb_Types.h"  // for NM_BOOLEAN

class BCGrid;
class BCPlane;

class Semaphore;  // from multip/thread.h

// Synchronization.
// This object may be written by multiple processes when
// doing shared-memory multiprocessing.
// TCL blows up if the Semaphore is part of the object?

extern Semaphore * range_ps;

/**
nmb_Subgrid

Tom Hudson, September 1997.
Data structure from microscape.h;  code from animate.c
(now MicroscopeRcv.C), active_set.C, microscape.c
(now microscopeHandlers.C), openGL.c, tcl_tk.c

Tracks the portion of a grid that has changed (since the
last rendering iteration, so that those display lists can
be regenerated).
*/
class nmb_Subgrid {

  public:

    nmb_Subgrid (BCGrid * &);

    vrpn_bool Changed (void) const;
      ///< Returns V_TRUE if any point in the subgrid has changed
      ///< since the last call to Clear()
    float RatioOfChange (void) const;
      ///< Returns the ratio of the size of the subgrid in Y to
      ///< the size of the sugrid in X

    void AddPoint (const int, const int);
      ///< Marks a single point as changed.

    void ChangeAll (void);
    //void ChangeAll (const BCGrid *);
    //void ChangeAll (const BCPlane *);
      ///< Marks the entire subgrid as changed.

    void Clear (void);
    //void Clear (const BCGrid *);
    //void Clear (const BCPlane *);
      ///< Clears the subgrid.
    void GetBoundsAndClear (int * minX, int * maxX, int * minY, int * maxY);
      ///< Looks up min/max values and clears the subgrid atomically.
      ///< Bounds are returned in the non-NULL arguments.


    int MinX (void) const { return min_x; }
    int MaxX (void) const { return max_x; }
    int MinY (void) const { return min_y; }
    int MaxY (void) const { return max_y; }

    //Semaphore * ps;

  private:

    int   min_x, min_y;   /* Lower-left corner of grid */
    int   max_x, max_y;   /* Upper-right corner of grid */

    BCGrid * & grid;

};


#endif  // NMB_SUBGRID_H

