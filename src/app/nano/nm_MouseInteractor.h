/* The nanoManipulator and its source code have been released under the
 * Boost software license when nanoManipulator, Inc. ceased operations on
 * January 1, 2014.  At this point, the message below from 3rdTech (who
 * sublicensed from nanoManipulator, Inc.) was superceded.
 * Since that time, the code can be used according to the following
 * license.  Support for this system is now through the NIH/NIBIB
 * National Research Resource at cismm.org.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef NM_MOUSEINTERACTOR_H
#define NM_MOUSEINTERACTOR_H
/*===3rdtech===
  Copyright (c) 2000 by 3rdTech, Inc.
  All Rights Reserved.

  This file may not be distributed without the permission of 
  3rdTech, Inc. 
  ===3rdtech===*/

#include "vrpn_Button.h"
#include "vrpn_Tracker.h"
#include "vrpn_ForceDevice.h"

class nm_MouseInteractor: public vrpn_Tracker,
					public vrpn_Button_Filter {
protected:
    static int d_last_move_x, d_last_move_y;
    static int d_move_x, d_move_y;
    static int d_ctrl_on, d_shift_on;
    static vrpn_float64 d_press_pos[3], d_press_quat[4]; 
    ///< Pose when button pressed
    
    /// Static GLUT callbacks need object pointer
    static nm_MouseInteractor * d_instance;

    /// Protected constructor helps with singleton pattern.
    nm_MouseInteractor(char *name, vrpn_Connection *c, float hz=1.0);
    float update_rate;
    struct timeval timestamp;
    
    virtual void get_report(void);
    
    
    // from vrpn_Tracker
    static int VRPN_CALLBACK handle_update_rate_request (void *, vrpn_HANDLERPARAM);
    static int VRPN_CALLBACK handle_resetOrigin_change_message(void * userdata,
                                                 vrpn_HANDLERPARAM p);

public:
    static nm_MouseInteractor * createMouseInteractor(char *name, 
                                          vrpn_Connection *c, float hz);
    ~nm_MouseInteractor();
    virtual void mainloop(void);
    virtual void reset();
    void getPosition(double *vec, double *quat);
    virtual void print_report(void);
    void enable();
    void disable();

    static void my_glutMouseFunc(int button, int state,
                                int x, int y);
    static void my_glutMotionFunc(int x, int y);
    static void my_glutKeyboardFunc(unsigned char key, int x, int y);
    static void handle_mi_enabled_change(int, void *);

};

#endif




