/* The nanoManipulator and its source code have been released under the
 * Boost software license when nanoManipulator, Inc. ceased operations on
 * January 1, 2014.  At this point, the message below from 3rdTech (who
 * sublicensed from nanoManipulator, Inc.) was superceded.
 * Since that time, the code can be used according to the following
 * license.  Support for this system is now through the NIH/NIBIB
 * National Research Resource at cismm.org.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/


// A number of independent functions written for collaboration.
// Some are handlers for TclVars.

// synchronization time handlers
extern int handle_timed_sync_request( void* );
extern int local_time_sync( void* );
extern void handle_synchronize_timed_change( vrpn_int32, void * );
extern int handle_timed_sync_complete( void * userdata );
extern void handle_copy_to_private( vrpn_int32 value, void * userdata );
extern void handle_copy_to_shared( vrpn_int32 value, void * userdata );
extern void handle_peer_sync_change( void * userdata, vrpn_bool value );


/// synchronization UI handlers
extern void handle_collab_red_measure_change( vrpn_float64 newValue,
                                              void * userdata );
extern void handle_collab_green_measure_change( vrpn_float64 newValue,
                                                void * userdata );
extern void handle_collab_blue_measure_change( vrpn_float64 newValue,
                                               void * userdata );
extern void handle_collab_measure_change( nmb_Dataset * data,
                                          int which_line );
extern void handle_collab_measure_move( float x, float y,
					void * userdata ); 



/// Collaboration. so we can track hand position of collaborator(s)
extern void handle_collab_machine_name_change( const char *new_value, 
					       void *userdata);

/** handle_collab_sensor2tracker_change is the callback for the position
    and orientation messages sent from the nM_coord_change_server (to
    track a collaborator's hand position) */
extern void VRPN_CALLBACK handle_collab_sensor2tracker_change( void *userdata,
						 const vrpn_TRACKERCB info);

/** handle_collab_mode_change is the callback for the mode
    that track a collaborator's mode */
extern void VRPN_CALLBACK handle_collab_mode_change( void *userdata,
				       const vrpn_ANALOGCB info);

