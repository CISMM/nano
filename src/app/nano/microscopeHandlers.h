/* The nanoManipulator and its source code have been released under the
 * Boost software license when nanoManipulator, Inc. ceased operations on
 * January 1, 2014.  At this point, the message below from 3rdTech (who
 * sublicensed from nanoManipulator, Inc.) was superceded.
 * Since that time, the code can be used according to the following
 * license.  Support for this system is now through the NIH/NIBIB
 * National Research Resource at cismm.org.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/*===3rdtech===
  Copyright (c) 2000 by 3rdTech, Inc.
  All Rights Reserved.

  This file may not be distributed without the permission of 
  3rdTech, Inc. 
  ===3rdtech===*/
#ifndef _H_MICROSCOPE_HANDLERS
#define _H_MICROSCOPE_HANDLERS

#include <vrpn_Types.h>

// These handlers take a pointer to a Microscope as their userdata.
// Thus, they need not access the global 'microscope'.
// This helps us prepare for multiple simultaneous Microscopes.

class nmm_Microscope_Remote;
void setupStateCallbacks (nmm_Microscope_Remote *);
class nmm_Microscope_Remote;
void teardownStateCallbacks (nmm_Microscope_Remote *);

void handle_doRelaxComp_change (vrpn_int32 val, void * _mptr);
void handle_grid_resolution_change (vrpn_int32, void * _mptr);
void handle_scan_angle_change (vrpn_float64, void * _mptr);
void handle_scanning_change (vrpn_int32, void * _mptr);
void handle_withdraw_tip_change (vrpn_int32, void * _mptr);

void handle_Mmode_change (vrpn_int32, void * _mptr);
void handle_Mstyle_change (vrpn_int32, void * _mptr);
void handle_Mtool_change (vrpn_int32, void * _mptr);
void handle_Mmode_p_change (vrpn_float64, void * _mptr);
void handle_Mmode_p_change (vrpn_int32, void * _mptr);
void handle_Mstyle_p_change (vrpn_float64, void * _mptr);
void handle_Mtool_p_change (vrpn_float64, void * _mptr);
void handle_Imode_change (vrpn_int32, void * _mptr);
void handle_Istyle_change (vrpn_int32, void * _mptr);
void handle_Imode_p_change (vrpn_float64, void * _mptr);
void handle_Imode_p_change (vrpn_int32, void * _mptr);
void handle_Istyle_p_change (vrpn_float64, void * _mptr);

void handle_tcl_scanEnable_change (vrpn_int32, void * _mptr);

void handle_SLmode_change (vrpn_int32, void * _mptr);
void handle_SLforcelimit_change (vrpn_int32, void * _mptr);
void handle_SLmode_p_change (vrpn_float64, void * _mptr);
void handle_SLmode_p_change (vrpn_int32, void * _mptr);
void handle_SLforcelimit_p_change (vrpn_float64, void * _mptr);
void handle_linescan_start (vrpn_int32, void *_mptr);
void handle_linescan_position (vrpn_float64 , void *_mptr);
void handle_scanline_position_display_change(vrpn_int32, void *_mptr);

void handle_image_accept (vrpn_int32, void * _mptr);
void handle_modify_accept (vrpn_int32, void * _mptr);
void handle_scanline_accept (vrpn_int32, void * _mptr);

void cause_grid_redraw (vrpn_float64, void *);  // argument not used!

void handle_export_dataset_change (const char *, void * _mptr);
void handle_z_dataset_change (const char *, void * _mptr);

// Slow line tool callbacks.
void init_slow_line (void * _mptr);
void handle_slow_line_playing_change (vrpn_int32 new_value, void * _mptr);
void handle_slow_line_step_change (vrpn_int32 new_value, void * _mptr);
void handle_slow_line_direction_change (vrpn_int32 new_value, void * _mptr);
int slow_line_ReceiveNewPoint (void * _mptr, const Point_results * p);
void handle_slow_line_collect_data (vrpn_int32 new_value, void * _mptr);
//takes a step when in slow line mode
void take_slow_line_step(void * _mptr);


//void handle_mutex_request (vrpn_int32, void *);
//void handle_mutex_release (vrpn_int32, void *);

#endif  // _H_MICROSCOPE_HANDLERS



