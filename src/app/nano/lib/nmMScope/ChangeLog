2005-06-16  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* nmMScopeGenerate.dsp : Changed it to use
		$(SYSTEMDRIVE) rather than C: for the location of the
		bash shell.  This is a more general solution and should
		keep us from having to switch in the future.

2005-05-02  Aron Helser  <helser@cs.unc.edu>

	* nmm_MicroscopeRemote.C: Removed timezone structure, reordered
	includes because of "#define X 0" somewhere.
	* nmm_MicroscopeRemoteGen.Cdef: same
	* nmm_MicroscopeRemote.hdef: same

2004-09-16  Russell M. Taylor II  <taylorr@cs.unc.edu>

	* nmm_MicroscopeRemote.hdef : Uses new VRPN_CALLBACK definition.
	* nmm_QueueMonitor.hdef : Uses new VRPN_CALLBACK definition.
	* nmm_SimulatedMicroscope_Remote.hdef : same.

2003-11-05  David Marshburn  <marshbur@cs.unc.edu>

	* nmm_MicroscopeRemoteGen.Cdef 
	(nmm_Microscope_Remote::RcvScanDataset_body):  removed initialization
	of colorplane (didn't work).

2002-11-13 Jameson Miller <millerj@cs.unc.edu>
	* active_set.c (.h) : added in new functions to remove channels 
	and their derived planes from the height plane list 
	when they are removed from the list of active channels.
	new functions: 	update_dataset_list()
			check_for_derived_planes(..)


2002-10-09  Adam Seeger  <seeger@cs.unc.edu>

	* nmm_AFM_Report.vrpndef : new message type: FinishedFreehand - an echo in
	response to MarkFinishFreehand message from client
	* nmm_Microscope.C : added MarkFinishFreehand and FinishedFreehand messages
    * nmm_MicroscopeRemote.C : "
	* nmm_MicroscopeRemote.hdef: "
	* nmm_MicroscopeRemoteGen.Cdef: "
	* nmm_SPM_Control.vrpndef: "

2002-10-08  Adam Seeger  <seeger@cs.unc.edu>

	* nmm_MicroscopeRemote.[C/hdef] (FinishFreehand): new function
    (DisplayModResult): removed some redundant code and updated comments

2002-07-02 Jameson Miller <millerj@cs.unc.edu>
	* DirectStep.C (h) - changed handle functions so that you can step along
	 user defined axis.

2002-07-02  Andrea Hilchey <hilchey@cs.unc.edu>

	* nmm_SimulatedMicroscope.Cdef : added check in receiver
	function for grid size so that x and y scan resolution data
	members updated to match nano's grid size only if the server
	name is the eroder's

2002-07-01  David Borland <borland@cs.unc.edu>

        * nmm_SimulatedMicroscope_Remote.[Cdef/hdef] : changed data 
        member from a URender object to a URTubeFile object.

2002-06-28  Adam Seeger  <seeger@cs.unc.edu>

	* nmm_SimulatedMicroscope_Remote.hdef: adding missing public 
	inheritance specification for class

2002-06-26  Andrea Hilchey <hilchey@cs.unc.edu>

	* nmm_AFMSIMSERVER_Report.vrpndef : new message type,
	OrigScanLineData, which holds window line data sent from
	the remote side to the server side.  nmm_AFMSIMSERVER_Report
	contains messages that are sent from the client to the server

	* nmm_AFMSIM_Report.vrpndef : new message type, DeviceName,
	which contains the name of the server.  nmm_AFMSIM_Report
	contains messages which are sent from the server to the client

	* nmm_SimulatedMicroscope.Cdef,.hdef : added functions
	get_zrange(), get_zoffset(), and FillDataArray(), and data
	members DataArray, which holds scan data received from nano (if
	any), and last_rcv_y, which is used when reading in data from
	nano.  FillDataArray() is a way to internally fill in a data
	array with values from DataArray, so that the array values can
	be used outside the class, without exposing the private data
	member.  also, new handler and receiver function for new message
	defined in nmm_AFMSIMSERVER_Report, OrigScanLineData, and new
	send function for new message type defined in nmm_AFMSIM_Report,
	DeviceName	 

	* nmm_SimulatedMicroscop_Remote.Cdef,.hdef : new data members/
	functions related to DeviceName message.  new receiver function
	for this message sends initial scan data across the connection
	if the server is the eroder.  also new send function for 
	sending OrigScanData messages

2002-06-19 Jameson Miller <millerj@cs.unc.edu>
	
	* AFMState.h - autoscan tcl variable now a TclNet for
	collaboration.

2002-06-14  Aron Helser  <helser@cs.unc.edu>

	* nmm_MicroscopeRemoteGen.Cdef (ForceCurveData): Change the order
	force-curve data is handled, to match the order it is
	collected. Corrects order in mod files, and creates correct graph
	for stripchart.

	* AFMState.Ch: new fc_ variables to help. 

2002-06-05 Woojin Seok <seok@cs.unc.edu>
        *AFMState.h : replace Tclvar_int doRelaxComp by 
        TclNet_int doRelaxComp to share a state of button whose variable 
        is doRelaxComp.

2002-06-04 Jameson Miller <millerj@cs.unc.edu>
	*AFMState.c (.h) : moved variables for direct step from
	directstep to AFMState.c (.h). TCL vars now set up as modify
	params.

	*directStep.c(.h) : some TCL variables now declared in AFMState.

2002-05-22 Jameson Miller <millerj@cs.unc.edu>
	*AFMState.h - both modifyp_step_size and newmodifyp_step_size
		are TclNEt variables so collaborators can see changes
		in the modify live window.

2002-05-16 Jameson Miller <millerj@cs.unc.edu>
	* AFMState.C (.h) : added new TCL variables to toggle  taking data
	continuosly wor not when paused in slow line mode.

2002-05-09 Andrea HIlchey <hilchey@cs.unc.edu>

	* nmm_SimulatedMicroscope.Cdef : changed ordering of messages
	sent for tubes so that either ordering of opening the connection
	and importing the object works

2002-05-07 Andrea HIlchey <hilchey@cs.unc.edu>

	* nmm_SimulatedMicroscope.hdef,Cdef : changed data members
	yaw,pitch, and roll to rot_x, rot_y, rot_z to reflect change
	from rotations in terms of the former to the latter, changed
	RcvRot function to use new variable names

	* nmm_AFMSIMSERVER_Report.vrpndef : changed Rot message type
	to have x,y,z values

	* nmm_SimulatedMicroscope_Remote.Cdef : changed order of 
	parameters to encode_Cylinder function in
	encode_and_sendCylinder to fix azimuth/altitude switched
	problem, also changed parameter names to encode_and_sendRot
	function (yaw,pitch,roll -> x,y,z)

2002-04-26 David Borland <borland@cs.unc.edu>

        * nmm_SimulatedMicroscope_Remote.Cdef : send translation when
        sending cylinders

2002-04-05 Andrea HIlchey <hilchey@cs.unc.edu>

	* nmm_SimulatedMicroscope_Remote.Cdef : filled in 
	encode_and_sendTrans stubbed out function so that it sends
	translation

	* nmm_AFMSIMSERVER_Report.vrpndef : added Trans message type
	for sending translation

	* nmm_SimulatedMicroscope.Cdef,hdef : added receive function for
	handling receipt of translations and variables dealing with
	translations

2002-04-02  David Marshburn  <marshbur@cs.unc.edu>

	* nmm_MicroscopeRemote.Cdef (RcvInImgMode):  only jump to scan line
	zero if we're supposed to return to scanning automatically after
	a modification.

2002-04-02 David Borland <borland@cs.unc.edu>
        * nmm_SimulatedMicroscope_Remote.Cdef : added 
        encode_and_sendRot and encode_and_sendTrans stubs

        * nmm_SimulatedMicroscope_Remote.hdef : added
        encode_and_sendRot and encode_and_sendTrans definitions

2002-03-29 Andrea HIlchey <hilchey@cs.unc.edu>

	* nmm_AFMSIMSERVER_Report : added new message type: Cylinder

	* nmm_SimulatedMicroscope : added function to handle receipt of
	cylinders (actually nanotubes), and some new data members

	* nmm_SimulatedMicroscope_Remote : handle_gotConnection sends
	cylinders from its myURenderObject data member if that data
	member is not NULL (i.e. their is a model object already
	created).  new function:  encode_and_sendCylinder.  if model
	object not already created when connection
	established, sending is handled my the URender object that is
	associated with the model calling the sendCylinders function.
	this function is also new:
	void encode_and_sendCylinder(
		vrpn_float32 x, vrpn_float32 y,vrpn_float32 z,
		vrpn_float32 altitude, vrpn_float32 azimuth,
		vrpn_float32 length, vrpn_float32 radius);
	void sendCylinders(URender * obj);

2002-03-27  David Borland  <borland@cs.unc.edu>

        * nmm_SimulatedMicroscope_Remote.Cdef: fixed build problem on sgi

2002-03-27  David Borland  <borland@cs.unc.edu>

        * nmm_SimulatedMicroscope_Remote.Cdef: added code for sending 
        translated and rotated triangles to the AFM simulator

2002-03-21  Aron Helser  <helser@cs.unc.edu>

	* AFMState.C: Handle replacement BCString ->
	string
	* nmm_MicroscopeRemoteGen.Cdef: same
	* nmm_RelaxComp.Ch: same
	* nmm_SimulatedMicroscope_Remote.Cdef,hdef: same
	* nmMScope.dsp: Release config now builds.

2002-03-20  David Marshburn  <marshbur@cs.unc.edu>

	* nmm_SimulatedMicroscope.Cdef (encode_and_sendData):  
	loop variable change.

2002-03-19  David Marshburn  <marshbur@evans.cs.unc.edu>

	* nmm_SimulatedMicroscope.Cdef (encode_and_sendData):  
	loop variable change.

2002-03-13  David Marshburn  <marshbur@cs.unc.edu>

	* nmMScope.dsp:  removed two generated files from this project's
	file listing.

2002-03-13  David Marshburn  <marshbur@cs.unc.edu>

	* nmMScopeGenerate.dsp:  changed the custom build rules so that 
	this project can be built as a part of any workspace.

2002-03-12  Aron Helser  <helser@cs.unc.edu>

	* .cvsignore: Added nmm_AFMSIMSERVER_Report.Ch, since they are
	automatically generated. 

2002-03-11  Aron Helser  <helser@cs.unc.edu>

	* nmm_MicroscopeRemoteGen.Cdef (PidParameters): replaced static
	int variable with member variable. 
	(PointResultData): rotate point data to match scan angle. Might
	fix problem with very noisy touch when scan is rotated. 
	(ForceCurveData): same rotation here. 
	(SetRegionClipped): call d_dataset->inputGrid->clear(), so plane's
	valid region is reset correctly. 
	
	* nmm_MicroscopeRemote.C (DisplayModResult): Don't rotate point
	data here anymore. 

2002-02-27 David Borland <borland@cs.unc.edu>
        * Makefile : added nmUGraphics to the libraries

2002-02-26 Andrea Hilchey <hilchey@cs.unc.edu>

	* nmm_SimulatedMicroscope_Remote.* : changed number of triangles
	sent from arbitrary value to real number in extracted model,
	also added URender * myURenderObject to access triangle info
	(temp)

	* nmm_SimulatedMicroscope.hdef : added functions get_y_offset()
	and get_x_offset() to offset triangles sent in the simulator

2002-02-25 Andrea Hilchey <hilchey@cs.unc.edu>

	* nmm_AFMSIMSERVER_Report.vrpndef : add 'Triangle' message type
	which sends 3 vertices given in x,y, and z

	* nmm_SimulatedMicroscope_Remote.Ch : add
	encode_and_sendTriangle function to send over an individual
	triangle and code testing sending of triangles (temporary),
	also decode and encode functions for Triangle added by 
	inclusion of new message from nmm_AFMSIMSERVER_Report

	* nmm_SimulatedMicroscope.Ch : add a linked list to hold
	triangles when they are received so that receipt speed not held
	up by processing speed, added Node class to create list, and 
	data members Node * head and * holder

2002-02-15  Aron Helser  <helser@cs.unc.edu>

	* AFMState.Ch: Removed stm_z_scale, read_mode. These don't depend
	on microscope object. Moved to microscape.c. Some comment changes.
	* nmm_MicroscopeRemote.C: handle move of ReadMode, stm_z_scale to
	nmb_Dataset.  
	* nmm_MicroscopeRemote.hdef: same
	* nmm_MicroscopeRemoteGen.Cdef: same

2002-01-31  David Marshburn  <marshbur@cs.unc.edu>

	* nmMScope.dsp:  builds with non-static run-time libraries.

2002-01-15  Andrea Hilchey <hilchey@cs.unc.edu>

	* nmm_SimulatedMicroscope_Remote.C and nmm_SimulatedMicroscope.C :
	modified each side so that data is now both sent and received line by
	line. also now connection is fully functional


2001-12-18  David Marshburn  <marshbur@evans.cs.unc.edu>

	* nmm_Microscope.C:  remove compiler warnings
	* optimize_now.C:  same, but more formatting
	* nmm_MicroscopeTranslator.C: same

2001-12-18  Aron Helser  <helser@cs.unc.edu>

	* nmm_MicroscopeRemote.C (rotateScanCoords): use doubles. 
	(RecordResistance): remove unnecessary message send. 
	* nmm_SPM_Control.vrpndef: remove unused RecordResistance
	message. 

2001-12-13  Nathan Conrad  <conrad@cs.unc.edu>

	* Makefile: Makefile now auto-detects all *.??def files, and builds
	them correctly, just like on VC++. Also, make clean removes the
	generated files, but only when run in app/nano/lib/nmMScope.

2001-12-04 Andrea Hilchey <hilchey@cs.unc.edu>
	* nmm_SimulatedMicroscope_Remote.Cdef : updated
	* nmm_SimulatedMicroscope_Remote.hdef : updated
	* nmm_SimulatedMicroscope.Cdef : updated
	* nmm_SimulatedMicroscope.hdef : updated
	* nmm_AFMSIM_Report : updated
	

2001-11-27 Jameson Miller <millerj@cs.unc.edu>
	*directstep.C - cleaned up code so that compiler won't complain when
	compiling


2001-11-26  Adam Seeger  <seeger@cs.unc.edu>

	* nmm_MicroscopeRemoteGen.Cdef (BeginFeelTo): Added params x and y to
	get the perl script to output compilable code

2001-11-20  Aron Helser  <helser@cs.unc.edu>

	* nmm_MicroscopeRemote.C (ImageMode): Sets scan rate after msg to
	mark entry into image mode. Why did this ever work the other way?
	(ModifyMode): same. 

2001-11-19  Aron Helser  <helser@cs.unc.edu>

	* nmm_AFM_Control.vrpndef: change variable capitalization 
	* nmm_SPM_Report.vrpndef (BeginFeelTo): Added params mistakenly
	left out. 

	* nmm_MicroscopeRemoteGen.Cdef (nmm_Microscope_Remote): Change
	back to default handling for PointResult message. Fixes bug where
	point results were dropped upon receipt by
	QueueMonitor/RedundantReceiver code. 

	* Makefile: Removed some dependencies which were unnecessary

	* active_set.C (Point_channel_selector): Bugfix, set flags to
	expect default point sets from Topo. 

2001-11-09  David Marshburn  <marshbur@cs.unc.edu>

	* nmm_MicroscopeRemote.C (getTimeSinceConnected): added a check
	for a null variable

2001-11-03 Jameson Miller<millerj@cs.unc.edu>
	* directstep.c: position of where the microscope was supposed to 
	go was being calculated wrong, fixed it
	
2001-10-23  David Marshburn  <marshbur@cs.unc.edu>

	* Makefile (clean-gen): added a new rule "clean-gen" to
	remove the automatically generated files created by 
	"make generate"

2001-10-22  Aron Helser  <helser@cs.unc.edu>

	* nmm_MicroscopeRemote.C: new - all functions which aren't
	automatically generated
	* nmm_MicroscopeRemoteGen.Cdef: new - all functions which are
	generated. Speeds up generation x2 or more!
	* Makefile: changed to accomodate new files
	* nmm_MicroscopeRemote.Cdef: removed
	
2001-09-30 Jameson Miller <millerj@cs.unc.edu>
	* nmm_MicroscopeRemote.Cdef: when a new scan region is recieved,
	changed order of when the dataset variables are updated and when
	the decoration variables are updated. also commented out test that
	seems to be obsolete. The correct region size should now be displayed

2001-09-21  Aron Helser  <helser@cs.unc.edu>

	* AFMState.C (autoscan): on by default. 

2001-09-14 Jameson Miller <millerj@cs.unc.edu>

	*AFMState.c, .h :added in direct step tool params
	*directstep.c .h: direct step controls. Lets user take steps in x/y
	or x/y/z. the size of the step can be changed. Also the user can 
	step to a certain point by inputing position.
	*Makefile: added in librarys to be included so nano would compile on SGIs
	*nmm_Types.h:  added Direct_step types to list of enums


2001-09-12  Aron Helser  <helser@cs.unc.edu>

	* nmm_MicroscopeRemote.Cdef (InSpectroscopyMode): Set state
	variable, this_mod_fc
	(InImgMode): unset state var
	(PointResultData): Check state var, do pointdata callbacks only if
	we aren't doing FC mod - these are called instead on FC results. 

	* AFMState.Ch (AFMModifyState): new state variable

2001-08-23    <dwyer@BISMUTH-CS>

	* nmm_Microscope.C: Add channel/direction selector for guardedscan

2000-12-05  Russ Taylor  <taylorr@cs.unc.edu>

	nmm_MicroscopeRemote.Cdef : See if the "autoscan" feature is on
		before asking the microscope to resume full scan at
		program start.  This is to protect the devices in the
		SEM/AFM system from being destroyed when the user connects
		to the AFM.  This didn't keep it from starting to scan,
		but it is a necessary part, so I'm leaving it in.

2001-08-10 Jameson Miller <millerj@cs.unc.edu>
	* optimize_now.C: fixed so that optimize now won't crash. 
	Data points are now no longer taken from the data set.

2001-08-10  David Marshburn  <marshbur@evans.cs.unc.edu>

	* AFMState.h: (AFMImageState)  added new_foo TclNet_vars
	for all imaging parameters.
	* AFMState.C: (AFMImageState)  added new_foo vars to
	initialization.

2001-07-19  David Marshburn  <marshbur@tungsten-cs.cs.unc.edu>

	* nmm_AFM_Control.vrpndef:
	([encode,decode]_EnterOscillatingMode)  re-ordered arguments to 
	match all other encode/decode oscillating-mode messages in
	nmm_AFM_Report and nmm_Microscope.
	
	* nmm_MicroscopeRemote.hdef,.Cdef:  
	(EnterOscillatingMode) re-ordered the arguments to match those above.
	Re-ordered arguments to all invocations of this.

	* nmm_Microscope.C:  removed some spurious comments
	
2001-07-09  Shayne O'Neill  <soneill@mindspring.com>

	* nmm_MicroscopeRemote.hdef:  Added a Graphmod variable to
	                              the nmm_Microscope_Remote class, so that
				      microscape.c could have access to it.
	* nmm_MicroscopeRemote.Cdef:  Initialized graphmod in the 
	                              nmm_Microscope_Remote constructor.

2001-07-06 Jameson Miller <millerj@cs.unc.edu>
	*optimize_now.c, .h : new functions added to take care of optimize_now
	mode.

2001-06-25  Shayne O'Neill  <soneill@mindspring.com>

	* AFMState.h:  Changed some Tclvars to TclNets.

2001-06-21  Aron Helser  <helser@cs.unc.edu>

	* AFMState.Ch (withdraw_tip): add member. 

2001-06-17  Tom Hudson  <hudson@cs.unc.edu>

	* AFMState.C : comment out fprintf.

	* nmm_MicroscopeTranslator.C : reorder #includes, fix brackets.

2001-06-08    <dwyer@BISMUTH-CS>

	* nmm_MicroscopeRemote.Cdef: [Ch] Added guarded scan handlers

	* nmm_Types.h: Added guarded scan identifiers.

2001-05-31  Aron Helser  <helser@cs.unc.edu>

	* AFMState.Ch: Remove inputPlaneNames (added to nmb_Dataset)

2001-05-29  Aron Helser  <helser@cs.unc.edu>

	* AFMState.C: New defaults for region size match loading of PPM
	files.

	* active_set.Ch: Revert to previous version. Addition of "z"
	parameter to PointResult message type causes all stream files to
	be mis-interpreted, and crashes Nano. 
	* nmm_Microscope.Ch: same
	* nmm_MicroscopeRemote.Cdef: same
	* nmm_MicroscopeTranslator.C: same
	* nmm_Monitor.vrpndef: same
	* nmm_SPM_Report.vrpndef: same

2001-05-15  Adam Seeger  <seeger@cs.unc.edu>

	* nmm_MicroscopeRemote.Cdef (RcvGotConnection2): added call to 
	EnableUpdatableQueue

2001-05-12  Aron Helser  <helser@cs.unc.edu>

	* AFMState.Ch (first_PID_message_pending): Change from static to
	member var so modify PID & params get initialized from image
	params on connection
	(Scan_channel_selector): added Phase as scan plane. 

	* nmm_Microscope.C (encode_ForceCurveData): Message was 2 bytes short
	caused dropped data. 

	* nmm_MicroscopeRemote.Cdef (ReportScanAngle): added tolerance of
	0.01 degrees, prevents callback loops.
	
2001-05-11  Aron Helser  <helser@cs.unc.edu>

	* Makefile: call "make generate" before "make" or "make depend"

	* .cvsignore: new. Ignore generated files. 

	* nmm_AFM_Control.vrpndef: new msg definition file
	* nmm_SPM_Control.vrpndef: new msg definition file
	* nmm_AFM_Report.vrpndef: new msg definition file
	* nmm_SPM_Report.vrpndef: new msg definition file
	* nmm_Monitor.vrpndef: new msg definition file

	* nmm_Microscope.[Ch]: Obsoleted by above msg def files, but must
	hang around until "topo" tree is converted.

	* nmm_MicroscopeRemote.[Ch]: removed, automatically generated by:

	* nmm_MicroscopeRemote.Cdef: new, includes directives for
	automatically generated code read by vrpn/util/gen_rpc perl
	script.
	(RcvScanRange): Bug fix, state.yMin was set as greater than
	state.yMax.
	* nmm_MicroscopeRemote.hdef: same
	
	* Makefile: Changes to call vrpn/util/gen_rpc appropriately. 

	* AFMState.[Ch]: Added force-curve state, so separate rcv
	functions for header and body would function correctly. 
	
2001-04-25  Tom Hudson  <hudson@cs.unc.edu>

	* nmm_MicroscopeRemote.C (RcvScanning) : add tweak to
        state.scanning.d_ignoreChange to avoid start-stop infinite loop
        problem.  This is a patch that should be corrected by systemic
        changes, since this could arise for other variables (although
        no others are quite so fragile?)

2001-04-19  Adam Seeger  <seeger@cs.unc.edu>

	* active_set.Ch - took out changes from yesterday to reduce complexity
	* nmm_Microscope.Ch - took out changes from yesterday to reduce 
	complexity

2001-04-18  Adam Seeger  <seeger@cs.unc.edu>

	* active_set.C (Handle_report) : added optional boolean argument to
	control whether or not callbacks get called for any of the BCPlane's
	that get set by this function
	* nmm_MicroscopeRemote.hC (RcvWindowLineData) : added boolean argument
	that gets passed to Scan_channel_selector::Handle_report 
	and then to BCPlane::setValue to control whether or not callbacks get
	called for the plane change
        * nmm_MicroscopeRemote.C (handle_WindowLineData) : this function
	lets plane data callbacks get called only for the last point in
	each line (in effect, this changes the meaning of a plane change to
	mean the change between before receiving window line message and
	after completely processing the window line message)

2001-03-15  Tom Hudson  <hudson@cs.unc.edu>

	* splat.c (ptSplat(BCGrid *, Point_value *) : new function for
	Chris Dweyer to generalize splatting.
	(ptSplat(int *, BCGrid *, Point_result *)) : rewrote to use new
	function;  cleaned up code.

2001-03-02  Aron Helser  <helser@cs.unc.edu>

	* nmm_AFM_Report.vrpndef: VRPN rpc message definition file. In
	preparation for automatically generating parts of nmm_Microscope*,
	and for support of util/streamPrint/nmsPrint.Cdef
	* nmm_AFM_Control.vrpndef: same
	* nmm_SPM_Report.vrpndef: same
	* nmm_SPM_Control.vrpndef: same

2001-1-29  Tom Hudson  <hudson@cs.unc.edu>

	* nmm_QueueMonitor.C (enqueue) : dispatch immediately if queueing
	isn't enabled;  we learned the hard way that we can't queue for
	any time at all and get correct behavior.

2001-1-13  Tom Hudson  <hudson@cs.unc.edu>

	* nmm_TimestampList.C (clear) : minor fix to statistics-gathering

2000-12-20  Aron Helser  <helser@cs.unc.edu>

	* all: 3rdtech merge into main trunk. 

2000-12-11  Aron Helser  <helser@cs.unc.edu>

	* nmm_QueueMonitor.C (deleteQueueHead): Cast to allow PC
	compile. Delete qm _after_ qm->data.buffer

2000-12-8  Tom Hudson  <hudson@cs.unc.edu>

	* nmm_QueueMonitor.C (enqueue) : copy buffer from VRPN
	(deleteQueueHead) : delete copy of buffer
	(deleteQueue) : same

2000-12-8  Tom Hudson  <hudson@cs.unc.edu>

	* nmm_QueueMonitor.C (deleteQueueHead) : set d_queueTail if needed

2000-12-8  Tom Hudson  <hudson@cs.unc.edu>

	* nmm_MicroscopeRemote.C (drawLine) : add call to d_monitor->mainloop
	(DrawArc) : same
	(TakeFeelStep) : same
	(TakeModStep) : same
	(TakeDirectZStep) : same

2000-12-5  Tom Hudson  <hudson@cs.unc.edu>

	* nmm_TimestampList.C : new file
	* nmm_TimestampList.h : same

2000-12-5  Tom Hudson  <hudson@cs.unc.edu>

	* nmm_Microscope_Remote.C : add members for redundancy,
	QueueMonitoring, and network statistics tracking
	(constructor) : register PointDataHandler on queue monitor
	instead of connection
	(destructor) : delete new members
	(mainloop) : call mainloop() on new members

	(ScanTo) : call nmm_TimestampList::markSend()
	(handle_PointResultData) : call nmm_TimestampList::add()

2000-12-05  Kwan Torrich Skinner  <skinner@cs.unc.edu>
	* AFMState.h (AFMModifyState::AFMModifyState) : new initializer for
	optimize now.
	* nmm_Types.h (Tool) : new enum member.

2000-11-20  Tom Hudson  <hudson@cs.unc.edu>

	* nmm_Microscope_Remote.C (RcvResultData) : add curly braces,
	add safety check of z_value

2000-11-5  Tom Hudson  <hudson@cs.unc.edu>

	* stm_file.c : remove #include of mf.h
	* nmm_RelaxComp.C : same, remove call of #defines (DEBUG)

2000-11-1  Tom Hudson  <hudson@cs.unc.edu>

	* nmm_Globals.h : removed USE_VRPN_MICROSCOPE define
        * active_set.h : removed reference to USE_VRPN_MICROSCOPE
	* nmm_MicroscopeRemote.C : removed include of stm_file.h,
        added include of stm_cmd.h
	(Init) : removed argument
        * nmm_MicroscopeTranslator.h : removed include of stm_file.h
	* Microscope.C : removed file
	* Microscope.h : removed file
	* MicroscopeIO.C : removed file
	* MicroscopeIO.h : removed file
	* MicroscopeRcv.C : removed file
	* NetworkedMicroscopeChannel.C : removed file
	* NetworkedMicroscopeChannel.C : removed file

2000-10-24  Adam Seeger  <seeger@cs.unc.edu>

	* nmm_MicroscopeRemote.C : changes having to do with degree/radian
	confusion - these fixes come from the thirdtech_branch

2000-10-24  Adam Seeger  <seeger@cs.unc.edu>

	* nmm_MicroscopeRemote.C (rotateScanCoords) : made this convert
	the argument from degrees to radians before using sinf and cosf on it

2000-10-12  Adam Seeger  <seeger@cs.unc.edu>

	* nmm_MicroscopeRemote.C (handle_WindowLineData) : put in error
	message and automatic quit if the positions of the data
	don't fit in the grid size (this should only be due to 
	programmer error but its nice to catch it because there
	aren't any other checks for this before writing data into the grid)

2000-10-05  Tom Hudson  <hudson@cs.unc.edu>

	* nmm_Microscope.C (encode_EndFeelTo) : add parameters
        for entire (current) definition of nmm_Sample
	(decode_EndFeelTo) : same
	* AFMState.h : add data member receivedAlgorithm to AFMDataset
	* nmm_MicroscopeRemote.C (Shutdown) : remove function
        (RcvStdDevParameters) : same
        (handle_StdDevParameters) : same
	(SetSamples) : same
	(destructor) : remove dead code
	(Initialize) : same
        (RcvInSpectroscopyMode) : same
	(handle_EndFeelTo) : use new parameters & copy into
        AFMDataset::receivedAlgorithm
	(SampleMode) : new function

2000-10-03  Tom Hudson  <hudson@cs.unc.edu>

	* AFMState.h : chang Point_lists members of AFMDataset from
        pointers to instances
	* AFMState.C : pass receivedPointList to point_channels constructor
        * nmm_MicroscopeRemote.C (swapPointLists) : change pointers to
        instances from AFMDataset

2000-10-03  Tom Hudson  <hudson@cs.unc.edu>

	* nmm_Microscope.C (encode_FeelTo) : add parameters
        (decode_FeelTo) : same

	* nmm_Sample.C : get rid of obsolete class
	* nmm_Sample.h : replac obsolete class with simple struct
	* nmm_MicroscopeRemote.C (TakeSampleSet) : use new definition
        of nmm_Sample and extra parameters for FeelTo
        (RcvEndFeelTo) : fix function call - was decode_FeelTo,
        should be decode_EndFeelTo

2000-09-28  Tom Hudson  <hudson@cs.unc.edu>

	* active_set.C (Channel_selector constructor) :  Uncomment
        reference to change_from_microscope.
        (Channel_selector::Clear_channels) :  same
        (Scan_channel_selector constructor) :  same
        (Scan_channel_selector::Update_microscope) :  same
        (Point_channel_selector::Update_microscope) :  same
        (ForceCurve_channel_selector::Update_microscope) :  same
        (Channel_selector::Clear_channels) :  same
	* nmm_MicroscopeRemote.C (RcvReportScanAngle) :  Add
        idempotency check.
        (RcvScanning) :  same


2000-09-26  Tom Hudson  <hudson@cs.unc.edu>

	* nmm_MicroscopeRemote.C (handle_EndFeelTo) : Add fprintf()

2000-09-22  Adam Seeger  <seeger@cs.unc.edu>

        * nmm_MicroscopeTranslator.C (translate_packet) : 
        disables translation of SPM_SERVER_PACKET_TIMESTAMP but still uses
	this to update the stream time

2000-09-21  Adam Seeger  <seeger@cs.unc.edu>

	* nmm_MicroscopeTranslator.hC: new files
	I moved a bunch of code from streamToVrpn.C into here so that it will
	be easier to maintain. This also fixes the bug with the time except
	at the very end of the stream file where system messages screw
	things up again (time goes back to the elapsed time that it took to
	do the translation at the very end of the stream file)

2000-09-21  Tom Hudson  <hudson@cs.unc.edu>

        * splat.c (mkSplat) : changed return value

2000-09-20  Tom Hudson  <hudson@cs.unc.edu>

        * nmm_Microscope.h:  added data members d_FeelTo_type,
        d_BeginFeelTo_type, d_EndFeelTo_type.
        * nmm_Microscope.C (constructor) :  set value of new data members.
        (encode_FeelTo) :  new function.
        (decode_FeelTo) :  same.
        (encode_BeginFeelTo) :  same.
        (decode_BeginFeelTo) :  same.
        (encode_EndFeelTo) :  same.
        (decode_EndFeelTo) :  same.
        * nmm_Microscope_Remote.h :  added data member d_feeltoHandlers,
        new nested type feeltoHandlerEntry.
        * nmm_Microscope_Remote.C (constructor) :  register handle_BeginFeelTo,
        handle_EndFeelTo.
        (handle_BeginFeelTo) :  new function.
        (handle_EndFeelTo) :  same.
        (registerFeeltoHandler) :  same.
        (unregisterFeeltoHandler) :  same.
        (swapPointList) :  same.
        (doFeeltoCallbacks) :  same.
        (TakeSampleSet) :  tore out dependence on
        nmm_Sample/SetSampleAlgorithm();  the proper place for that function
        is in the topo software, much as we hate to put it there.  It now sends
        a FeelTo message.
        * nmm_Types.h : new "tool" FEELAHEAD 
        * splat.c (mkSplat) : added check for error

2000-09-14  Adam Seeger  <seeger@cs.unc.edu>

	* nmm_MicroscopeRemote.C : took out extern reference to 
	vrpn_Ohmmeter_Remote since this prevented me from compiling the
	ohmmeter client. This stuff really needs to be cleaned up but there
	is no time at the moment

2000-09-08  Adam Seeger  <seeger@cs.unc.edu>

	* nmm_MicroscopeRemote.C (~nmm_MicroscopeRemote) : unregisters
	all vrpn_Connection handlers now (should eventually be replaced by
	making this class inherit from vrpn_BaseClass)

2000-09-07  Adam Seeger  <seeger@cs.unc.edu>

        * nmm_MicroscopeRemote.C (DisplayModResult) : Changed how this sets
        top and bottom. unscaled value is passed instead of scaled value so
        that if user changes scale later the new scale can be applied to the
        markers by setting the scale in nmb_Decoration
        * nmm_MicroscopeRemote.C (RcvResultData) : Added a check of the
        variable state.modify.slow_line_committed before accessing 
        state.modify.slow_line_prevPt/slow_line_currPt because unless its
        true these may be uninitialized (caused a crash on PC when using
        slow line 3D)
        * nmm_MicroscopeRemote.C (handle_barrierSynch) : made it so this
        function doesn't do anything if we're reading from a file since it
        only does stuff that affects a live microscope (was printing out an
        error message because we weren't in slow line 3D mode)
        * AFMState.C (constructor) : added some missing initialization for
        slow line variables

2000-09-05  Adam Seeger  <seeger@cs.unc.edu>
	
	* nmm_RelaxComp.[hC] (updateMicroscope) : added this new function
	so we can send the relax setting message without having access to
	private functions in nmm_Microscope_Remote 
	(needed in microscopeHandlers.C)

2000-09-04  Adam Seeger  <seeger@cs.unc.edu>

	* nmm_RelaxComp.C (enable, disable) : These no longer send messages
	to the microscope but do set the state of nmm_RelaxComp
	* nmm_RelaxComp.C (set_ignore_time_ms, set_separation_time_ms) :
	These no longer check to see if relaxation comp. is enabled before
	letting you set the values (they set the values no matter what now)
	* nmm_MicroscopeRemote.C (handle_GotMicroscopeControl) : 
	changed this so in deciding whether or not
  	to enable relaxation compensation, it looks at state.doRelaxComp instead
  	d_relax_comp.is_enabled()
	* nmm_MicroscopeRemote.C (RcvRelaxSet) :
	This now checks to see if setting was (0,0) to decide if relaxation
	has been turned on or off (this was the assumption before but 
	relaxation set messages were not being used for confirmation)

2000-08-31  Kwan Torrich Skinner  <skinner@cs.unc.edu>

        * all : merged merge-2000-summer-thirdtech code with trunk.

2000-08-30  Adam Seeger  <seeger@cs.unc.edu>

        * nmm_MicroscopeRemote.C (RcvWindowLineData) : replaced cast of 
        d_dataset->heightPlaneName to char * with 
        d_dataset->heightPlaneName->string()

2000-08-16  Tom Hudson  <hudson@cs.unc.edu>

        * nmm_Microscope.h:  added data member d_EnableUpdatableQueue_type.
        (encode_EnableUpdatableQueue) :  new function.
        (decode_EnableUpdatableQueue) :  same.
        * nmm_Microscope.C (constructor) :  set value of
        d_EnableUpdatableQueue_type.
        (encode_EnableUpdatableQueue) :  new function.
        (decode_EnableUpdatableQueue) :  same.
        * nmm_MicroscopeRemote.h (EnableUpdatableQueue) :  new function.
        * nmm_MicroscopeRemote.C :  deleted some obsolete functions that had
        long been commented-out.
        (EnableUpdatableQueue) :  new function.

2000-08-13  Jeffrey Juliano  <juliano@cs.unc.edu>

	* active_set.C: Pull Kwan's merged source to the trunk.  He had
	committed to a branch because of a sticky tag.
	* active_set.h: Same.

2000-08-11  Kwan Torrich Skinner  <skinner@cs.unc.edu>

	* all: Merge thirdtech_branch code to trunk.

