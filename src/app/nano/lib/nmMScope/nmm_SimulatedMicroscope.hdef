/* The nanoManipulator and its source code have been released under the
 * Boost software license when nanoManipulator, Inc. ceased operations on
 * January 1, 2014.  At this point, the message below from 3rdTech (who
 * sublicensed from nanoManipulator, Inc.) was superceded.
 * Since that time, the code can be used according to the following
 * license.  Support for this system is now through the NIH/NIBIB
 * National Research Resource at cismm.org.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

OUTPUT_FILENAME nmm_SimulatedMicroscope.h

//
#ifndef NMM_SIMULATEDMICROSCOPE_H
#define NMM_SIMULATEDMICROSCOPE_H
//
#include "nmm_AFMSIM_Report.h"
#include "nmm_AFMSIMSERVER_Report.h"
#include <nmb_SharedDevice.h>
//
class Node{//used to make a linked list of triangles so that triangles can be processed slower
           //by the simulator than they are received without losing information

public:
	Node(){next = NULL;};
	Node * next;
	float v1_1;//vertice 1 x,y, and z
	float v1_2;
	float v1_3;
	float v2_1;//vertice 2 x,y, and z
	float v2_2;
	float v2_3;
	float v3_1;//vertice 3 x,y, and z
	float v3_2;
	float v3_3;
};

class CylNode{//used to make a linked list of cylinders so that cylinders can be processed slower
              //by the simulator than they are received without losing information

public:
	CylNode(){next = NULL;};
	CylNode * next;
	float x,y,z,altitude,azimuth,length,radius;
};

class nmb_SharedDevice_Server;
//
USE_MSG_GROUP nmm_AFMSIM_Report
USE_MSG_GROUP nmm_AFMSIMSERVER_Report

CLASSNAME nmm_SimulatedMicroscope
//
class nmm_SimulatedMicroscope : public nmb_SharedDevice_Server, 
	public nmm_AFMSIM_Report, public nmm_AFMSIMSERVER_Report {

public:
	nmm_SimulatedMicroscope(char *name, vrpn_Connection *connection, int xResolution, int yResolution=0);
	virtual ~nmm_SimulatedMicroscope();
	void encode_and_sendData(double ** Data, const int num_cols);
							//encode a line from data array and pack to send (calls Send function)
	void encode_and_sendDeviceName();
	void change_machineName(char * newName);
	double return_Simpixels_to_realworld_ratio_x();	
	double return_Simpixels_to_realworld_ratio_y();
	float get_xrange();	//returns the x range (real world extent)
	float get_yrange();	//returns the y range (real world extent)
	float get_zrange(); //returns the z range (real world extent)
	float get_xsize();	//returns the x dimension of the grid in nano
	float get_ysize();	//returns the y dimension of the grid in nano
	float get_zoffset();//returns d_zmin, the z offset
	bool FillDataArray(double*** ArrayToFill,int &xResolution,int &yResolution,float zscale);
						//fills ArrayToFill with data from DataArray, returns xResolution and yResolution
						//by reference
	float Sim_to_World_x;
	float Sim_to_World_y;
	bool grid_size_rcv;		//true when this mesage is received, so windows in simulator can be resized
	bool triangleRcv;		//true when there are triangles to process
	bool cylRcv;			//true when cylinders to process
	bool scaleRcv;
	bool transRcv;
	bool rotRcv;
	bool scanRcv;
	Node * head;			//head of list of triangles
	Node * holder;			//temp Node to hold head of list before deletion without simulator needing 
							//knowledge of Node class
	CylNode * cylHead;		//head of list of cylinders
	CylNode * cylHolder;	//temp CylNode
	double get_x_offset(){return d_xmin;};
	double get_y_offset(){return d_ymin;};
    float _scale;
	float trans_x,trans_y,trans_z;
	float rot_x,rot_y,rot_z;
	vrpn_Connection * d_connection;
	int last_filled_y;		//last row of data filled in from data received from nano
	timeval lastfilltime;	//time last scan line received

private:
	RECEIVERS_DECL nmm_AFMSIMSERVER_Report ;
	HANDLERS_DECL nmm_AFMSIMSERVER_Report ;

	int Send( long len, vrpn_int32 msg_type, char * buf );
							//send data across connection
	char *d_name;
	long simulator_id;		//ID of sender
	int d_xscanResolution;	//rowlength, number of columns
	int d_yscanResolution;  //columnheight, number of rows
	double Remote_toSim_x;	//ratio of x resolution from nano to simulator
	double Remote_toSim_y;	//ratio of y resolution from nano to simulator
	float d_xmin;			//all of these show microscope-space extent
	float d_xmax;
	float d_ymin;
	float d_ymax;
	float d_zmin;
	float d_zmax;
	int xsize, ysize;
	int last_rcv_y;			//gives the rownumber for the last line of data received from nano
	double ** DataArray;	//data array for scan data received from nano	

};
//
#endif //NMM_SIMULATEDMICROSCOPE_H





