OUTPUT_FILENAME nmm_SimulatedMicroscope.C
//
#include "nmm_SimulatedMicroscope.h"
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
//#include <unistd.h>
#include <sys/types.h>
#include <vrpn_Connection.h>
//
#if !defined(_WIN32) || defined(__CYGWIN__)
#include <sys/time.h>
#else
#include <vrpn_Shared.h>  // get timeval some other way
#endif
//
//
USE_MSG_GROUP nmm_AFMSIM_Report
//
CLASSNAME nmm_SimulatedMicroscope
//
//
//name is the name of this device
nmm_SimulatedMicroscope::
nmm_SimulatedMicroscope(char *name, vrpn_Connection *c) : nmb_SharedDevice_Server(name,c), 
						nmm_AFMSIM_Report(c), d_connection(c) {
	d_name = new char[100];
	strcpy(d_name,name);  
	simulator_id = d_connection->register_sender("AFMSimulator");

}
//
nmm_SimulatedMicroscope::
~nmm_SimulatedMicroscope(){
//
}
//
void nmm_SimulatedMicroscope::
change_machineName(char * newName){
	delete d_name;
	d_name = new char[100];
	strcpy(d_name,newName);
}
//
void nmm_SimulatedMicroscope::
encode_and_sendData(double ** Data, const int num_cols){
 int num_rows = num_cols;
 for(vrpn_int32 y = 0; y < num_rows; y++){
 //process each line separately
//
  vrpn_float32 ** line = new vrpn_float32*[num_cols];
//
  for(int i = 0; i < num_cols; ++i){
   line[i] = new vrpn_float32[1];
   line[i][0] = (vrpn_float32)(Data[y][i]);
  }
//
  //variables for encoding in msgbuf
  timeval time;
  gettimeofday(&time,NULL);
  int len;
  vrpn_int32 x,dx,dy,reports,fields;
  x = 0;
  dx = 1;//step across a row
  dy = 0;//but don't move in y
  reports = num_cols;
  fields = 1;//only height
//
  //encode msgbuf
  char * msgbuf = encode_WindowLineData(&len, x, y, dx, dy, reports, 
	  fields, time.tv_sec, time.tv_usec, line);
//  
  //send stuff
  int retval = -1;
  char * temp = new char[len];
  strcpy(temp,msgbuf);
  retval = Send((long)len, d_WindowLineData_type, msgbuf);
//
  //clean up before next iteration
  for(i = 0; i < num_cols; ++i){
   delete line[i];
  }
  delete line;
 }
}
//
int nmm_SimulatedMicroscope::
Send(long len, vrpn_int32 msg_type, char * buf){
	int retval = -1;//initial value denotes failure, do not continue if remains -1
	timeval now;	
	gettimeofday(&now, NULL);
	//pack message
	retval = d_connection->pack_message(len, now, msg_type, simulator_id,
				      buf, vrpn_CONNECTION_RELIABLE);
	if(retval != -1){
		d_connection->mainloop();//send message here
	}
	else{
		cout << "Message not sent" << endl;
	}
	//
	if ( buf ) {
		delete buf;
	}
	return retval;
}





