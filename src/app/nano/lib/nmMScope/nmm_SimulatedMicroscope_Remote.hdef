OUTPUT_FILENAME nmm_SimulatedMicroscope_Remote.h
//
#ifndef NMM_SIMULATEDMICROSCOPE_REMOTE_H
#define NMM_SIMULATEDMICROSCOPE_REMOTE_H

//
#include "nmm_AFMSIM_Report.h"
#include "nmm_AFMSIMSERVER_Report.h"
#include <nmb_SharedDevice.h>
#include <nmb_Dataset.h>
#include "nma_ShapeAnalyze.h"
#include "vrpn_Connection.h"

//
class nmb_SharedDevice_Remote;
class nmb_Dataset;


//
USE_MSG_GROUP nmm_AFMSIM_Report
USE_MSG_GROUP nmm_AFMSIMSERVER_Report

CLASSNAME nmm_SimulatedMicroscope_Remote
//


class nmm_SimulatedMicroscope_Remote: public nmm_AFMSIM_Report, nmm_AFMSIMSERVER_Report, public nmb_SharedDevice_Remote {

public:
	nmm_SimulatedMicroscope_Remote(const char * name, vrpn_Connection * connection, 
		const char * planename, nmb_Dataset * dataset);
	virtual ~nmm_SimulatedMicroscope_Remote();
	int mainloop();
	void encode_and_sendGridandScanInfo(vrpn_int32 x, vrpn_int32 y,
		vrpn_float32 xmin,vrpn_float32 ymin,vrpn_float32 zmin,
		vrpn_float32 xmax,vrpn_float32 ymax,vrpn_float32 zmax);
	int Send(long len, vrpn_int32 msg_type, char * buf);
//
private:

    RECEIVERS_DECL nmm_AFMSIM_Report;
	RECEIVERS_DECL nmm_AFMSIMSERVER_Report;
    HANDLERS_DECL nmm_AFMSIM_Report;
	HANDLERS_DECL nmm_AFMSIMSERVER_Report;

	nmb_Dataset * d_dataset;	//dataset that real di data is in
	BCString RealAFMPlaneName;	//name of plane with real di data
	BCPlane * RealAFMPlane;		//plane with real di data
	int Xdim;			        //number of elements in the x dimention in the current
					            //grid, and therefore of RealAFMPlane
	int Ydim;			        //same for y
	double ** DataArray;		    //data array passed to nma_ShapeIdentified class	
	int DATA_ARRAY_SIZE;		//size of DataArray when it finally gets filled
	nma_ShapeIdentifiedPlane * SimScanPlane;//new plane formed/filled in when
						        //full array of data has been sent
	bool UnitsOK;			    //so only load information if units check out,
					            //match real afm scan plane
	vrpn_Connection * d_connection;
	long simulator_id;
	

};
//

#endif // NMM_SIMULATEDMICROSCOPE_REMOTE_H





