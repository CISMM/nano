/* The nanoManipulator and its source code have been released under the
 * Boost software license when nanoManipulator, Inc. ceased operations on
 * January 1, 2014.  At this point, the message below from 3rdTech (who
 * sublicensed from nanoManipulator, Inc.) was superceded.
 * Since that time, the code can be used according to the following
 * license.  Support for this system is now through the NIH/NIBIB
 * National Research Resource at cismm.org.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef	STM_FILE_H
#define STM_FILE_H

/*
  As of October 2000, this file is ONLY used by the translator
  (nmm_MicroscopeTranslator.h).
*/

/*******
 * Datastream information.
 *******/

#define STM_STREAM_BUFSIZE      (20000000)
#define STM_NEAR_FULL_PERCENT   (90)
#define STM_STREAM_NEAR_FULL    ((STM_STREAM_BUFSIZE*STM_NEAR_FULL_PERCENT)/100)

struct stm_stream {
  char    filename[255];          /* Name of file */
  int     descriptor;             /* File descriptor */
  char    *buffer;                /* Holds the data */
  char    *cur;                   /* Where in the buffer */
  int     in_len;                 /* Length for read streams */
				  /*   -1 for write streams */
  int     fullcheck;              /* Used to monitor fullness */
  int     multibuf;               /* Written multiple buffers? */

  int	dup_state;		/* What state is duplication? */
  int	listen_descriptor;	/* TCP link to listen() on*/
  int	dup_descriptor;		/* TCP link to duplicate to */
} ;

extern stm_stream * stm_open_datastream_for_write (const char *);
extern stm_stream * stm_open_datastream_for_read (const char *);

extern int stm_write_block_to_stream (stm_stream *, char *, int);
extern int stm_read_block_from_stream (stm_stream *, char *);

extern int stm_close_stream (stm_stream * s);
extern int stm_abort_stream (stm_stream * s);

extern int stm_allow_tcp_duplication_on (stm_stream * s,
		unsigned short port_number);

extern int stm_restart_stream(stm_stream *s);

#endif
