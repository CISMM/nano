2002-06-30  Adam Seeger  <seeger@cs.unc.edu>

        * nmr_RegistrationUI.[Ch]: made separate variables for flipping
	registration image windows in x and y 
	(the 2 images shared this property before), converted the flip in X 
	for the projection image to a Tclvar_int and hooked this up to the 
	tcl window
	* nmr_Registration_Impl.C (adjustTransformFromRotatedCorrespondence):
	set center of rotation to match center for final transform to fix
	the bug in alignment for rotated projection directions (one-line fix!)

2002-06-14  Aron Helser  <helser@cs.unc.edu>

	* nmr_RegistrationUI.C: remove printouts.
	* nmr_Registration_Impl.C: same.

2002-06-06  David Borland <borland@cs.unc.edu>

        * Makefile : added nmUGraphics 

2002-06-06  David Borland <borland@cs.un.edu>

        * nmReg.dsp : last commit didn't seem to work correctly.  Hopefully
	this will add nmUberGraphics to the include path.

2002-06-06  David Borland <borland@cs.unc.edu>

        * nmReg.dsp : added nmUberGraphics to the include path

2002-06-06  David Borland <borland@cs.unc.edu>

        * nmr_RegistrationUI.C : code to automatically create a 
	ProjTextObj when switching to MODEL_REGISTRATION_COORD mode

2002-06-05  David Borland <borland@cs.unc.edu>

        * nmr_RegistrationUI.C : fixed a little kink in the user interface
        for switching between surface and model projective texture modes

2002-06-03  David Borland <borland@cs.unc.edu>

        * nmr_RegistrationUI.C : code for phantom control of the projective
	texture.

	* nmr_RegistrationUI.h : same

2002-05-30  David Borland <borland@cs.unc.edu>

        * nmr_RegistrationUI.C : code for the user interface for the new
	SURFACE_REGISTRATION_COORD and MODEL_REGISTRATION_COORD graphics
	modes.

	* nmr_RegistrationUI.h : same

2002-05-10  David Marshburn & Adam Seeger  <marshbur@cs.unc.edu>

	* nmr_RegistrationUI.C (handleRegistrationChange):  update the 
	texture transform even if the registration texture isn't currently 
	displayed (so that the SEM texture will be updated).

2002-03-21  Aron Helser  <helser@cs.unc.edu>

	* nmr_ObjectiveMI_EMMA.C (setTestValueImage): Handle replacement
	BCString -> string
	* nmr_ObjectiveMI_direct.C: same
	* nmr_RegistrationUI.C: same
	* nmr_Util.C: same
	* nmReg.dsp: Release config now builds.

2002-03-19  David Marshburn  <marshbur@evans.cs.unc.edu>

	* nmr_ObjectiveMI_EMMA.C (buildSampleHelper):  added an explicit 
	cast to disambiguate instances of sqrt.

2002-01-31  David Marshburn  <marshbur@cs.unc.edu>

	* nmReg.dsp:  builds with non-static run-time libraries.

2002-01-23  Aron Helser  <helser@cs.unc.edu>

	* nmr_RegistrationUI.C (handle_registrationImage2D_change): Don't
	execute if reg window is not open. 
	(handle_registrationImage3D_change): same
	(handle_registrationEnabled_change): Call above handlers when
	window opened. Combined changes make loading static files faster,
	slows down opening reg window. Good UI tradeoff. 

2002-01-21  Adam Seeger  <seeger@cs.unc.edu>

	* nmr_Util.C (addImage): made this not add the intensities if
	one of them is zero and just take the one that is non-zero instead
	in that case

2001-12-20    <marshbur@cs.unc.edu>

	* nmReg.dsp:  removed references to ImgFormat

2001-12-20  David Marshburn  <marshbur@evans.cs.unc.edu>

	* Makefile:  remove ImgFormat from USES_LIBS

2001-12-19  David Marshburn  <marshbur@evans.cs.unc.edu>

	* correspondenceEditor.h: removed referenced to unused
	#include <PNMImage.h>
	
2001-12-18  Adam Seeger  <seeger@cs.unc.edu>

	* nmr_Util.C (createResample*): fixed these functions so they don't
	incorrectly print warning messages about getting unexpected values
	from the interpolation code
	also, added printout of '.' to indicate progress
	(addImage): made this much more efficient by using transformation
	code instead of pixelToWorld, worldToPixel functions

2001-12-18  Adam Seeger  <seeger@cs.unc.edu>

	* nmr_RegistrationUI.C (handle_registrationImage2D_change): instead
	of updating the image all the time, does so only if the texture is
	enabled
        (handle_registrationImage2D_change): added some setup of the colormap
	to do what used to be done in handle_registrationImage2D_change
	(createResampleImage): lots of important bug fixes in this function
	and its subroutines, the main theme
	of these changes is removing dependence on the worldToImage
	transformations in individual images - the registration code stores
	its own transformation between images that is independent of 
	world coordinates so there doesn't need to be any reference to
	world coordinates
        (createResamplePlane): "
	* nmr_Util.C (computeResampleTransformInWorldCoordinates): commented 
	out because it's use was leading to lots of problems due to 
	confusion about whether or not world coordinates
	meant the same thing to different images
        (computeResampleExtents): changed semantics of the xform parameter
	- now it means a transformation from normalized image coordinates of
        src to normalized image coordinates of target
	also fixed a nasty bug in use of the invTransform function -
	it didn't handle the input and output parameters being the same pointer
	(createResampledImageWithImageSpaceTransformation): created a new
	version of this that takes an extra sourceImage parameter; the old
	version assumes that the resampleImage has the same coordinates as
	the sourceImage so there was no need for this parameter
	but this one does not make this assumption


2001-12-07    <marshbur@TUNGSTEN-CS>

	* nmReg.dsp:  adds new files and removes old files.

2001-12-06  Adam Seeger  <seeger@cs.unc.edu>

	* This version has auto-alignment working pretty well on my test
	images
	* nmr_AlignerMI.hC (patternSearch): added a parameter to set the
	minimum step size and made this function return the number of
	iterations performed
	(multiResPatternSearch): new function that implements a strategy for
	searching for the optimal transformation at different image resolutions
	using the patternSearch() function as a subroutine
	* nmr_MultiResObjectiveMI_direct.hC (getLevelByScaleOrder): new
	function that lets you lookup what the scales are in order from 
	largest to smallest
	* nmr_RegistrationUI.C : changed default step size in UI from 0.1 to 1.0
	* nmr_Registration_Impl.C (registerImagesUsingMutualInformation):
	changed this to use multiResPatternSearch() instead of patternSearch()

2001-12-05  Adam Seeger  <seeger@cs.unc.edu>

	* nmr_AlignerMI.Ch : made this use nmr_MultiResObjectiveMI_direct
	instead of nmr_MultiResObjectiveMI_EMMA; removed a bit of 
	unnecessary code in the process - mostly stuff to use
	gradients in patternSearch() (that code was ugly anyway)
	* nmr_RegistrationUI.C : added some convenience features - when
	a transformation of a particular type is received, the interface	
	automatically switches to display the texture using that transform.
	and it automatically switches to initialize the auto-alignment from
	that transform.
	* nmr_Registration_Impl.C : removed or commented out calls to 
	the mutual information alignment that isn't supported/required in
	order to use nmr_MultiResObjectiveMI_direct
	* nmr_ObjectiveMI.Ch : moved to 
	* nmr_ObjectiveMI_EMMA.Ch: new file
	* nmr_MultiResObjectiveMI.Ch: moved to
	* nmr_MultiResObjectiveMI_EMMA.Ch: new file
	* nmr_ObjectiveMI_direct.Ch: new file implementing mutual information
	calculations that aren't random (unlike EMMA version)
	* nmr_MultiResObjectiveMI_direct.Ch: multi-resolution version of
	nmr_ObjectiveMI_direct.Ch
	* nmr_Histogram.Ch : histogram utility used by nmr_ObjectiveMI_direct
	to calculate distribution statistics
	
2001-11-29  Adam Seeger  <seeger@cs.unc.edu>
	
	* nmr_RegistrationUI.hC : replaced nmb_Dataset with nmb_ImageManager
        switched a bunch of TclNet_vars into ordinary Tcl_vars in order to
	fix a problem with callbacks not getting called when changes were
	made in tcl

2001-11-27  Adam Seeger  <seeger@cs.unc.edu>

	* nmr_RegistrationUI.C (constructor): took out parameter in call to
	nmui_ColorMap constructor

2001-11-26  Adam Seeger  <seeger@cs.unc.edu>

	* nmr_AlignerMI.C (takeGradientSteps): added some debugging printouts
	(patternSearch): new function implementing pattern search optimization
	(setRefFeaturePoints): new function to set special places in the
	image to take samples from
	* nmr_MultiResObjectiveMI.C : made default number of samples a constant
	(setSampleMode): removed this function and replaced it with:
	(setSamplePositionMode): selects how to pick sample locations
	(setSampleRejectionCriterion): selects an additional option for picking
	samples (e.g. based on gradient)
	* nmr_RegistrationUI.C : added a whole bunch of controls to help with
	testing
 	(handleRegistrationChange): made this a lot simpler
	(updateTextureTransform): new function that contains stuff from
	handleRegistrationChange
	* nmr_Registration_Client.Ch: added new messages for testing alignment
	* nmr_Registration_Interface.Ch: "
	* nmr_Registration_Proxy.Ch: "
	* nmr_Registration_Server.Ch: "
	* nmr_Registration_Impl.Ch: " +
	(setSourceImageDimensions): new function to make sure that when
	the image dimensions are set, the pivot points (center of rotation and
	shear) for transformations are also updated appropriately
	* nmr_Util.hC : there was some confusion about the coordinate systems
	for resampling that caused some bugs so I've attempted to clear it up
	by adding the following two functions to use in other files
	 (computeResampleTransformInWorldCoordinates)
	 (computeResampleTransformInImageCoordinates)
	(maximumOffset2D): new function that calculates maximum offset for 
	a transformation within some rectangular region
	(approxMeanOffset2D): new function that calculates approximate 
	mean offset for a transformation

2001-10-23  Adam Seeger  <seeger@cs.unc.edu>

	* all - added separate command for making the automatic alignment
	code go and for setting associated parameters including 
	what resolution to use, how many steps to take and the step size
	* nmr_Util.hC : added some code to blur an image
	* nmr_AlignerMI.hC : moved most of this code into nmr_ObjectiveMI.hC,
        This class consists mostly of new code now that combines an 
        optimization strategy with the objective function defined in 
        nmr_MultiResObjectiveMI.hC
	* nmr_CoarseToFineSearch.hC : moved most of this code into 
        nmr_MultiResObjectiveMI.hC, removed this file
        * nmr_ObjectiveMI.hC : new files (see above comment)
	* nmr_MultiResObjectiveMI.hC : new files (see above comment)

2001-08-21  Aron Helser  <helser@cs.unc.edu>

	* nmr_RegistrationUI.Ch (handle_registrationImage3D_change): Add
	idempotency check really speeds up loading static files. 
	(handle_registrationImage2D_change): same

2001-08-20  Adam Seeger  <seeger@cs.unc.edu>

	* README.txt: added a nice ASCII diagram to document how the different
	registration objects fit together
	* correspondenceEditor.hC (CorrespondenceWindowParameters): new 
	class to contain parameters for each window which now include
	a description of the axis-aligned rectangular image region displayed
	in the window
	(eventHandler): replaced a bunch of ImageViewer coordinate 
	transformation functions with some more general ones (needed for
	the zooming feature); added zooming feature
	Modified drag-to-delete interface so you can drag a point a little bit
	outside the window without it getting deleted and instead it gets
	clamped to the edge of the window - I like to use this for debugging
	because it lets me set up points that lie on a horizontal or vertical
	line and that lets me test certain special cases
	(scaleImageRegion): new function
	(clampImageRegion): new function
	(displayHandler): now draws the image with the scale/translation
	set by the user
	(setImageOrientation): now different applications can use this function
	to set whether or not they want the image to appear flipped in x or y
	* nmr_RegistrationUI.C : added specification of how image is to be
	flipped when it is set (not flipped in either x or y relative to
	the ImageViewer default which actually includes a flip in y but that
	is pretty standard)
	* nmr_Registration_Client.C: added stuff for flipping x and y
	(sendFiducial): made this set two points (one per image) instead of one
	since that didn't really make sense - this code isn't used yet
	* nmr_Registration_Impl.C: added stuff for handling flipping of x and y
	and change in fiducial message
	* nmr_Registration_ImplUI.C: "
	* nmr_Registration_Interface.C: "
	* nmr_Registration_Proxy.C: "
	* nmr_Registration_Server.C: "
	* Makefile: added dependency on nmMP through nmb_Device

2001-08-01  Aron Helser  <helser@cs.unc.edu>

	* correspondenceEditor.C (eventHandler): Handle DEL keypress,
	delete correspondence point. 

2001-07-27  Adam Seeger  <seeger@cs.unc.edu>

	* correspondenceEditor.C (CorrespondenceEditor): changed 
	default position for image windows

2001-07-26  Aron Helser  <helser@cs.unc.edu>

	* correspondenceEditor.Ch (eventHandler): Points added by
	left-click, setup for drag. Points deleted by drag outside window.
	(setColorMap): new
	(setColorMinMax): new
	
	* correspondence.C: doxygen comments

	* nmr_RegistrationUI.Ch: ColorMaps are new.
	(handle_registrationColorMap3D_change): new
	(handle_registrationColorMap2D_change): new
	(handle_registrationMinMax3D_change): new
	(handle_registrationMinMax2D_change): new

	* nmr_Registration_Impl.Ch (setColorMap): new
	(setColorMinMax): new
	* nmr_Registration_ImplUI.Ch (setColorMap): new
	(setColorMinMax): new
	* nmr_Registration_Proxy.Ch (setColorMap): new
	(setColorMinMax): new
	
2001-07-24  Adam Seeger  <seeger@cs.unc.edu>

	* correspondenceEditor.Ch (CorrespondenceWindowParameters): new class
	to group together window parameters
	(displayHandler): changed to call the newer version of drawImage()
	(setImage): took out stuff to set imageViewer's buffer and added
	code to set the window shape to a reasonable default
	(setImageFromPlane), (setImageFromPNM): commented-out these functions
	because they aren't used

2001-07-22  Adam Seeger  <seeger@cs.unc.edu>

	* correspondenceEditor.C (displayHandler): flipped X
	I think there might be a pixel-sized error between the 
	drawn position and the point actually stored but its approximately
	right at least

2001-07-17  Adam Seeger  <seeger@cs.unc.edu>

	* correspondence.hC (scalePoints): added this function to let you
	transform from image units (x,y go from 0..1) to some real units
	like nanometers
	* nmr_RegistrationUI.C (handleRegistrationChange): added
	scaling compensation for what happens in the registration server to
	get the transformation back to image units so that it can be composed
	with the worldToImage transformation we get from the topography image 
	nmr_Registration_Impl.C (setRegistrationEnable): changed this to
	use the scaling values in nmb_Image::d_acquisitionDimension
	(setImageParameters): "
	(registerImagesFromPointCorrespondence): "
	(ensureThreePoints): "
	* nmr_Registration_Proxy.C (setImage): "

2001-07-12  Adam Seeger  <seeger@cs.unc.edu>

	* correspondence.hC (equals): new function to check equivalence
	* correspondenceEditor.C (getCorrespondence): changed to use =
	operator instead of some equivalent code
	* nmr_AlignerMI.hC (buildSampleHelper): factored out stuff from
	buildSampleA and buildSampleB as well as many other changes too
	numerous to mention. The important thing is that I think the
	mutual information gradient calculation is fixed now (there was
	a swapping of array indices). This code has a lot of debugging
	output which should be cleaned up.
	* nmr_Gaussian.hC : increased the size of the array used to store
	the gaussian and the number of standard deviations to the point that
	you can reach the lower limit of a double, not that that is necessary
	but it helps intensities that are very distant from each other in the
	joint histogram to interact in the mutual information calculation
	when the variance parameters are set lower than they should be
        (makeFilter) : new function used to get filters for blurring an image 
	of the joint histogram in nmr_AlignerMI.C
	* nmr_RegistrationUI.C (handleRegistrationChange): case NMR_REG_RESULT:
	removed code to compute TopoImageFromProjImage
	(createResampleImage): added code to compute TopoImageFromProjImage
	here so we only execute it when we need to
	* nmr_Registration_Client.hC: added size parameters to describe the
	size of an image in the world (in nanometers)
	* nmr_Registration_Impl.C (ensureThreePoints): adds one or two points
	to a correspondence to make sure that the linear solver code does the
	right thing - takes into account the size of an image in the world to
	sufficiently constrain the scale factors in the final transformation
	result
    	(convertTo3DSpace): scales x and y values for an image by the size
	of the image and looks up the z values for the given x and y values
	by reading them out of the image
 	(adjustTransformFromRotatedCorrespondence): finds the best
	2D affine transformation given a correspondence and 
	orthographic projection direction
	(convertRyRxToViewingDirection): convert a rotation sequence to
	the corresponding projection direction (for projection onto x-y plane)
	(convertViewingDirectionToRyRx): inverse of the above function
	* nmr_Registration_Interface.hC: added size parameters to describe the
        size of an image in the world (in nanometers),removed height field flag
	* nmr_Registration_Proxy.hC: "
	* nmr_Registration_Server.hC: "
	* nmr_Util.hC (resample): fixes a bug in this
	(createGradientImages): new function 
        * nmr_CoarseToFineSearch.hC : new file to help automatic alignment code

2001-06-17  Tom Hudson  <hudson@cs.unc.edu>

	* correspondence.C : reorder #includes, fix brackets.
	* correspondence.h : reorder #includes, fix brackets.
	* nmr_Gaussian.h : reorder #includes, fix brackets.
	* nmr_Registration_Interface.h : reorder #includes, fix brackets.
	* transformSolve.h : reorder #includes, fix brackets.

2001-05-31  Aron Helser  <helser@cs.unc.edu>

	* nmr_RegistrationUI.Ch (nmr_RegistrationUI): Take dataset as arg.
	(createResamplePlane): New fcn, creates a plane with same
	resolution and region as heightplane. 
	(handle_resamplePlaneName_change): new
	
2001-05-22  Adam Seeger  <seeger@cs.unc.edu>

	* nmr_AlignerMI.hC: new file containing code to do alignment by
	maximization of mutual information
	* nmr_Gaussian.hC: new file - utility to evaluate a gaussian 
	efficiently using a lookup table
	* nmr_Util.hC (resample): new function to resample an image
	              (sampleUniformDistribution): random number generator
	* nmr_Registration_Impl.C (registerImages): added some code to
	calculate and print out the mutual information each time the 
	transformation is computed (this is just a test)

2001-03-02  Adam Seeger  <seeger@cs.unc.edu>

	* Makefile: added glut as an external lib
	* correspondenceEditor.hC (added a callback thing so 
	that changes in the correspondence can be tracked externally)
	* nmr_Registration_ImplUI.hC (handle_CorrespondenceChange): new function
	* nmr_Registration_Proxy.hC (constructor): for local implementation,
	now creates a server using the connection passed in as a parameter and
	connects to it with a client as would happen if the registration code
	were running remotely (this made it simpler to propagate transformation
	updates since everything goes through the vrpn callback whether its
	coming from the local or remote registration implementation - like the
	phantom server)
	
2000-10-02  Adam Seeger  <seeger@cs.unc.edu>

	* nmr_RegistrationUI.Ch (handleRegistrationChange) : fixed problem
	with the transformation sent to graphics for computing texture
	coordinates (it didn't work for AFM to AFM registration because
	of stuff for imageFromWorld transformation that was added in 
	last commit). Also, cleaned up naming scheme for transformations to
	make the code easier to understand. A comment at the top of
	nmr_RegistrationUI.h explains the different coordinate systems.
        * nmr_Util.C (createResampledImage,
        createResampledImageWithImageSpaceTransformation) : replaced 
	getValueInterpolated with getValueInterpolatedNZ to avoid mixing
	of zero (unset) with nonzero (set) values - this messes up scaling
        * nmr_Util.C (addImage) : made this function do something more
        correct by using minNonZeroValue instead of trying to guess
        some good values to use to preserve the intensity scale

2000-09-23  Adam Seeger  <seeger@cs.unc.edu>

	* nmr_ImageTransform.hC (invert): new function to invert the 
	transformation matrix used in nmr_ImageTransformAffine
	* nmr_RegistrationUI.Ch : new variables d_invertWarp,
	d_imageTransformWorldSpace, d_imageTransformImageSpace, 
        d_imageTransformImageSpaceInv, which replace d_imageTransform
	* nmr_RegistrationUI.Ch (handleRegistrationChange) : now computes
	these new transformations (also adds missing transformation from
	world to image space for projection image which
	hadn't caused problems for SEM data because we were assuming that they
	were the identity before (by default they were set the same and
	the SEM data doesn't have any region information that would cause
	this to change) - this caused problems when we tried to register
	two AFM images.
	* nmr_RegistrationUI.Ch (createResampleImage) : 
	added the code here to hande the new option of resampling the
	Topography image onto the Projection image
	(calls a new function with a long name: 
	createResampledImageWithImageSpaceTransformation)
	* nmr_Util.Ch (createResampledImageWithImageSpaceTransformation) :
	new function that is more efficient than older createResampleImage 
	functions but assumes a 2D->2D transformation that maps directly from
	pixels in one image to pixels in other image instead of a
	3D-2D projection from world space to pixels in an image

2000-08-17  Adam Seeger  <seeger@cs.unc.edu>

	* correspondence.C (Correspondence): switched malloc to new
	* correspondence.C (init): switched malloc to new
	* correspondenceEditor.C (eventHandler): handles errors from getPoint
		better
	* correspondenceEditor.C (setImage): uses minNonZeroValue instead of
		minValue
	* nmr_Registration_Impl.C (nmr_Registration_Impl): adds some
		data member initialization that was missing
	* nmr_Registration_Impl.C (registerImages): adds stuff to handle
		fewer constraints and switches the transformation type
		accordingly in call to transformSolver
	* nmr_Registration_ImplUI.C (newScanline): creates a temporary
		image so we can do some contrast adjustment for 
		display purposes but doesn't do this yet
	* nmr_Registration_Interface.h : adds enum values to 
		nmr_TransformationType
	* transformSolve.C (transformSolver): cleaned up this function
		quite a bit, making it simpler and easier to use - some
		functionality was removed but I decided it wasn't going to
		be useful; made it easier to use the things that are in fact
		useful but weren't be used like the transformations with fewer
		parameters
	* transformSolve.h : removed a bunch of headers for old code from
		transformSolve.C and the enum xform_solution_t

2000-08-11  Kwan Torrich Skinner  <skinner@cs.unc.edu>

	* all: Merge thirdtech_branch code to trunk.

