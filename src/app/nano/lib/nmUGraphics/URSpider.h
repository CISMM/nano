/* The nanoManipulator and its source code have been released under the
 * Boost software license when nanoManipulator, Inc. ceased operations on
 * January 1, 2014.  At this point, the message below from 3rdTech (who
 * sublicensed from nanoManipulator, Inc.) was superceded.
 * Since that time, the code can be used according to the following
 * license.  Support for this system is now through the NIH/NIBIB
 * National Research Resource at cismm.org.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef URSPIDER_H
#define URSPIDER_H

#include "URPolygon.h"

class URSpider : public URPolygon {
private:
	double spider_length[8];
	double spider_width[8];
	double spider_thick[8];
	int spider_tess[8];
	double spider_beg_curve[8];
    double spider_end_curve[8];
    double spider_leg_x[8];
    double spider_leg_y[8];
    double spider_leg_rot[8];
	int spider_legs;

public:
	// constructor destructor
	URSpider();
	~URSpider();

	// Spider specific functions
	void SetSpiderLength(int i, double l) { spider_length[i] = l; }
	void SetSpiderWidth(int i, double w) { spider_width[i] = w; }
	void SetSpiderThick(int i, double t) { spider_thick[i] = t; }
	void SetSpiderTess(int i, int t) { spider_tess[i] = t; }
	void SetSpiderBegCurve(int i, double b) { spider_beg_curve[i] = b; }
    void SetSpiderEndCurve(int i, double e) { spider_end_curve[i] = e; }
    void SetSpiderLegX(int i, double x) { spider_leg_x[i] = x; }
    void SetSpiderLegY(int i, double y) { spider_leg_y[i] = y; }
    void SetSpiderLegRot(int i, double r) { spider_leg_rot[i] = r; }
	void SetSpiderLegs(int l) { spider_legs = l; }

	double GetSpiderLength(int i) { return spider_length[i]; }
	double GetSpiderWidth(int i) { return spider_width[i]; }
	double GetSpiderThick(int i) { return spider_thick[i]; }
	int GetSpiderTess(int i) { return spider_tess[i]; }
	double GetSpiderBegCurve(int i) { return spider_beg_curve[i]; }
    double GetSpiderEndCurve(int i) { return spider_end_curve[i]; }
    double GetSpiderLegX(int i) { return spider_leg_x[i]; }
    double GetSpiderLegY(int i) { return spider_leg_y[i]; }
    double GetSpiderLegRot(int i) { return spider_leg_rot[i]; }
	int GetSpiderLegs() { return spider_legs; }
	void SaveSpider(const char*);
};

#endif