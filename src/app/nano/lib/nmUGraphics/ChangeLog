2003-02-24  Adam Seeger  <seeger@cs.unc.edu>

	* URProjectiveTexture.C - added additional flag to trigger updates when
	opacity or colormap changes - it wasn't updating in all cases
    (updateTextureMipmap): fixed big memory leak here - added call to delete

2003-02-07  David Borland <borland@cs.unc.edu>

        * File Generator.C : fixed a couple of comments

        * SpiderGenerator.C : now parses the new curvature, leg translation, 
        and leg rotation parameters correctly.

2003-01-31  David Borland <borland@cs.unc.edu>

        * SpiderGenerator.C : made changes so that each leg can be translated
        and rotated individually.  Some actual spider devices are not very 
        radially symmetric, and this change accounts for that.

        * URSpider.[Ch] : changes to the spider object to reflect the above
        changes.

        * URProjectiveTexture.C : no change
        

2003-01-20  David Borland <borland@cs.unc.edu>

        * SpiderGenerator.C : changed the way the spider curve is computed.  
        Now, we have the beginning and ending curvature over the leg, as 
        opposed to a constant curvature over the leg.

        * URSpider.h : changes to reflect the above change.

        * URSpider.C : same

2002-11-06  Adam Seeger  <seeger@cs.unc.edu>

	* URProjectiveTexture.[Ch] (setImage): uncommented check of image pointer
	(createTexture): added glPushAttrib()/glPopAttrib() to fix a bug
	(setColorMap): now we allocate our own copy of the colormap instead of
	storing a pointer

	(updateTextureNoMipmap): returns without doing anything if the image is
	too big for texture memory; added calls to glPushAttrib(),glPopAttrib() and 
	glPushClientAttrib(), glPopClientAttrib(); fixed this so it doesn't
	read the whole line of the image - just the subimage part - for some
	reason this wasn't working as expected according to the opengl docs

	(initTextureMatrixNoMipmap): added check using the texture proxy to
	help avoid loading a texture that is too big for memory - this was causing
	the program to crash later when glTexSubImage was called
	Fixed bug with use of d_opacity - there was some confusion over whether
	it went from 0 to 255 or 0 to 1 - used the latter assumption
	Added calls to glPushAttrib/glPopAttrib, 
	glPushClientAttrib/glPopClientAttrib


2002-11-04  David Borland <borland@cs.unc.edu>

        * URProjectiveTexture.[Ch] : changes so that the video texture
        can have a colormap.  General changes to streamline the code a little.

2002-10-24  David Borland <borland@cs.unc.edu>

        * URProjectiveTexture.C : removed a print statement I had been using
        for debugging.

2002-10-24  David Borland <borland@cs.unc.edu>

        * URProjectiveTexture.[Ch] : numerous changes to fix some problems with
        the texture borders and colormaps.  Added code to be able to set the
        alpha value of the projective texture.

2002-10-09  Adam Seeger  <seeger@cs.unc.edu>

	* URHeightField.C (renderWithoutDisplayList): fixed nasty bug here
	which can make the surface look really messed up if you pass in values
	for xmax and ymax that aren't equal to the surface width and height

2002-10-08  Adam Seeger  <seeger@cs.unc.edu>

	* URHeightField.C (setSurface): added parameters to set the size/position
	for the surface
	(renderWithoutDisplayList): "
	(setSurfaceRegion): new function
	* URPolygon.C (Render): fixed a bug here - wasn't disabling textures after
	drawing
	* URVector.[Ch]: new file used by AFM-SEM-model code to display direction
	of projection for SEM image

2002-10-02  David Borland <borland@cs.unc.edu>

        * URender.C : added check to ChangeStaticFile to make sure
        the current object has a name.

2002-10-02  David Borland <borland@cs.unc.edu>

        * URender.[Ch] : removed the URTEXTURE enum and a reference to it.

2002-10-02  David Borland <borland@cs.unc.edu>

        * URAxis.[Ch] : removed functions Set*variable*All functions
        from URAxis.  These are now found in URender, which performs the
        default action for the functions.

        * URHeightField.C : sets its type to URHEIGHTFIELD in the constructor.

        * URPolygon.[Ch] : same as URAxis

        * URTubeFile.[Ch] : same

        * URender.[Ch] : added default functionality for Set*variable*All
        functions.

        * UTree.h : removed extrn UTree Textures

        * UTree.C : cosmetic changes

        * nmUGraphics.dsp : removed URTexture.  We aren't using this class,
        and it doesn't make sense for textures to be objects in the scene
        graph.

2002-09-27  Adam Seeger  <seeger@cs.unc.edu>

	* URProjectiveTexture.C (enable): added error message to catch a potential
    programmer error

2002-09-04  Adam Seeger  <seeger@cs.unc.edu>
	* URender.[hC]: name change: SetProjTextAll-->SetProjTextEnableAll
	(SetProjTextureAll): new function
	(SetTextureTransformAll): new function
	added pointer to URProjectiveTexture object
	* URAxis.[hC]: "
	* URTexture.[hC]: " - this file should probably be removed
	* URHeightField.[hC]: ", (Render): uses URProjectiveTexture object
	* URPolygon.[hC]: ", rewrote code for locking texture coordinates
	* Xform.C : added function to compute and return opengl matrix
	(Push_As_OGL): removed some confusion here
	* nmUGraphics.dsp : added URProjectiveTexture.[Ch]


2002-08-13  Adam Seeger  <seeger@cs.unc.edu>
	* URHeightField.[Ch]: new class to render an image as a surface

2002-07-08 Jameson Miller <millerj@cs.unc.edu>
	* DsAxisGenerator.C : set the scale of the axis icon when loaded.

2002-07-08 David Borland <borland@cs.unc.edu>
        * TubeFileGenerator.C : removed some debugging statements

2002-07-03 Jameson Miller <millerj@cs.unc.edu>
	* new files : DsAxisGenerator.Ch - creates an axis object.
	Modified Files - GileGenerator.C - now creat axis when loading a .dsa file
	nmuGraphics.dsp - added new files into project workspace
	
2002-07-03  Adam Seeger  <seeger@cs.unc.edu>

	* URPolygon.C (Render): added glPushAttrib() and glPopAttrib for
	texture state

2002-07-01  David Borland <borland@cs.unc.edu>

        * ProjTextObjGenerator.C : no real change.

        * SpiderGenerator.[Ch] : small changes to comply with changes to the 
        overall UberGraphics setup.  Previously, the various types of 
        objects had all had their functionality included in the URender
        base class.  Now objects that have functionality not included in
        basic functionality of the URender class have their own class.  Since
        the three classes created below are all polygonal objects, they 
        are derived from URPolygon, which is derived from URender.  

        * SpiderGenerator.h : same

        * TubeFileGenerator.C : same

        * URPolygon.[Ch] : same

        * URSpider.[Ch] : new class for spider object.  It is derived from
        URPolygon, and contains variables only needed for spider objects.

        * URTubeFile.[Ch] : new class for objects created from the Shape 
        Analysis code.  It is derived from URPolygon, and contains variables
        only needed for tube file objects.

        * URWaveFront.[Ch] : new class for WaveFront objects.  It is derived
        from URPolygon, and contains variables only needed for WaveFront
        objects.

        * URender.[Ch] : removed a bunch of variables that now reside in 
        classes the new classes.

        * WaveFrontFileGenerator.C : small changes for compatibility with 
        above changes.

        * nmUGraphics.dsp : added the URSpider, URTubeFile, and URWaveFront
        files
        

2002-06-28  Adam Seeger  <seeger@cs.unc.edu>

	* URender.C (ReloadGeometry) : added dummy base class implementation so
	this function isn't pure virtual since it isn't required for the 
	basic UGraphics functionality but is assumed by some other code that
	reads models in from files.

2002--6-26  David Borland <borland@cs.unc.edu>

        * SpiderGenerator.C : added code for parsing data from .spi files.
	These files hold the data from a saved spider.  Saved spiders can now
	be loaded with their parameters automatically generated.

	* URender.C : added code for saving spider data.

	* URender.h : added functin definition for saving spider data.

2002-06-06  David Borland <borland@cs.unc.edu>

        * nmUGraphics.dps : added ProjTextObjGenerator files

2002-06-06  David Borland <borland@cs.unc.edu>

        * ProjTextObjGenerator.C : removed an erroneous error message

	* FileGenerator.C : same

2002-06-06  David Borland <borland@cs.unc.edu>

        * ProjTextObjGenerator.C : new file for the creation of the object
	associated with the projective texture when in object coordiate
	generation mode.  The object is basically a cone with a "sight" on
	the end, and a center line through the middle.  Manipulating the
	object with the phantom/imported objects user interface causes the
	projective texture to be transformed accordingly.  The result is
	similar to moving a flashlight accross the scene.

	* ProjTextObjGenerator.h : new header file

	* FileGenerator.C : added ProjTextObjGenerator capability

	* SpiderGenerator.C : renamed a couple of functions for compatibility
	with the above changes

	* TubeFileGenerator.C : same

	* WaveFrontFileGenerator.C : same

2002-05-24  David Borland <borland@cs.unc.edu>

        * URender.h : code for allowing the current projective texture's 
	transform to be locked for an object.

	* URender.C : same

	* URTexture.h : same

	* URTexture.C : same
	
	* URPolygon.h : same

	* URPolygon.C : same

	* URAxis.h : same

	* URAxis.C : same

2002-05-23  David Borland <borland@cs.unc.edu>

        * URPolygon.C : fixed code for displaying projective textures at an
	angle onto objects correctly

	* URender.h : code for fine-tuning translations and rotations

2002-05-23  David Borland <borland@cs.unc.edu>

        * SpiderGenerator.C : code for individual manipulation of legs

        * URPolygon.C : preliminary changes for getting projective textures
        to show up correctly on objects when the texture is projected from an
        angle

        * URender.h : code for individual manipulation of spider legs

2002-05-20  David Borland <borland@cs.unc.edu>

        * URender.h : added variable and access functions for number of
        spider legs

        * SpiderGenerator.C : changed code to account for variable number
        of legs.  This allows the spider generator code to also be used for
        aligning simple paddles and determining curvature.

2002-05-20  David Borland <borland@cs.unc.edu>

        * URender.h : added variables and access functions for locking
        translations and rotations

2002-05-20  David Borland <borland@cs.unc.edu>
   
        * TubeFileGenerator.C : fixed a conflict between versions.

        * URPolygon.C : Previous change to object rotations was rotating
        around the wrong axes.  Fixed this.

2002-05-13  Andrea Hilchey <hilchey@cs.unc.edu>

	* URender.C,.h : eliminated SetRot*All (* is x y or z) for
	SetRotAll function
 
2002-05-13  Andrea Hilchey <hilchey@cs.unc.edu>

	* URPolygon.C,.h : eliminated SetRotxAll, SetRotyAll, and
	SetRotzAll functions for general SetRotAll function which
	takes in all rotation values from tcl menu boxes instead of
	just x, y, or z and resets all internal rotations from these
	values each time any one of them changes--elimintes problems
	with euler angle values returned from quaternions not matching 
	up with what is currently in tcl boxes, which was causing 
	objects to jitter


2002-05-09  Andrea Hilchey <hilchey@cs.unc.edu>

	* TubeFileGenerator.C : changed method of finding centerpoint of
	tube object from approximation using endpoints to averaging of
	all cylinder positions

2002-05-07  Andrea Hilchey <hilchey@cs.unc.edu>

        * URPolygon.C : changed parameters passed in to
	encode_and_sendRot function calls

2002-05-06  David Borland <borland@cs.unc.edu>

        * WaveFrontFileGenerator.C:  deleted a couple of lines by mistake 
        before last commit.  Fixed this.

2002-05-06  David Borland <borland@cs.unc.edu>

        * SpiderGenerator.C:  new file for the creation of spider TAMS objects

        * SpiderGenerator.h:  new header file for SpiderGenerator.C

        * FileGenerator.C:  added code for the inclusion of spider objects

        * TubeFileGenerator.C:  changed some code for testing the new spider
        objects

        * WaveFrontGenerator.C:  changed some code for testing the new spider
        objects

        * URAxis.h:  added ReloadGeometry function for compatibility with 
        spider objects

        * URPolygon.C:  added compatibility with spider objects

        * URender.C:  added compatibility with spider objects

        * URender.h:  added variables and access functions for spider object
        attributes

        * nmUGraphics.dsp:  added SpiderGenerator.C and SpiderGenerator.h

2002-04-26  David Borland <borland@cs.unc.edu>

        * TubeFileGenerator.C:  changed loaded tubes center so that scaling
        and rotation are performed at the object center

        * URAxis.C:  added change height plane code for loaded objects

        * URAxis.h:  added change height plane code for loaded objects

        * URPolygon.C:  added change height plane code for loaded objects

        * URPolygon.h:  added change height plane code for loaded objects

        * URTexture.C:  added change height plane code for loaded objects

        * URRender.C:  added change height plane code for loaded objects

        * URRender.h:  added change height plane code for loaded objects
        
        * UTree.h:  added struct for new change static file code

        * WaveFrontFileGenerator.C:  added code to account for new offset
        in the Xform translation

        * Xform.C:  added offset so that setting and getting translation
        takes into account the fact that the height plane might not be
        at the origin in nano

        * Xform.C:  added offset like above

2002-04-15  David Borland <borland@cs.unc.edu>

        * TubeFileGenerator.C:  made changes so that when the current static
        file is a .tfr, the correct info is sent to the AFM simulator

2002-04-11  David Borland <borland@cs.unc.edu>

        * TubeFileGenerator.C:  added code for skipping the first point in
        a tube, as the azimuth given is often not right.  added code for 
        automatically correctly orienting a tube with its corresponding static
        file.  previously only worked for files whose origin corresponded with
        the "world" origin (i.e. image files)

        * URPolygon.C:  added check for user-controlled variable before
        sending orientation and scale update to AFM simulator

        * URender.h:  added variable for user-control of sending orientation
        and scale to AFM simulator

2002-04-03  David Borland <borland@cs.unc.edu>

        * TubeFileGenerator.C:  loaded tubes are now automatically scaled,
        translated, and rotated to match the static file they were created
        from

2002-04-03  David Borland <borland@cs.unc.edu>

        * TubeFileGenerator.C:  further additions for loading the new output
        format as tubes.  Corrected some bugs in sending data to the AFM
        simulator

2002-04-02  David Marshburn <marshbur@cs.unc.edu>

	* Makefile:  added libs so that this builds on the SGI

2002-04-02  David Borland <borland@cs.unc.edu>
        * FileGenerator.C:  any .txt file can be read as a tube--not just
        mask.detail.txt

        * TubeFileGenerator.C:  made some changes for loading actual tube
        output files--not the sample file.  Changes are still underway

        * URPolygon.C:  automatically send translation and rotation to the 
        AFM simulator

        * nmUGraphics.dsp:  added some include directories

2002-03-27  David Borland <borland@cs.unc.edu>

        * TubeFileGenerator.C:  added code to allow the user to select
        every nth point along the axis line when loading a tube--should
        make for better performance on the AFM simulator side

        * URender.h:  added data member and access funtions for axis step

2002-03-27  David Borland <borland@cs.unc.edu>

        * TubeFileGenerator.C:  code to fill in data for cylinders sent to 
                                AFM simulator
        * URender.h:  added data members for cylinders
                      added data member for clamping projective textures
                      to objects
        * URender.C:  added function for clamping projective textures
                      to objects
        * URPolygon.h:  clamping projective textures to objects
        * URPolygon.C:  clamping projective textures to objects
        * URTexture.h:  clamping projective textures to objects
        * URTexture.C:   clamping projective textures to objects
        * URAxis.h:  clamping projective textures to objects
        * URAxis.C:  clamping projective textures to objects
        
2002-03-21  Aron Helser  <helser@cs.unc.edu>

	* nmUGraphics.dsp: Release config now builds.

2002-03-20  David Marshburn  <marshbur@cs.unc.edu>

	* TubeFileGenerator.C (BuildList): loop variable structure

2002-03-19  David Marshburn  <marshbur@evans.cs.unc.edu>

	* Xform4x4.h: compiler pragmas to ignore warnings in std. library
	include files.  warning reset after include statements.
	* Xform.h:  same
	* UTree.C:  same
	* URender.h:  same
	* URTexture.h:  same
	* URPolygon.h:  same
	* TubeFileGenerator.C (BuildList): loop variable structure
		(Load):  same
	* URPolygon.C: removed semicolons from function ends (removes warning)

2002-03-13  Aron Helser  <helser@cs.unc.edu>

	* URPolygon.h: Change to standard iostream/STL headers. 
	* URTexture.C: same
	* URTexture.h: same
	* URender.h: same
	* UTree.C: same
	* Xform.h: same
	* Xform4x4.h: same
	* nmUGraphics.dsp: same

2002-03-06 David Borland <borland@cs.unc.edu>
        * TubeFileGenerator.C : Added code to allow for user-control of
        the tesselation of the nanotube

        * URender.C : Added functions so that object selection "all" will
        apply changes in the UI stuff to all objects.

        * URender.h : See above

        * URAxis.C : See above
        
        * URAxis.h : See above

        * URPolygon.C : See above

        * URPolygon.h : See above

        * URTexture.C : See above
        
        * URTexture.h : See above
         
        * UTree.C : See above
         
        * WaveFrontFileGenerator.C : See above


2002-02-26 David Borland <borland@cs.unc.edu>

	* FileGenerator.C : Added "mask.details.txt" to possible names
                     		    of files to load tubes from

 	* TubeFileGenerator.C : Fixed some problems with the loading of
                         the tube geometry

 	* URender.C : Added initializer for new num_triangles variable

 	* URender.h : Added new num_triangles variable

2002-02-25 David Borland <borland@cs.unc.edu>

        * TubeFileGenerator.C: new file for loading files output by
        ShapeAnalye code

        * TubeFileGenerator.h: See above

        * UTree.C: added code for being able to send geometry loaded by 
        TubeFileGenerator to AFM simulator

        * UTee.h: See above

        * URAxis.C: See above

        * URPolygon.C: See above

        * URTexture.C: See above

        * URender.h: See above

        * nmUGraphics.dsp: added TubeFileGenerator.C

        * FileGenerator.C: See above


2002-02-25 David Borland <borland@cs.unc.edu>

        * WaveFrontFileGenerator.C: fixed build problem on sgi

2002-01-31 David Marshburn   <marshbur@cs.unc.edu>

	* nmUGraphics.dsp:  builds with non-static run-time libraries.

2002-01-24  David Borland <borland@cs.unc.edu>
        * WaveFrontFileGenerator.C: added header file for sgi compilation

2002-01-18  David Borland <borland@cs.unc.edu>

        * WaveFrontFileGenerator.C: Edited the file so that .obj file 
        loading is more robust.
        Also handles arbitrary geometry--not just triangles.

2001-12-18  David Marshburn  <marshbur@evans.cs.unc.edu>

	* TubeGenerator.C: remove compiler warning

2001-03-13  Jason Clark  <jclark@cs.unc.edu>

	* URender.h: New color setting function

	* MSIFileGenerator.C: See below

	* MSIFileGenerator.h: Removed color setting in this generator.
	Color setting is done in the containing URender object.

	* FileGenerator.h (class FileGenerator): Removed spurious const

2001-03-12  Jason Clark  <jclark@cs.unc.edu>

	* Xform.C: Bug fix and removed spurious print out

	* UTree.h: Bug fixes and filled in a few function stubs that were
	never coded.

	* UTree.C: See above

	* URPolygon.h: Bug fixes to original code and modified to work
	with new Generator classes.

	* URPolygon.C: See above

	* GeomGenerator.h: New classes that are used for loading the
	display list code into URPolygons.  Provides an abstract interface
	for any method to build these display lists.  For example, from
	.msi or .obj files, and for tubes build from tube analysis code.
	New classe are FileGenerator (special for any Generator that works
	by generating the display lists from a file),
	WaveFrontFileGenerator, MSIFileGenerator and TubeGenerator.

	* GeomGenerator.C: See above

2001-03-02  Adam Seeger  <seeger@cs.unc.edu>

        * Makefile : added glut as external lib

2000-08-11  Kwan Torrich Skinner  <skinner@cs.unc.edu>

	* all: Merge thirdtech_branch code to trunk.

