/* The nanoManipulator and its source code have been released under the
 * Boost software license when nanoManipulator, Inc. ceased operations on
 * January 1, 2014.  At this point, the message below from 3rdTech (who
 * sublicensed from nanoManipulator, Inc.) was superceded.
 * Since that time, the code can be used according to the following
 * license.  Support for this system is now through the NIH/NIBIB
 * National Research Resource at cismm.org.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef URTUBEFILE_H
#define URTUBEFILE_H

#include "URPolygon.h"

typedef struct {
	double x1, y1, z1;
	double x2, y2, z2;
	double radius;
	double length;
	double az;
	double alt;
} cylinder;

class URTubeFile : public URPolygon {
private:
	int tess;			// controls the number of faces along the nano-tube
	int axis_step;		// controls the number of nano-tube sections 

	int update_AFM;		// controls whether or not to update the AFM when manipulating
						// the tube in nano
public:
	// constructor destructor
	URTubeFile();
	~URTubeFile();

	// cylinders for sending to afm simulator
	cylinder* cylinders;
	long num_cylinders;

	// management functions
	void SetTess(int t) { tess = t; }
	void SetAxisStep(int s) { axis_step = s; }
	void SetUpdateAFM(int u) { update_AFM = u; }

	int GetTess() { return tess; }
	int GetAxisStep() { return axis_step; }
	int GetUpdateAFM() { return update_AFM; }

	// overload the URender versions, as we need to update the cylinders
	int ChangeStaticFile(void* userdata=NULL);	
	int ScaleAll(void* userdate=NULL);			
	int SetTransxAll(void *userdata=NULL);
	int SetTransyAll(void *userdata=NULL);
	int SetTranszAll(void *userdata=NULL);
	int SetRotAll(void *userdata=NULL);
};

#endif