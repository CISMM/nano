/* The nanoManipulator and its source code have been released under the
 * Boost software license when nanoManipulator, Inc. ceased operations on
 * January 1, 2014.  At this point, the message below from 3rdTech (who
 * sublicensed from nanoManipulator, Inc.) was superceded.
 * Since that time, the code can be used according to the following
 * license.  Support for this system is now through the NIH/NIBIB
 * National Research Resource at cismm.org.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef UTREE_H
#define UTREE_H

class UTree;
class URender;
#include "URender.h"
#include "Xform.h"
#include "nmb_String.h"

#define CHILDCHUNK 10			//# of slots to add if I overflow the child array
#define MAX_TREE_DEPTH 200		//maximum levels of the tree


struct change_static_file {
	double scale;
	double xoffset;
	double yoffset;
	double zoffset;
};

typedef int (URender::*IteratorFunction)(void *userdata);
class UTree{
	private:
		//main graphics data members
		URender *contents;  	//ptrs to URender node

		//main tree structure data members
		UTree **children;	//array to hold children ptrs
		int size;		//size of children array
		int num_children;	//# of filled slots in children array
		UTree *parent;		//ptr to parent node

		//helper functions
		int TGetPathByName(const char *node_name,int depth,UTree **scratch );
					//node_name name to find
					//depth is to track the recursion depth
					//scratch is to build a list of visited node
					//	during the traversal
	public:
		//constructors & destructors
		UTree(URender *r=NULL);
		~UTree();

		//io functions -- not yet fully implemented ... these are just
		//stubs
		void TSaveTreeConfiguration(char *filename);
		void TLoadTreeConfiguration(char *filename);
		friend ostream& operator<< (ostream&,const UTree& t);

		// current object
		nmb_String * current_object;

		//render functions
		void TRender();

		//selection Functions
		/*TSelectByPoint();
		TSelectByRay();
		TClearSelection();
		TMarkSelections();*/

		//tree management functions
		void TPruneBranch(UTree *branch_to_prune);
		void TGraftBranch(UTree *graft_point, UTree *branch_to_graft);
		int  TReparent(const char *node_name,
		               const char *new_parent_name);
		void TAddTreeNode(UTree *);
		void TAddNode(URender *renderable, const char *name);
		void TRemoveTreeNode(UTree *);

		//set functions
		void TSetName(const char *newname);
		void TSetContents(URender *r)
        {
            if (contents!=NULL) delete contents;
            contents=r;
		}

		//iterators
	        int Do(IteratorFunction ifunc, void *userdata=NULL);

		//get functions
		const char* TGetName();
		UTree *TGetNodeByName(const char *nodename);	//retrieve a node by name
        UTree *TGetParent() {return parent;}
		Xform TGetXformByName(const char *from_node, const char* to_node);
							//traverse the tree between
							//two nodes and build the matrix
		URender& TGetContents(){return *contents;}
		UTree * TGetChild(int i){
                    if(( i>=0) && (i < num_children) ) {
                        return children[i];
                    } else {
                        return NULL;
                    }
                }
};


//GLOBAL VARIABLES FOR NANO
extern UTree World;

#endif

