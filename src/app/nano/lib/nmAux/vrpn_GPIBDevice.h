/* The nanoManipulator and its source code have been released under the
 * Boost software license when nanoManipulator, Inc. ceased operations on
 * January 1, 2014.  At this point, the message below from 3rdTech (who
 * sublicensed from nanoManipulator, Inc.) was superceded.
 * Since that time, the code can be used according to the following
 * license.  Support for this system is now through the NIH/NIBIB
 * National Research Resource at cismm.org.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef _VRPN_GPIBDEVICE_H
#define _VRPN_GPIBDEVICE_H

#include <vrpn_Connection.h>

//#ifdef _WIN32
//#include "windows.h"
//#endif


class vrpn_GPIBDevice {
  public:
    vrpn_GPIBDevice(const char *name, vrpn_Connection *c = NULL);
	// Handle getting any reports
//    virtual int mainloop(const struct timeval * timeout = NULL) = 0;
    virtual ~vrpn_GPIBDevice() {};

  protected:
//    vrpn_Connection *d_connection;	
//    vrpn_int32 d_myId;		//connection ID for device

	// Sent by client
    vrpn_int32 d_Device_type;   // sends an ibdev GPIB command	
	vrpn_int32 d_Clear_type;   // sends an ibclr GPIB command	
	vrpn_int32 d_Write_type;   // sends an ibwrt GPIB command	
	vrpn_int32 d_Read_type;   // sends an ibrd GPIB command, server replies with Result
	vrpn_int32 d_ReadData_type;   // sends an ibrd GPIB command, server replies with ResultData
	vrpn_int32 d_Shutdown_type; // when connection shuts down

	// Sent by server
	vrpn_int32 d_Result_type;   // sends results of a ibrd GPIB command back to client
	vrpn_int32 d_ResultData_type;   // sends results of an ibrd GPIB command, 
			// translates the raw, 4 byte results into network standard byte order.
	vrpn_int32 d_Error_type;   // sends text of a GPIB error	


	char * encode_Device (vrpn_int32 * len, vrpn_int32 board_index,
			vrpn_int32 primary_address, vrpn_int32 secondary_address);
	vrpn_int32 decode_Device (const char ** buf, vrpn_int32* board_index,
			vrpn_int32* primary_address, vrpn_int32* secondary_address);

	char * encode_DeviceID (vrpn_int32 * len,
			vrpn_int32 primary_address, vrpn_int32 secondary_address);
	vrpn_int32 decode_DeviceID (const char ** buf,
			vrpn_int32* primary_address, vrpn_int32* secondary_address);

	// Write commands must send a valid, null-terminated string!
	char * encode_Write (vrpn_int32 * len, vrpn_int32 pad, vrpn_int32 sad, char * write_buf);
	vrpn_int32 decode_Write (const char ** buf, vrpn_int32 *pad, vrpn_int32 *sad, char ** write_buf);
		// allocated memory for the write_buf - user must delete.

	// Specifies the number of 1 byte characters to read 
	char * encode_Read (vrpn_int32 * len, vrpn_int32 pad, vrpn_int32 sad, vrpn_int32 max_len);
	vrpn_int32 decode_Read (const char ** buf, vrpn_int32 *pad, vrpn_int32 *sad, vrpn_int32 *max_len);

	// Specifies the number of 4 byte floats to read.
	char * encode_ReadData (vrpn_int32 * len, vrpn_int32 pad, vrpn_int32 sad, vrpn_int32 max_len);
	vrpn_int32 decode_ReadData (const char ** buf, vrpn_int32 *pad, vrpn_int32 *sad, vrpn_int32 *max_len);

	// Result commands must send a valid, null-terminated string!
	char * encode_Result (vrpn_int32 * len, vrpn_int32 pad, vrpn_int32 sad, char * write_buf);
	vrpn_int32 decode_Result (const char ** buf, vrpn_int32 *pad, vrpn_int32 *sad, char ** write_buf);
		// allocated memory for the write_buf - user must delete.

	char * encode_ResultData (vrpn_int32 * len, vrpn_int32 pad, vrpn_int32 sad, vrpn_float32 * data, vrpn_int32 data_len);
	vrpn_int32 decode_ResultData (const char ** buf, vrpn_int32 *pad, vrpn_int32 *sad, vrpn_float32 ** data, vrpn_int32 * data_len);
		// allocated memory for the data - user must delete.

	// Error commands must send a valid, null-terminated string!
	char * encode_Error (vrpn_int32 * len, vrpn_int32 pad, vrpn_int32 sad, char * write_buf);
	vrpn_int32 decode_Error (const char ** buf, vrpn_int32 *pad, vrpn_int32 *sad, char ** write_buf);
		// allocated memory for the write_buf - user must delete.
};


#endif
