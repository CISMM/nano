/* The nanoManipulator and its source code have been released under the
 * Boost software license when nanoManipulator, Inc. ceased operations on
 * January 1, 2014.  At this point, the message below from 3rdTech (who
 * sublicensed from nanoManipulator, Inc.) was superceded.
 * Since that time, the code can be used according to the following
 * license.  Support for this system is now through the NIH/NIBIB
 * National Research Resource at cismm.org.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef	OPENGL_H
#define	OPENGL_H

class nmg_State;
class nmg_haptic_graphics;
void determine_GL_capabilities(nmg_State * state);

extern int report_gl_errors(void);

extern void post_handle_exportFileName_change(void);

#if defined (sgi) || defined(linux)
	extern int draw_world (int, void *);
#else
	extern "C" int draw_world(int, void *);
#endif

extern void setupMaterials (void);  // for initialization

extern	void	set_gl_surface_materials (nmg_State * state);
extern	void	set_gl_icon_materials (nmg_State * state);
extern	void	set_gl_measure_materials (nmg_State * state);


int setup_lighting (int nothing, void * data);
void setLightDirection (const q_vec_type &);
void getLightDirection (q_vec_type *);
void resetLightDirection (void);

void getViewportSize (nmg_State * state, int * width, int * height);

void setFilled(nmg_State * state);

void computeModelRegistrationTextureTransform(nmg_State * state, double *matrix);


// int AppendFrameToAVI(char *a_sFilename, unsigned int a_nWidth, unsigned int a_nHeight, unsigned char *a_pImage, int a_nFrameRate)
//
// Credits:
// The BMP file portion of this code was taken from somewhere, and I've forgotten where -  <deepest apologies to the author>
//
// The remainder of the code appends to the AVI... it's pretty straightforward...

// USAGE:	a_sFilename is a pointer to the AVI file
//			a_nWidth and a_nHeight are the dimensions of an RGB (24 bpp) image
//			a_pImage is the image pointer
//			a_nFrameRate is the AVI frame rate (the added frame will be displayed for 1/a_nFrameRate seconds... or something like that)

#include <vfw.h>


int AppendFrameToAVI(unsigned int a_nWidth, unsigned int a_nHeight, unsigned char *a_pImage);

#endif	/* OPENGL_H */
