/* The nanoManipulator and its source code have been released under the
 * Boost software license when nanoManipulator, Inc. ceased operations on
 * January 1, 2014.  At this point, the message below from 3rdTech (who
 * sublicensed from nanoManipulator, Inc.) was superceded.
 * Since that time, the code can be used according to the following
 * license.  Support for this system is now through the NIH/NIBIB
 * National Research Resource at cismm.org.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/*===3rdtech===
  Copyright (c) 2000 by 3rdTech, Inc.
  All Rights Reserved.

  This file may not be distributed without the permission of 
  3rdTech, Inc. 
  ===3rdtech===*/
#ifndef NMG_GRAPHICS_TIMER_H
#define NMG_GRAPHICS_TIMER_H

#include <nmb_TimerList.h>

#include "nmg_Graphics.h"
class nmg_Graphics_Implementation;  // from "nmg_GraphicsImpl.h"

// Wish there was a cleaner way to do this -
// We want to mark as active the current record in an nmb_TimerList
// before executing ANY graphics call.  We could either search through
// the rest of the code & explicitly activate it before making the call
// into nmg_Graphics classes, or we can use subclassing and composition
// to build classes that do that automatically and choose or not choose
// them at runtime.

class nmg_Graphics_Timer : public nmg_Graphics {

  public:

    nmg_Graphics_Timer (nmg_Graphics *, nmb_TimerList *);

    virtual ~nmg_Graphics_Timer (void);

    // NEW MANIPULATORS

    void timeViewpointChanges (vrpn_bool);

    // INHERITED MANIPULATORS

    virtual void mainloop (void);

    virtual void changeDataset( nmb_Dataset * data);
    virtual void resizeViewport(int width, int height);
    virtual void getViewportSize(int *width, int * height);
    virtual void getDisplayPosition (q_vec_type &ll, q_vec_type &ul,
                                                     q_vec_type &ur);
    virtual void loadRulergridImage (const char * name);
	virtual void loadVizImage (const char * name);
    virtual void causeGridReColor (void);
    virtual void causeGridRedraw (void);
    virtual void causeGridRebuild (void);
    virtual void enableChartjunk (int on);
    virtual void enableFilledPolygons (int on, int region = 0);
    virtual void enableSmoothShading (int on);
    virtual void enableTrueTip (int on);
    virtual void setAlphaColor (float r, float g, float b);
    virtual void setAlphaSliderRange (float low, float hi);
    virtual void setColorMapDirectory (const char *);
    virtual void setColorMapName (const char *);
    virtual void setColorMinMax (float low, float hi);
    virtual void setDataColorMinMax (float low, float hi);
    virtual void setOpacitySliderRange (float low, float hi);
    virtual void setTextureDirectory (const char *);
    virtual void setContourColor (int r, int g, int b);
    virtual void setContourWidth (float);
    virtual void setHandColor (int);
    virtual void setAlphaPlaneName (const char *);
    virtual void setColorPlaneName (const char *);
    virtual void setContourPlaneName (const char *);
    virtual void setOpacityPlaneName (const char *);
	virtual void setMaskPlaneName (const char *);
    virtual void setHeightPlaneName (const char *);
    virtual void setIconScale (float);
    virtual void enableCollabHand (vrpn_bool);
    virtual void setCollabHandPos(double [3], double [4]);
    virtual void setCollabMode(int);
    virtual void setSurfaceColor (const double [3]);
    virtual void setSurfaceColor (const int [3]);
    virtual void createColormapTexture( const char * );
    virtual void setTextureColormapSliderRange (int, float, float, float, float);
    virtual void setTextureAlpha(int, float);
    virtual void setTextureColormapConversionMap
                    (int, const char *, const char *);
    virtual void loadRawDataTexture(const int which, const char *image_name,
        const int start_x, const int start_y);
    virtual void updateTexture(int which, const char *image_name,
       int start_x, int start_y, 
       int end_x, int end_y);
    virtual void setTextureTransform(double *xform);
    virtual void setRulergridAngle (float);
    virtual void setRulergridColor (int r, int g, int b);
    virtual void setRulergridOffset (float x, float y);
    virtual void setNullDataAlphaToggle (int val);
    virtual void setRulergridOpacity (float alpha);
    virtual void setRulergridScale (float);
    virtual void setRulergridWidths (float x, float y);
    virtual void setSpecularity (int);
    virtual void setSpecularColor (float);
    virtual void setLocalViewer (vrpn_bool);
    virtual void setDiffusePercent (float);
    virtual void setSurfaceAlpha (float, int region = 0);
    virtual void setSphereScale (float);
    virtual void setTesselationStride (int, int region = 0);
    virtual void setTextureMode (TextureMode,TextureTransformMode, int region = 0);
    virtual void setTextureScale (float);
    virtual void setTrueTipScale (float);
    virtual void setUserMode (int oldMode, int oldStyle, int newMode, int style, int tool);
    virtual void setLightDirection (q_vec_type &);
    virtual void resetLightDirection (void);
    //    virtual int addPolylinePoint (const float [2][3]);
    virtual int addPolylinePoint(const PointType[2]);
    virtual void emptyPolyline (void);
    virtual void setRubberLineStart (float, float);
    virtual void setRubberLineEnd (float, float);
    virtual void setRubberLineStart (const float [2]);
    virtual void setRubberLineEnd (const float [2]);
    virtual void setScanlineEndpoints(const float[3], const float [3]);
    virtual void displayScanlinePosition(const int enable);
    virtual void positionAimLine (const PointType top,
                                  const PointType bottom);
    virtual void positionRubberCorner (float x0, float y0,
                                       float x1, float y1, int);
    virtual void positionRegionBox (float, float, float, float, float, int);
    virtual void positionSweepLine (const PointType topL,
                                    const PointType bottomL,
				    const PointType topR,
                                    const PointType bottomR);
    virtual int addPolySweepPoints (const PointType, const PointType,
				    const PointType, const PointType);
    virtual void setRubberSweepLineStart (const PointType, const PointType);
    virtual void setRubberSweepLineEnd (const PointType, const PointType);

    virtual void positionSphere (float x, float y, float z);
    virtual void createScreenImage (const char * filename,
                                    const char* type);
    virtual void setViewTransform (v_xform_type);

    virtual void getLightDirection (q_vec_type *) const;
    virtual int getHandColor (void) const;
    virtual int getSpecularity (void) const;
    virtual const double * getSurfaceColor (void) const;

    virtual void setViztexScale (float);
    virtual void setRegionMaskHeight(float min_height, float max_height, 
				     int region = 0);
    virtual void setRegionControlPlaneName(const char *, int region = 0);
    virtual int createRegion();
    virtual void destroyRegion(int region);

    //These functions are related to controlling what changes affect the
    //entire surface and what don't.
    virtual void associateAlpha(vrpn_bool associate, int region);
    virtual void associateFilledPolygons(vrpn_bool associate, int region);
    virtual void associateTextureDisplayed(vrpn_bool associate, int region);
    virtual void associateTextureMode(vrpn_bool associate, int region);
    virtual void associateTextureTransformMode(vrpn_bool associate, int region);
    virtual void associateStride(vrpn_bool associate, int region);

  protected:

    vrpn_bool d_timingViewpointChanges;

    nmg_Graphics * d_imp;

    void activateTimer (void);

    nmb_TimerList * d_timer;

};



#endif  // NMG_GRAPHICS_TIMER_H






