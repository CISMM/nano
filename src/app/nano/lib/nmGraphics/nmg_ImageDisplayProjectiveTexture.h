/* The nanoManipulator and its source code have been released under the
 * Boost software license when nanoManipulator, Inc. ceased operations on
 * January 1, 2014.  At this point, the message below from 3rdTech (who
 * sublicensed from nanoManipulator, Inc.) was superceded.
 * Since that time, the code can be used according to the following
 * license.  Support for this system is now through the NIH/NIBIB
 * National Research Resource at cismm.org.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef NMG_IMAGEDISPLAYPROJECTIVETEXTURE_H
#define NMG_IMAGEDISPLAYPROJECTIVETEXTURE_H

#include "nmb_ImageDisplay.h"
#include "nmg_Graphics.h"
#include "nmg_GraphicsImpl.h"

/*
This class is intended to provide an adapter interface to 
the "COLORMAP" texture in nmg_Graphics. The registration code goes
through this interface instead of accessing nmg_Graphics directly
because the registration code is also used in app/ebeamWriter and
there is a no nmg_Graphics there - this interface is implemented
by a different class in that application. In ebeamWriter, multiple
images are displayed at the same time using textures. In nano only
a single image can be displayed as a texture so that changes the semantics
a little bit - you can't call addImageToDisplay twice and expect to see two 
images in nano but this is what happens in ebeamWriter.

see nmb_ImageDisplay.h for more details.
*/

class nmg_ImageDisplayProjectiveTexture: public nmb_ImageDisplay {
 public:
  nmg_ImageDisplayProjectiveTexture(nmg_Graphics *g);
  virtual void addImageToDisplay(nmb_Image *image);
  virtual void removeImageFromDisplay(nmb_Image *image);
  virtual void updateDisplayTransform(nmb_Image *image, double *transform,
	  bool transformIsSelfReferential);
  virtual void setDisplayColorMap(nmb_Image *image,
                       const char *map, const char *mapdir);
  virtual void setDisplayColorMapRange(nmb_Image *image,
                       float data_min, float data_max,
                       float color_min, float color_max);
  virtual void updateColorMapTextureAlpha(float alpha);

  virtual void updateImage(nmb_Image *image);

 protected:
  nmg_Graphics *d_graphicsDisplay;
  vrpn_bool d_projectiveTexturesEnabled;
};

#endif
