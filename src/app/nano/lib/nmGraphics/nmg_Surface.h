/* The nanoManipulator and its source code have been released under the
 * Boost software license when nanoManipulator, Inc. ceased operations on
 * January 1, 2014.  At this point, the message below from 3rdTech (who
 * sublicensed from nanoManipulator, Inc.) was superceded.
 * Since that time, the code can be used according to the following
 * license.  Support for this system is now through the NIH/NIBIB
 * National Research Resource at cismm.org.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef NMG_SURFACE_H
#define NMG_SURFACE_H

#include <vrpn_Types.h>

class nmg_SurfaceRegion;
class nmg_SurfaceMask;
class nmb_Dataset;
class BCPlane;
class nmg_State;

class nmg_Surface
{
public:
    nmg_Surface();
    ~nmg_Surface();

    /// Change width and height of surface, reallocate vertex arrays
    int init(unsigned int width, unsigned int height);
    void changeDataset(nmb_Dataset *dataset);
    nmb_Dataset *getDataset();

    /// Draw the surface, called once per frame. 
    void renderSurface(nmg_State * state);

    ///rebuild display lists for a single region
    //int rebuildRegion(nmg_State * state, int region);

    /// Redraw surface next time rebuildInterval is called. 
    int redrawSurface(nmg_State * state);

    ///rebuild display lists for whole surface, all subregions 
    /// (calls rebuildInterval)
    int rebuildSurface(nmg_State * state);
    ///rebuild a few strips of the surface, based on dataset->range_of_change,
    ///rebuilds whole surface if graphics->causeGridRedraw was called. 
    int rebuildInterval(nmg_State * state);

    ///only recolor the surface, don't re-calc vertices or normals
    int recolorSurface();

    //Region managing functions
    /// Return index for new region used as parameter for other 
    /// region managing functions. 
    int createNewRegion();
    void destroyRegion(int region);
    nmg_SurfaceRegion* getRegion(int region);

    void setRegionControl(BCPlane *control, int region);
    void setMaskPlane(nmg_SurfaceMask* mask, int region);
    void deriveMaskPlane(float min_height, float max_height, int region);
    void deriveMaskPlane(float center_x, float center_y, float width,float height, 
                         float angle, int region);
    void deriveMaskPlane(int region);

    //Appearance mutator functions
    void setAlpha(float alpha, int region);
    void setFilledPolygons(int enable, int region);
    void setTextureDisplayed(int display, int region);
    void setTextureMode(int mode, int region);
    void setTextureTransformMode(int mode, int region);
    void setStride(unsigned int stride, int region);

    //Behavior associates
    void associateAlpha(vrpn_bool associate, int region);
    void associateFilledPolygons(vrpn_bool associate, int region);
    void associateTextureDisplayed(vrpn_bool associate, int region);
    void associateTextureMode(vrpn_bool associate, int region);
    void associateTextureTransformMode(vrpn_bool associate, int region);
    void associateStride(vrpn_bool associate, int region);

private:
    nmb_Dataset *d_dataset;
    int d_numSubRegions; ///< number of valid regions in d_subRegions
    int d_maxNumRegions; ///< currently allocated length of d_subRegions
    nmg_SurfaceRegion **d_subRegions;
    nmg_SurfaceRegion *d_defaultRegion;
    unsigned int d_initHeight, d_initWidth;
    int d_display_lists_in_x;

    ///Helper function
    int updateDefaultMask();

    /// Called whenever data might have changed, once each gfx loop.
    //int updateMask(int low_row, int high_row, int region);

};

#endif

