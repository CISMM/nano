/* The nanoManipulator and its source code have been released under the
 * Boost software license when nanoManipulator, Inc. ceased operations on
 * January 1, 2014.  At this point, the message below from 3rdTech (who
 * sublicensed from nanoManipulator, Inc.) was superceded.
 * Since that time, the code can be used according to the following
 * license.  Support for this system is now through the NIH/NIBIB
 * National Research Resource at cismm.org.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/*===3rdtech===
  Copyright (c) 2000 by 3rdTech, Inc.
  All Rights Reserved.

  This file may not be distributed without the permission of 
  3rdTech, Inc. 
  ===3rdtech===*/
#ifndef NMG_GRAPHICS_RENDER_CLIENT_H
#define NMG_GRAPHICS_RENDER_CLIENT_H

#include <nmb_TimerList.h>

#include "nmg_GraphicsRemote.h"
#include "nmg_RenderClientImpl.h"

// Acts as a nmg_Graphics_Remote sending commands to a nmg_RenderServer.
// Also (mostly) encapsulates an nmg_Graphics_RenderClient_Implementation
// to display data recieved from the RenderServer.

class nmg_Graphics_RenderClient : public nmg_Graphics_Remote {

  public:

    nmg_Graphics_RenderClient (nmb_Dataset * data,
                         const int surfaceColor [3],  // get rid of this
                         vrpn_Connection * inputConnection,
                         RemoteColorMode cMode,
                         RemoteDepthMode dMode,
                         RemoteProjectionMode pMode,
                         int xsize, int ysize,
                         vrpn_Connection * controlConnection,
                         nmb_TimerList * timer = NULL);


    virtual ~nmg_Graphics_RenderClient (void);


    // ACCESSORS


    virtual void setGraphicsTiming (vrpn_bool);
      ///< Only if VRPN_TRUE is passed into this function will graphics
      ///< timing be done.  (Graphics timing doubles network traffic on
      ///< one particular link, although it isn't significant traffic in
      ///< an absolute sense.)

    virtual void getViewportSize(int *width, int * height);
    virtual void getDisplayPosition (q_vec_type &ll, q_vec_type &ul,
                                     q_vec_type &ur);
    virtual void getLightDirection (q_vec_type *) const;
    virtual int getHandColor (void) const;
    virtual int getSpecularity (void) const;
    virtual const double * getSurfaceColor (void) const;

    nmb_Subgrid & rangeOfChange (void);


    // MANIPULATORS


    virtual void mainloop (void);


    // For timing, we need to override any function that issues
    // a causeGridRedraw() so that it also suspends d_timer and
    // sends a timer SN to the server.  Our implementation will
    // get that timer SN back and unblock the corresponding timer.

    virtual void setAlphaSliderRange (float, float);
    virtual void setColorMapName (const char *);
    virtual void setColorMinMax (float, float);
    virtual void setDataColorMinMax (float, float);
    virtual void setOpacitySliderRange (float, float);
    virtual void setContourColor (int, int, int);
    virtual void setContourWidth (float);
    virtual void setTextureTransform (double *);
    virtual void setRulergridAngle (float);
    virtual void setRulergridOffset (float, float);
    virtual void setNullDataAlphaToggle (int);
    virtual void setRulergridScale (float);
    virtual void setRulergridWidths (float, float);
    virtual void setSpecularity (int);
    virtual void setDiffusePercent (float);
    virtual void setSurfaceAlpha (float, int region = 0);
    virtual void setSpecularColor (float);
    virtual void setTesselationStride (int, int region = 0);
    virtual void setTextureMode (TextureMode, TextureTransformMode, int region = 0);
    virtual void setTextureScale (float);

    virtual void setViewTransform (v_xform_type);


  protected:

    nmg_Graphics_RenderClient_Implementation d_implementation;

    void blockTimer (void);
    nmb_TimerList * d_timer;

    vrpn_bool d_timeGraphics;

    vrpn_int32 d_timerSN_type;
};

#endif  // NMG_GRAPHICS_RENDER_CLIENT_H

