2002-01-04  Aron Helser  <helser@cs.unc.edu>

	* globjects.ch (move_cross_section): changed to handle full width,
	limit to two cross sections.
	(draw_cross_section): same
	* nmg_Graphics.h (move_cross_section): changed to handle full
	width
	* nmg_GraphicsImpl.C (positionCrossSection): same
	(positionCrossSection): new
	* nmg_State.Ch: limit to 2 cross sections
	
2001-12-20  David Marshburn  <marshbur@cs.unc.edu>

	* nmGraphics.dsp:  removed references to ImgFormat

2001-12-20  David Marshburn  <marshbur@evans.cs.unc.edu>

	* Makefile:  remove ImgFormat from USES_LIBS

2001-12-19  David Marshburn  <marshbur@evans.cs.unc.edu>

	* nmg_Graphics.Ch: (createScreenImage) changed the signature
	to accept a string arg "type" rather than an arg of type 
	ImageType
	(encode_createScreenImage) same, and changed the vrpn encoding
	(decode_createScreenImage) same, and changed the vrpn decoding
	* nmg_GraphicsImpl.Ch:  remove references to ImageType
	* nmg_GraphicsRemote.Ch:  same
	* nmg_GraphicsTime.Ch:  same
	* globjects.c: remove compiler warning on the SGI

2001-12-18  Aron Helser  <helser@cs.unc.edu>

	* globjects.c (clear_world_modechange): handle USER_CROSS_SECTION_MODE
	(init_world_modechange): handle USER_CROSS_SECTION_MODE
	(move_cross_section): new
	(draw_cross_section): new
	* nmg_Graphics.h (positionCrossSection): new
	* nmg_GraphicsImpl.Ch (positionCrossSection): new, calls
	move_cross_section 
	* nmg_State.Ch: cross section enabled variables. 

2001-12-18  David Marshburn  <marshbur@evans.cs.unc.edu>

	* globjects.c: remove some compiler warnings on the SGI, remove
	commented out code, some code clean-up
	* nmg_Graphics.C: same
	* nmg_GraphicsImpl.C: same
	* nmg_GraphicsRemote.C: same
	* nmg_ImageDisplayProjectiveTexture.C: same
	* nmg_State.C: same

2001-11-27  Adam Seeger  <seeger@cs.unc.edu>
	
	* nmg_ImageDisplayProjectiveTexture.Ch: new files to provide a more
	abstract interface to the alignment texture

2001-11-25  Aron Helser  <helser@cs.unc.edu>

	* nmg_GraphicsImpl.Ch (positionWindow): new, positions the Glut
	window. 
	* nmg_Graphics.h (positionWindow): new

2001-10-29  David Marshburn  <marshbur@evans.cs.unc.edu>

	* export_scene.C (export_scene_to_openNURBS): changed call to
	build_mesh to include nmg_State param.

2001-10-23  Adam Seeger  <seeger@cs.unc.edu>

	* nmg_GraphicsImpl.C (constructor): changed some error print statements
	* nmg_SurfaceRegion.C (init): fixed a memory bug (was using free() on 
	an array allocated using new)
	
2001-10-19  Aron Helser  <helser@cs.unc.edu>

	* surface_util.ch: new, utility functions relating to rendering
	the surface

	* nmg_State.Ch: new, state object encapsulates all formerly global
	variables. Passed as argument to any function that needs to change
	state

	* all: many, many functions changed to take state object as
	argument. 

	* graphics_globals.ch: removed, contents in nmg_State.Ch
	* graphics.ch: removed, contents in surface_util, openGL

2001-10-15  Aron Helser  <helser@cs.unc.edu>

	* nmg_Graphics.h: Remove obsolete Pxfl related messages, adhesion
	slider, compliance slider, friction slider, bumpmap name, hatchmap
	name, patternmap name.
	* nmg_GraphicsImpl.Ch: same 
	* nmg_GraphicsRemote.Ch: same 
	* nmg_GraphicsTimer.Ch: same 
	* nmg_RenderClient.Ch: same 

2001-10-12  David Marshburn  <marshbur@cs.unc.edu>

	* nmg_Graphics.h: added "#pragam set woff 3201" for sgi only
	in order to remove a ton of warnings about unreferenced
	parameters.  Also reset woff 3201 at end of file.

2001-10-12  Aron Helser  <helser@cs.unc.edu>

	* openGL.ch: move measure_materials functions here, move surface
	related funtions to Surface and SurfaceRegion
	* spm_gl.ch: renamed surface_strip_create.ch
	* surface_strip_create.ch: new
	Several: get rid of min/maxColor in favor of surfaceColor
	* nmg_Graphics.h: get rid of abstract specifications, add empty
	function bodies for everything. Now Remote, Timer subclasses don't
	have to be updated until needed. 

2001-09-25  David Marshburn  <marshbur@cs.unc.edu>

	* chartjunk.c: removed references to USER_MEAS_MOVE_MODE (unused)
	* globjects.c: same

2001-09-18  Aron Helser  <helser@cs.unc.edu>

	* nmg_GraphicsImpl.C (createRealignTextures): use glPixelMap to
	let GL handle the work of using a colormap, results in faster
	updates. 
	(causeGridReColor): Added call to g_surface->recolorSurface()

	* nmg_Surface.Ch (recolorSurface): new function
	* nmg_SurfaceRegion.Ch (recolorRegion): new function, sets flag
	(rebuildRegion): Watch for recolor flag, handle during rebuild
	(rebuildInterval): same

2001-08-20  Adam Seeger  <seeger@cs.unc.edu>

	* nmg_GraphicsImpl.C: replaced two instances of 
	exit(V_ERROR) with exit(-1) because the v.h #define/#undef of 
	V_ERROR now seems to conflict with a microsoft windows header although
	I can't see why given what is in v.h
	* Makefile: added dependency on nmMP through nmb_Device
	* nmg_SurfaceRegion.C (setTexture): added a comment suggesting future
	work

2001-08-07  David Marshburn  <marshbur@cs.unc.edu>

	* globjects.c: added "region select" to the list MODE_NAMES

2001-08-06  Nathan Conrad  <conrad@cs.unc.edu>

	* chartjunk.c: Changed "Scale Up Mode" to "Scale Mode"

2001-08-05    <marshbur@cs.unc.edu>

	* globjects.c: removed calls to add/remove the collaborators hand to 
	the vir_world funclist during init_world_modechange and 
	clear_world_modechange.  This keeps the collaborator's hand from 
	showing when one collaborator is in private state.

2001-08-01  Aron Helser  <helser@cs.unc.edu>

	* nmg_GraphicsImpl.C (positionRegionBox): Respond to REG_DEL state
	from interaction.c

	* nmg_GraphicsImpl.h: cleanup
	
	* nmg_Globals.h (RegMode): Added "REG_DEL" so interaction.c could
	delete region. 

	* nmg_Surface.C: cleanup, doxygen method comments.
	* nmg_SurfaceRegion.C: same
	* nmg_SurfaceMask.C: same
	
2001-07-30  Aron Helser  <helser@cs.unc.edu>

	* nmg_SurfaceMask.C (nmg_SurfaceMask): Initialization change so
	initial region mode box is empty instead of whole surface. 

	* nmg_GraphicsImpl.C (positionRegionBox): Only re-calculate region
	when user is done moving box icon - communicated from UI with
	highlight mode enum changes. 

	* nmg_Globals.h (RegMode): Add members to region box highlight
	mode enum. 

	* globjects.c (make_region_box): Follow changes in highlight
	mode. 

	* nmg_SurfaceRegion.C (VERBOSECHECK): Removed FLOW conditional.


2001-07-26  Aron Helser  <helser@cs.unc.edu>

	* nmg_GraphicsImpl.C (createRealignTextures): Colormapping
	(setRealignTexturesConversionMap): same
	(setRealignTextureSliderRange): four params
	(createScreenImage): Use ImageMagick to save image files. 

	* graphics_globals.ch: ColorMap -> nmb_ColorMap, registration
	texture colormaps. 
	* nmg_Graphics.Ch (setRealignTextureSliderRange): four params
	* nmg_GraphicsRemote.Ch: same
	* nmg_GraphicsTimer.Ch: same
	* nmg_RenderClientImpl.C: param change
	* spm_gl.c: ColorMap -> nmb_ColorMap

2001-07-24  David Marshburn  <marshbur@tungsten-cs.cs.unc.edu>

	* nmg_SurfaceRegion.C 
	(RestoreBuildState): removed restoration of g_just_color
	(SaveBuildState): removed save of g_just_color.  These fix the slowness
	of nano when a colormap is applied.

2001-07-13  David Marshburn  <marshbur@evans.cs.unc.edu>

	* nmg_SurfaceRegion.C: initialized d_list_base and d_num_lists.  This
	correct the disappearance of the chartjunk text on the SGIs (because 
	they weren't initialized, we were accidentally deleting all the 
	display liststhe first time the lists were rebuilt).

	* openGL.c: removed a bunch of old commented-out code and print 
	statements

2001-07-12  Adam Seeger  <seeger@cs.unc.edu>

	* nmg_GraphicsImpl.C: removed some compiler warnings
	* nmg_Surface.C (getDataset): new function for use by nmg_SurfaceRegion
	* nmg_SurfaceRegion.C (setTexture): inserted a glScale to compensate
	for the z scale of the height plane so that textures show up on the
	same place on the surface regardless of what z scale is set
	(this wasn't an issue until I looked at textures projected in
	directions other than from straight above.)

2001-06-17  Tom Hudson  <hudson@cs.unc.edu>

	* graphics_globals.h : reorder #includes, fix brackets.

2001-05-22  Aron Helser  <helser@cs.unc.edu>

	* nmg_SurfaceMask.C (quadMasked): Changed "+1" to "+stride", fixed
	gaps in surface when using region mode. 

	* spm_gl.c (setupMaterials): Moved calls to glFrontFace here, as
	their argument never changed. 

2001-05-21  Jason Clark  <jclark@cs.unc.edu>

	* nmg_Surface.C: Changes to support more intelligent rebuilding
	approach.

	* nmg_SurfaceMask.hC: Added support for a more intelligent
	approach to determining when the mask has changed and subsequently
	when to rebuild the region/surface.

	* nmg_SurfaceRegion.hC: Changed the meaning of some functions and
	added a few new ones to reduce the number of times that the
	region needs to be rebuilt.  Now there are checks for idempotent
	changes.

2001-05-18  Aron Helser  <helser@cs.unc.edu>

	* nmg_SurfaceMask.C (deriveMask): Corrected check for grid coord
	inside region box.

	* globjects.hc (spm_render_mark): Moved here, to be with other
	code that draws objects. 
	(replaceDefaultObjects): unchanged, just moved in file. 

	* spm_gl.hc (setupMaterials): Moved here, included state that
	doesn't change. 
	Doxygen comments. 

	* graphics.hc (setupMaterials): moved to spm_gl

2001-05-18  Jason Clark  <jclark@cs.unc.edu>

	* nmg_Surface.hC: Changed terminology from locking, to associating
	for graphics properties.  This more closely represents the concept
	of what is happening.

	* nmg_SurfaceRegion.hC: Same

	* nmg_GraphicsImpl.hC: Same

	* nmg_GraphicsNull.hC: Same

	* nmg_GraphicsTimer.hC: Same

	* nmg_GraphicsRemote.hC: Same

	* nmg_Graphics.hC: Same
	
	* nmg_SurfaceRegion.Ch (deriveMaskPlane): New function to derive based on
	a specified "region" box

	* nmg_SurfaceMask.C (deriveMask): New version of this function to
	perform the derivation based on a region box.

	* nmg_SurfaceMask.Ch: Have each nmg_SurfaceMask contain another
	nmg_SurfaceMask that represents only the mask created from the
	last automatic derivation.  This is to ensure that we can
	acurrately undo ONLY that mask portion when we re-derive.

	* nmg_Surface.Ch (deriveMaskPlane): New function to derive based on
	a specified "region" box

	* nmg_GraphicsImpl.C (positionRegionBox): Tied this function into
	the Surface class.  Everything outside the region is rendered at
	lowest stride, and everything inside is rendered at the user
	selected stride. 

2001-05-17  Jason Clark  <jclark@cs.unc.edu>

	* spm_gl.c: Same as below.  Sticky tags forced it not to take.

	* globjects.c: Removed global state guardian object.

2001-05-16  Jason Clark  <jclark@cs.unc.edu>

	* openGL.c: 1 too many }s

	* nmg_Graphics.C: a vrpn_buffer was in the wrong place

	* openGL.c: Make sure that Texture Blending is only attempted on
	SGI's.  This fixes the crash bug that Adam found.

	In the old way of doing things, the check for a very small plane
	was only done for a full rebuild, and I guess this was okay.  Now
	it was causing problems when the surface is rebuilt incrementally
	because that check was not in that branch of the code.  Put the
	check in.

	* nmg_GraphicsImpl.C: I had accidentally removed the updating of
	the internal storage of the size of the plane in
	causeGridRebuild.  This resulted in a situation where the surface
	was being completely rebuilt every frame.  This was the culprit of
	the severe speed slow down.

	* nmg_SurfaceRegion.C: Use parent rederive function

	* nmg_SurfaceMask.C (quadMasked): Made this a bit more efficient

	* nmg_Surface.Ch (rederive): New function that regions call when
	they realize that they need to rederive their mask plane.  This is
	done through a call to the parent Surface class to ensure that any
	other regions that would get affected by the call are in fact
	updated.  This fixes a bug with stream files not updating
	correctly.

	* graphics_globals.ch: Removed global state guardian object

	* nmg_StateGuardian.ch: Classes removed as I created them
	hurriedly and they are currently unneccessary. (Although I believe
	something like them would be worth while)

2001-05-15  Adam Seeger  <seeger@cs.unc.edu>

	* nmg_StateGuardian.C (nmg_StateGuardian::nmg_StateGuardian):
	added initialization of d_1dTextureEnabled, d_2dTextureEnabled and
	d_3dTextureEnabled
	* nmg_SurfaceRegion.C (nmg_SurfaceRegion::nmg_SurfaceRegion):
	added initialization of d_VertexArrayDim, d_num_lists
        (~nmg_SurfaceRegion and init): changed d_vertexPtr to be allocated with
	new only instead of a mixture of new and malloc

2001-05-13  Jason Clark  <jclark@cs.unc.edu>

	* spm_gl.c: Use const references to the nmb_PlaneSelection and
	nmb_Interval classes passed into the functions to avoid copy constructors.

	* openGL.c: Use const references to the nmb_PlaneSelection and
	nmb_Interval classes passed into the functions to avoid copy constructors.

	* nmg_SurfaceRegion.C: Support for stream or live experiments that
	was missing.  Still needs some work.

	* nmg_SurfaceMask.C (init): Bug fix for segfault when closing a file.

	* nmg_Surface.C: Some support for stream or live experiments that was
	missing.  Still needs some work.

2001-05-12  Aron Helser  <helser@cs.unc.edu>

	* spm_gl.c (spm_render_mark): Partially transparent mod markers.
	(spm_set_icon_materials): Allow transparency, enable GL_BLEND
	(spm_set_measure_materials): same

	* graphics.c (setup_lighting): Choose local or infinite viewer. 
	One sided lighting- faster, doesn't mess up NVidia Quadro2 Pro

	* graphics_globals.ch (g_local_viewer): new flag

	* nmg_Graphics.h (setLocalViewer): Choose local or infinite viewer
	* nmg_Graphics_Implementation.Ch (setLocalViewer): same
	* nmg_GraphicsRemote.h (setLocalViewer): same
	* nmg_GraphicsTimer.Ch (setLocalViewer): same

2001-05-12  Jason Clark  <jclark@cs.unc.edu>

	* spm_gl.c: Use new SurfaceMask class instead of a plane in the
	grid to control masking.

	* openGL.c: Minor modifications to support new approach.

	* nmg_SurfaceRegion.C: A region controls the graphics state for
	some sub-section of the surface.  Allowing the display to vary
	across it.   A surface region contains a mask that controlls what
	area of the data it controlls.

	* nmg_SurfaceMask.C: A surface mask defines the region of the data
	in the currently viewed height plane that a particular region is
	affective over.  Masks can be added and removed from each other,
	to ensure meshing at the various regions.   A mask is just like a
	plane, so the region can be disconnected.

	* nmg_Surface.C: This is the new surface class.  A surface has a
	default region (which, initially, is what you normally see in the
	NanoManipulator).  You can create more regions as desired, and for
	each region you can specify whatever you want the graphics
	settings to be.  This provides a flexible method for viewing the
	surface in whatever manner you wish.

	* nmg_Graphics.C: New functions for "locking" graphics state in
	sub-regions away from the default region on a surface.  Also
	modified some commands to send the region info that the surface
	needs.  More will need to be modified as we move the graphics
	functionality completely over to this surface-region based
	approach. (Also modified all sub-classes appropriately)

	* graphics.h: New setFilled function

	* graphics.c (setFilled): Broke out the polygon filled setting as
	a seperate function

2001-05-11  Aron Helser  <helser@cs.unc.edu>

	* nmg_GraphicsImpl.Ch (positionRubberCorner): Added parameter to
	allow highlight when changing scan area. 
	(positionRegionBox): new
	* nmg_Graphics.Ch: same
	* nmg_GraphicsRemote.Ch: same
	* nmg_GraphicsTimer.Ch: same

	* nmg_Globals.h: enum for highlight param to positionRubberCorner
	and positionRegionBox
	* globjects.c (make_rubber_corner): new central target, highlight
	parameter. 
	(make_region_box): new, similar to make_rubber_corner, adds
	rotation. 
	(make_selected_region_marker): removed, obsolete. 
	* chartjunk.c (x_y_width_display): Display planned scan region
	size. 
	(mode_display): handle new mode, USER_REGION_MODE

2001-04-30  Jason Clark  <jclark@cs.unc.edu>

	* globjects.c: Interface text changing

2001-04-17  Adam Seeger  <seeger@cs.unc.edu>

	* nmg_GraphicsImpl.hC (clearSEMDataTexture) : new function to
	clear the texture array so parts that don't contain the current image 
	don't show up
        Also, various small changes to alter the appearance of the SEM texture

2001-03-29  Adam Seeger  <seeger@cs.unc.edu>

        * nmg_GraphicsImpl.C: changed use of nmb_Image::border() to use the
        more general nmb_Image::borderMinX(), borderMaxX(), borderMinY(),
        borderMaxY()
        * nmg_Visualization.C (setTexture): added x_offset and y_offset
        calculations to translate the texture coordinates if the texture
        has padding on all sides of the image

2001-03-23  Jason Clark  <jclark@cs.unc.edu>

	* openGL.c: Fix colormap weirdness

	* nmg_Visualization.h: setUpdateAndTodo modification to fix
	z-scale change having to cause grid rebuild to affect second pass.

	* nmg_Visualization.C: Bug fixes for colomap weirdness and to not
	need to do a grid rebuild when changing the z-scale.

	* nmg_GraphicsImpl.C (chooseVisualization): Remove call to causeGridRebuild.

2001-03-14  Jason Clark  <jclark@cs.unc.edu>

	* spm_gl.c (spm_x_strip_masked): Fixed memory stomping bug in rare cases.

2001-03-13  Jason Clark  <jclark@cs.unc.edu>

	* nmg_Visualization.C: See below

	* nmg_GraphicsTimer.h: See below

	* nmg_GraphicsTimer.C: See below
	
	* nmg_GraphicsRemote.h: See below

	* nmg_GraphicsRemote.C: See below

	* nmg_GraphicsNull.h: See below

	* nmg_GraphicsNull.C: See below

	* nmg_GraphicsImpl.h: See below

	* nmg_GraphicsImpl.C: See below

	* graphics_globals.h: See below

	* graphics_globals.c: See below

	* nmg_Graphics.C: See below
	
	* nmg_Graphics.h: Visualization texture used to use Rulergrid
	scaling variable, for speed of testing and I just am now getting
	aroundt to changing it.  Broke that so that it is scaled seperately.
	
2001-03-02  Adam Seeger  <seeger@cs.unc.edu>

	* Makefile : added glut as external lib

2001-02-20  Tom Hudson  <hudson@cs.unc.edu>

	* nmg_Visualization.C : add new VERBOSE messages.

	* graphics_globals.h (g_config_enableUber) : new variable.
	* graphics_globals.c (g_config_enableUber) : same;  defaults to 1.
	* openGL.c : move Ubergraphics #includes and extern
	declaration of UTree World to top of file.
	(draw_world) : check value of g_config_enableUber before
	executing World.Do(&URender::Render).
	* nmg_GraphicsImpl.h (enableUber) : new function.
	* nmg_GraphicsImpl.C (enableUber) : same.
	(nmg_Graphics_Implementation::nmg_Graphics_Implementation) :
	delete dead code.
	


2001-02-17  Tom Hudson  <hudson@cs.unc.edu>

	* graphics.h (getViewportSize) : new function.
	* graphics.c (getViewportSize) : same.
	* chartjunk.c (control_display) : call getViewportSize instead of
	nmg_Graphics_Implementation::getViewportSize.
	* graphics_globals.h (g_displayIndexList) : new pointer.
	* graphics_globals.c (g_displayIndexList) : same.
	* nmg_GraphicsImpl.C (constructor) : initialize g_displayIndexList
	to point to d_displayIndexList - what a risky hack.

	* globjects.c : remove #include "nmg_Globals.h" as unnecessary.

2001-02-09  Jason Clark  <jclark@cs.unc.edu>

	* openGL.c (build_list_set): Support for new strip functions in spm_gl

	* spm_gl.c: Modification to ensure that the work done for masking
	is only done when requested, also to ensure that the mask plane is
	not accessed when it isn't needed or there.

	* nmg_Visualization.C: Two new functions ensureMaskPlane and
	ensureTransparentPlane created to fix timing issue of when those
	planes are created that was causing problems when opening and
	closing files one the program was running

	* nmg_Graphics.h: Support for new viz plane
	* nmg_Graphics.C: same
	* nmg_GraphicsImpl.h: same
	* nmg_GraphicsImpl.C: same
	* nmg_GraphicsNull.h: same
	* nmg_GraphicsNull.C: same
	* nmg_GraphicsRemote.h: same
	* nmg_GraphicsRemote.C: same
	* nmg_GraphicsTimer.h: same
	* nmg_GraphicsTimer.C: same

	* graphics_globals.c: See below

	* graphics_globals.h: New viz plane to determine which plane is
	controlling how visualizations are being determined.

2001-01-19  Jason Clark  <jclark@cs.unc.edu>

	* spm_gl.c (specify_vertexArray): Bug fix. See below

	* openGL.c (build_list_set): Bug fix.  See below

	* nmg_Visualization.C (getBaseSurface): New function
	Bug fix of second pass rendering "collapsing" occasionally when
	stride changed.  Also moved all accessing of the surface, the
	global variable vertexptr, to be through visualization classes.

	* nmg_GraphicsImpl.C: Fix for visualizations so that it does the
	right thing when the height plane is changed.
	(computeRealignPlane): Calls visualizations getBaseSurface to get
	a surface to use for texture calculations.
	(setTextureCenter): See above

	* graphics_globals.h: Removed no longer needed externed vertexptr variable.

2001-01-15  Jason Clark  <jclark@cs.unc.edu>

	* spm_gl.c (specify_vertexArray): Vertex arrays are now standard
	in GL1.1, so modified this method to use the standard calls
	instead of the extensions.  This works on PC's too now.
	(spm_x_strip): Heavy modifications to allow a mask plane to be set
	that specifies whether to draw or not to draw vertices.  The mask
	plane can be "inverted" to allow multi-pass methods to fill in the
	undrawn areas, and care is taken to make sure that drawing in two
	passes at the SAME STRIDE does not result in cracks or overlaps.

	* openGL.c: Modifications to most of the functions controlling the
	display lists to remove dependencies on global variables.
	Necessary to allow multi-pass methods, or multiple surfaces. 
	(determine_GL_capabilities): New function to
	encapsulate all requests to determine what GL can do on the
	machine currently being run on.  Should be called only once, and
	set all the variables indicating what is available and what is not.
	(draw_world): Makes calls to control display of the surface
	through the visualization class

	* nmg_Visualization.h: New visualization class that is designed to
	be a wrapper around all calls into openGL.c or spm_gl.c that
	control the grids.  A better name may have been surface, as that
	is what the class is controlling, the display of the surface.
	Allows for multi-pass build up of the surface, or could allow for
	multiple surfaces to be viewed at once.
	
	* nmg_Visualization.C: See above

	* nmg_GraphicsImpl.h: New functions for supporting visualizations

	* nmg_GraphicsImpl.C 
	(nmg_Graphics_Implementation): Calls new
	determine_GL_capabilities method.  Initialize visualization variables.
	(makeAndInstallVizImage): New function for visualization texture
	(causeGridRebuild): Changed to call visualization object for
	rebuilding the grids, instead of calling those functions directly.
	(setTransparentPlaneName): New function
	(setMaskPlaneName): New function

	* nmg_Graphics.h: New functions and message types for supporting
	visualizations and new planes, transparent and mask.

	* nmg_Graphics.C (nmg_Graphics): New messages types for
	visualizations

	* graphics_globals.h: See below

	* graphics_globals.c: Two new planes, transparent and mask, and
	the globals needed for the new visualization code

	* graphics.h: New function header for buildVisuzalizationTexture

	* graphics.c (buildVisualizationTexture): New function for
	visualization textures.

2001-01-03  Aron Helser  <helser@cs.unc.edu>

	* nmg_GraphicsImpl.C (setOpacitySliderRange): Switch to
	causeGridReColor
	(setNullDataAlphaToggle): same

	* spm_gl.c (describe_gl_vertex): Clean up color/alpha specification, 

2000-12-20  Aron Helser  <helser@cs.unc.edu>

	* all: 3rdtech merge into main trunk. 

2000-12-05  Kwan Torrich Skinner  <skinner@cs.unc.edu>

	* globjects.c : #include "nmm_Types.h"
	(clear_world_modechange) : new parameter to function and new code to handle
	icon settings for optimize now mode.
	(init_world_modechange) : same.
	(make_rubber_corner) : added alpha channel to select box icon.
	* globjects.h (clear_world_modechange) : parameter update.
	(init_world_modechange) : same.
	* nmg_Graphics.[C,h] : (encode_setUserMode) : new parameter for optimize now.
	(decode_setUserMode) : same.
	* nmg_GraphicsImpl.[C,h] : 
	(nmg_Graphics_Implementation::nmg_Graphics_Implementation) : parameter update
	for call to init_world_modechange.
	(nmg_Graphics_Implementation::enableChartjunk) : parameter update for call to
	clear_world_modechange.
	(nmg_Graphics_Implementation::setUserMode) : parameter update for
	optimize_now mode.
	(nmg_Graphics_Implementation::handle_setUserMode) : same.
	* nmg_GraphicsImpl.[C,h] (setUserMode) : same.
	* nmg_GraphicsRemote.[C,h] (setUserMode) : same.
	* nmg_GraphicsTimer.[C,h] (setUserMode) : same.
	* spm_gl.c (spm_set_icon_materials) : enabled blending.
	
	
2000-11-29  Adam Seeger  <seeger@cs.unc.edu>

        * nmg_GraphicsImpl.C (initializeTextures) : initializes the texture
        matrix for SEM data to be RGB instead of RGBA (on PC only) in order 
        to fix a weird problem at the texture border (this is probably
        graphics-card-specific and it doesn't limit us at the moment because
        we're not using the alpha channel)

2000-11-29  Adam Seeger  <seeger@cs.unc.edu>

	* graphics.c (buildRemoteRenderedTexture) : added initialization of
	the new variables g_tex_image_offsetx and g_tex_image_offsety 
	(this has to do with displaying a texture that includes a border)
	* graphics_globals.c,h : commented out sem_data and realign_data arrays
	since we now display these textures directly from the original image
	data instead of copying them into separate arrays
 	Added g_tex_image_offsetx,y variables
	* nmg_GraphicsImpl.C (makeAndInstallRulerImage) : adds init. of 
	g_tex_image_offsetx, g_tex_image_offsety for rulergrid
	(createRealignTextures) : handles images with different pixel types now
        	float, ubyte, ushort
	(initializeTextures) : changed sem texture blend function from
	modulate to blend and had to increase maximum sem texture size 
	from 512 to 1024(!) to accomodate border so we are still limited to
	displaying 400x512 sem images since the next size up is 800x1024
        (unless we wanted to chop off the edges)
	(loadRawDataTexture) : adds a nice blue tint to the texture - hard
	coded at the moment but this could be hooked up to controls - one
	would control opacity (overall luminance of the glPixelTransfer
        color factor since we are using the GL_BLEND texture function) 
	and another would be for the color (r:g:b ratios); this seems
	to be a reasonable way to do something like a constant alpha value 
	without using an alpha channel
	* openGL.c (draw_world) : stuff to handle x,y offset of the real data 
	in the texture image so we can have a border - adds a correction to
	the texture transform to deal with this translation

2000-11-1  Tom Hudson  <hudson@cs.unc.edu>

	* chartjunk.c : removed refernces to USE_VRPN_MICROSCOPE

2000-10-04  Tom Hudson  <hudson@cs.unc.edu>

	* nmg_RenderClient.C (blockTimer): remove invalid error message

2000-10-03  Kwan Torrich Skinner  <skinner@cs.unc.edu>

	* globjects.c (make_collab_hand_icon): fixed invscale hand
	icon scale factor so that it stays the same size when scaling in
	and out.
	
2000-10-02  Adam Seeger  <seeger@cs.unc.edu>

	* nmg_GraphicsImpl.C (loadRawDataTexture): this is only used
	for SEM data at the moment; this generalizes it to handle data
	with different types (float and short in addition to byte)

2000-10-02  Jason Clark  <jclark@cs.unc.edu>

	* nmg_RenderServerStrategies.C (render): Call base strategy class
	render to ensure that nmg_RenderServer::mainloop is called.

2000-10-02  Tom Hudson  <hudson@cs.unc.edu>

	* nmg_RenderClient.C : new data member d_timeGraphics
	(setGraphicsTiming) : new function
	(blockTimer) : checks d_timeGraphics before executing

2000-10-01  Jason Clark  <jclark@cs.unc.edu>

	* graphics.c (buildRemoteRenderedTexture) : Changed
	RULERGRID_TEX_ID to REMOTE_DATA_TEX_ID for consistency

	* nmg_RenderServer.C: Added cloud strategy to constructor

	* nmg_RenderServer.h: Add friend class of the
	nmg_RenderServer_Strategy so that the strategies have a way of
	updating the pixel buffer without exposing that to everyone

	* nmg_RenderClient.C: Added needed accessors that simply pass the
	request to the nmg_Graphics_RenderClient_Implementation object.

	* nmg_RenderClient.h: same

	* nmg_Graphics.h: Added new option to enum RemoteColorMode of
	CLOUDMODEL_COLORS

	* nmg_RenderServerStrategies.C: Source file for the render server
	strategies.  These were broken out of nmg_RenderServer.h. Actually
	done by Tom, but I am committing them.

	* nmg_RenderServerStrategies.h: Header file for the render server
	strategies.

	* nmg_CloudTexturer.C: Source file for new class for "Cloud"
	rendering. Cloud rendering is based on empirical observations of
	clouds from an airplane.

	* nmg_CloudTexturer.I: Inline file for new class for "Cloud" rendering

	* nmg_CloudTexturer.h: Header file for new class for "Cloud" rendering

2000-09-14  Adam Seeger  <seeger@cs.unc.edu>

	* nmg_GraphicsImpl.C (createRealignTextures) : replaced "CUSTOM"
	colormap conversion code to use a simple greyscale map
        * nmg_GraphicsImpl.C (setRealignTexturesConversionMap) : replaced
        "CUSTOM" with "none"
        * nmg_GraphicsRemote.C (setColorMapName) : replaced "CUSTOM" with
	"none"
	( there's no reason CUSTOM can't be a normal colormap just
	  just like the others so this makes things cleaner)

2000-09-13  Kwan Torrich Skinner <skinner@cs.unc.edu>

	* globjects.c (make_collab_hand_icon) : commented out glScalef().

2000-09-13  Adam Seeger  <seeger@cs.unc.edu>

	* spm_gl.c (describe_gl_vertex) : there was some remaining confusion
	from the merge that I attempted to fix. I believe it mostly had to
	to do with the use of the g_just_color variable and the
	related CauseGridReColor() function. This fixes a bug in which changing
	the colormap plane made the surface partially disappear and look
	nasty where it didn't disappear

2000-09-11  Adam Seeger  <seeger@cs.unc.edu>

	* spm_gl.c (spm_render_mark) : In addition to drawing a line from
	Top to Bottom this now draws a line with a different color 
	which is the reflection about Bottom (the intersection tells you
	where the tip was and the size may be extended in both directions so
	that you can see where the intersection with the surface is even if
	you aren't looking at the surface for the same channel used to 
	set the height of the markers) (I think it looks better at least)

2000-09-01  Adam Seeger  <seeger@cs.unc.edu>

	* nmg_GraphicsImpl.C (nmg_Graphics_Implementation),
	(causeGridRebuild) : removed checks of the g_VERTEX_ARRAY variable
	as was done in thirdtech_branch so that even when we don't use
	the vertex array extension, the arrays can still be used for
	storing calculated normals (I had broken this for the pc version in 
	my previous commit)

2000-08-31  Adam Seeger  <seeger@cs.unc.edu>

	* nmg_GraphicsImpl.C (nmg_Graphics_Implementation) : put back in
	some checks of the g_VERTEX_ARRAY
	* nmg_GraphicsImpl.C (causeGridRebuild) : put back in some checks
	of the g_VERTEX_ARRAY
	* spm_gl.c (describe_gl_vertex) : fixed some stuff that got broken
	in the merge - in particular where the local variable Vertex was
	getting set (it wasn't getting set at all perhaps); now it is set
	both at the beginnning (so all the opacity mapping stuff works) and
	at the end where it gets copied into the vertex array

2000-08-31  Kwan Torrich Skinner  <skinner@cs.unc.edu>

        * all : merged merge-2000-summer-thirdtech code with trunk.

2000-08-30  Adam Seeger  <seeger@cs.unc.edu>

        * Makefile: excludes export_scene.C for VC compile

2000-08-27  Adam Seeger  <seeger@cs.unc.edu>

	* chartjunk.c (scale_display): Changed snprintf back to 
	sprintf to fix compile error on pc (its not as safe but its still
	much better than before)

2000-08-24  Adam Seeger  <seeger@cs.unc.edu>

	* chartjunk.c (scale_display): changed to dynamically allocate 
	the buffer for the message displayed on the screen 
	containing the file name so that really long file names
	don't get cut off. Also, changed sprintf to snprintf so
	we don't print past the end of the buffer just in case.

2000-08-17  Adam Seeger  <seeger@cs.unc.edu>

	* nmg_GraphicsImpl.C (createRealignTextures): changed to look at
	minNonZeroValue instead of minValue

2000-08-14  Jeffrey Juliano  <juliano@cs.unc.edu>

	* export_scene.C (get_view_xform): Read unit system from template.
	(export_scene_to_openNURBS): Perform error-checking on args.
	Write unit system to .3dm file.  Put mesh on a layer.

2000-08-11  Kwan Torrich Skinner  <skinner@cs.unc.edu>

	* all: Merge thirdtech_branch code to trunk.

2000-08-11  Jeffrey Juliano  <juliano@cs.unc.edu>

	* export_scene.C (build_mesh): Fix scaling.
	(compute_view_xform): Factor scale out of rot matrix before
	convering to quat, then handle scale separately.  Handle both grid
	scale factor and model scale factor.  May not do the right thing
	with real datasets, but works with ppm file datasets.

2000-08-11  Jeffrey Juliano  <juliano@cs.unc.edu>

	* export_scene.C (compute_view_xform): Debug messages proving that
	quat lib doesn't do what I thought it was advertising.

2000-08-11  Jeffrey Juliano  <juliano@cs.unc.edu>

	* export_scene.C (build_mesh): Add xform to arg list.  Use xform.
	(build_viewport_from_nano): Remove incorrect q_normalize.
	(compute_view_xform, get_view_xform, export_scene_to_openNURBS):
	Incorporate scale.

2000-08-11  Jeffrey Juliano  <juliano@cs.unc.edu>

	* export_scene.C (get_corners_from_file, compute_view_xform):
	New functions.
	(get_view_xform): Change parameter list. Move a lot of stuff to
	the new functions.
	(export_scene_to_openNURBS): Adjust arguments to get_view_xform.

2000-08-10  Jeffrey Juliano  <juliano@cs.unc.edu>

	* ChangeLog: New file.
	
	* export_scene.C (QuadCorners): New class.
	(write_q_vec): New function.
	(operator <<): Same.
	(rhinoException_to_string): Same.
	(set_quad_corner): Same.
	(get_view_xform): Same.
	(export_scene_to_openNURBS): Add error checking. Call get_view_xform.

2000-08-07  Jeffrey Juliano  <juliano@cs.unc.edu>

	* nmg_GraphicsImpl.C (makeAndInstallRulerImage): Allocate correct
	size array.  `texture-size' is the length of a *side*, not the
	number of array cells.

2000-08-06  Jeffrey Juliano  <juliano@cs.unc.edu>

	* spm_gl.c: Tell emacs to use c++-mode.
	* nmg_GraphicsImpl.C (makeAndInstallRulerImage): Move deine of
	macro `texel' out of funct body, and undef texel after funct body.
	* graphics_globals.c: Tell emacs to use c++-mode.
	* graphics.h (buildAllTextures, makeAndInstallRulerImage): Remove
	delcarations for undefined functions. (They were previously moved
	to nmg_GraphicsImpl.)
	* graphics.c: Change "#define min" to "#define NMG_MIN".
	Change "#define max" to "#define NMG_MAX".
	Remove unused preprocessor macros.
	Adjust (fix) comments.
	Remove macro `vec_cmp' because unused.
	Tell emacs to use c++-mode.
	(createPyramid, makeTexture): Make static (internal linkage).

2000-08-03  Jeffrey Juliano  <juliano@cs.unc.edu>

	* nmg_GraphicsImpl.C (nmg_Graphics_Implementation): clean up

2000-08-02  Jeffrey Juliano  <juliano@evans.cs.unc.edu>

	* nmg_GraphicsImpl.C (makeAndInstallRulerImage): dynamically
	allocate texture array (was hardcoded to 512x512 cells).
	Handle float pt. rounding issues in texture size computation.

2000-08-01  Jeffrey Juliano  <juliano@evans.cs.unc.edu>

	* spm_gl.c (describe_gl_vertex): small speed/clarity optimization.
	Dereference pointer once, cache result in a reference.

	* graphics.h: include just quat.h instead of all of v.h

