2001-01-15  Jason Clark  <jclark@cs.unc.edu>

	* spm_gl.c (specify_vertexArray): Vertex arrays are now standard
	in GL1.1, so modified this method to use the standard calls
	instead of the extensions.  This works on PC's too now.
	(spm_x_strip): Heavy modifications to allow a mask plane to be set
	that specifies whether to draw or not to draw vertices.  The mask
	plane can be "inverted" to allow multi-pass methods to fill in the
	undrawn areas, and care is taken to make sure that drawing in two
	passes at the SAME STRIDE does not result in cracks or overlaps.

	* openGL.c: Modifications to most of the functions controlling the
	display lists to remove dependencies on global variables.
	Necessary to allow multi-pass methods, or multiple surfaces. 
	(determine_GL_capabilities): New function to
	encapsulate all requests to determine what GL can do on the
	machine currently being run on.  Should be called only once, and
	set all the variables indicating what is available and what is not.
	(draw_world): Makes calls to control display of the surface
	through the visualization class

	* nmg_Visualization.h: New visualization class that is designed to
	be a wrapper around all calls into openGL.c or spm_gl.c that
	control the grids.  A better name may have been surface, as that
	is what the class is controlling, the display of the surface.
	Allows for multi-pass build up of the surface, or could allow for
	multiple surfaces to be viewed at once.
	
	* nmg_Visualization.C: See above

	* nmg_GraphicsImpl.h: New functions for supporting visualizations

	* nmg_GraphicsImpl.C 
	(nmg_Graphics_Implementation): Calls new
	determine_GL_capabilities method.  Initialize visualization variables.
	(makeAndInstallVizImage): New function for visualization texture
	(causeGridRebuild): Changed to call visualization object for
	rebuilding the grids, instead of calling those functions directly.
	(setTransparentPlaneName): New function
	(setMaskPlaneName): New function

	* nmg_Graphics.h: New functions and message types for supporting
	visualizations and new planes, transparent and mask.

	* nmg_Graphics.C (nmg_Graphics): New messages types for
	visualizations

	* graphics_globals.h: See below

	* graphics_globals.c: Two new planes, transparent and mask, and
	the globals needed for the new visualization code

	* graphics.h: New function header for buildVisuzalizationTexture

	* graphics.c (buildVisualizationTexture): New function for
	visualization textures.

2001-01-03  Aron Helser  <helser@cs.unc.edu>

	* nmg_GraphicsImpl.C (setOpacitySliderRange): Switch to
	causeGridReColor
	(setNullDataAlphaToggle): same

	* spm_gl.c (describe_gl_vertex): Clean up color/alpha specification, 

2000-12-20  Aron Helser  <helser@cs.unc.edu>

	* all: 3rdtech merge into main trunk. 

2000-12-05  Kwan Torrich Skinner  <skinner@cs.unc.edu>

	* globjects.c : #include "nmm_Types.h"
	(clear_world_modechange) : new parameter to function and new code to handle
	icon settings for optimize now mode.
	(init_world_modechange) : same.
	(make_rubber_corner) : added alpha channel to select box icon.
	* globjects.h (clear_world_modechange) : parameter update.
	(init_world_modechange) : same.
	* nmg_Graphics.[C,h] : (encode_setUserMode) : new parameter for optimize now.
	(decode_setUserMode) : same.
	* nmg_GraphicsImpl.[C,h] : 
	(nmg_Graphics_Implementation::nmg_Graphics_Implementation) : parameter update
	for call to init_world_modechange.
	(nmg_Graphics_Implementation::enableChartjunk) : parameter update for call to
	clear_world_modechange.
	(nmg_Graphics_Implementation::setUserMode) : parameter update for
	optimize_now mode.
	(nmg_Graphics_Implementation::handle_setUserMode) : same.
	* nmg_GraphicsImpl.[C,h] (setUserMode) : same.
	* nmg_GraphicsRemote.[C,h] (setUserMode) : same.
	* nmg_GraphicsTimer.[C,h] (setUserMode) : same.
	* spm_gl.c (spm_set_icon_materials) : enabled blending.
	
	
2000-11-29  Adam Seeger  <seeger@cs.unc.edu>

        * nmg_GraphicsImpl.C (initializeTextures) : initializes the texture
        matrix for SEM data to be RGB instead of RGBA (on PC only) in order 
        to fix a weird problem at the texture border (this is probably
        graphics-card-specific and it doesn't limit us at the moment because
        we're not using the alpha channel)

2000-11-29  Adam Seeger  <seeger@cs.unc.edu>

	* graphics.c (buildRemoteRenderedTexture) : added initialization of
	the new variables g_tex_image_offsetx and g_tex_image_offsety 
	(this has to do with displaying a texture that includes a border)
	* graphics_globals.c,h : commented out sem_data and realign_data arrays
	since we now display these textures directly from the original image
	data instead of copying them into separate arrays
 	Added g_tex_image_offsetx,y variables
	* nmg_GraphicsImpl.C (makeAndInstallRulerImage) : adds init. of 
	g_tex_image_offsetx, g_tex_image_offsety for rulergrid
	(createRealignTextures) : handles images with different pixel types now
        	float, ubyte, ushort
	(initializeTextures) : changed sem texture blend function from
	modulate to blend and had to increase maximum sem texture size 
	from 512 to 1024(!) to accomodate border so we are still limited to
	displaying 400x512 sem images since the next size up is 800x1024
        (unless we wanted to chop off the edges)
	(loadRawDataTexture) : adds a nice blue tint to the texture - hard
	coded at the moment but this could be hooked up to controls - one
	would control opacity (overall luminance of the glPixelTransfer
        color factor since we are using the GL_BLEND texture function) 
	and another would be for the color (r:g:b ratios); this seems
	to be a reasonable way to do something like a constant alpha value 
	without using an alpha channel
	* openGL.c (draw_world) : stuff to handle x,y offset of the real data 
	in the texture image so we can have a border - adds a correction to
	the texture transform to deal with this translation

2000-11-1  Tom Hudson  <hudson@cs.unc.edu>

	* chartjunk.c : removed refernces to USE_VRPN_MICROSCOPE

2000-10-04  Tom Hudson  <hudson@cs.unc.edu>

	* nmg_RenderClient.C (blockTimer): remove invalid error message

2000-10-03  Kwan Torrich Skinner  <skinner@cs.unc.edu>

	* globjects.c (make_collab_hand_icon): fixed invscale hand
	icon scale factor so that it stays the same size when scaling in
	and out.
	
2000-10-02  Adam Seeger  <seeger@cs.unc.edu>

	* nmg_GraphicsImpl.C (loadRawDataTexture): this is only used
	for SEM data at the moment; this generalizes it to handle data
	with different types (float and short in addition to byte)

2000-10-02  Jason Clark  <jclark@cs.unc.edu>

	* nmg_RenderServerStrategies.C (render): Call base strategy class
	render to ensure that nmg_RenderServer::mainloop is called.

2000-10-02  Tom Hudson  <hudson@cs.unc.edu>

	* nmg_RenderClient.C : new data member d_timeGraphics
	(setGraphicsTiming) : new function
	(blockTimer) : checks d_timeGraphics before executing

2000-10-01  Jason Clark  <jclark@cs.unc.edu>

	* graphics.c (buildRemoteRenderedTexture) : Changed
	RULERGRID_TEX_ID to REMOTE_DATA_TEX_ID for consistency

	* nmg_RenderServer.C: Added cloud strategy to constructor

	* nmg_RenderServer.h: Add friend class of the
	nmg_RenderServer_Strategy so that the strategies have a way of
	updating the pixel buffer without exposing that to everyone

	* nmg_RenderClient.C: Added needed accessors that simply pass the
	request to the nmg_Graphics_RenderClient_Implementation object.

	* nmg_RenderClient.h: same

	* nmg_Graphics.h: Added new option to enum RemoteColorMode of
	CLOUDMODEL_COLORS

	* nmg_RenderServerStrategies.C: Source file for the render server
	strategies.  These were broken out of nmg_RenderServer.h. Actually
	done by Tom, but I am committing them.

	* nmg_RenderServerStrategies.h: Header file for the render server
	strategies.

	* nmg_CloudTexturer.C: Source file for new class for "Cloud"
	rendering. Cloud rendering is based on empirical observations of
	clouds from an airplane.

	* nmg_CloudTexturer.I: Inline file for new class for "Cloud" rendering

	* nmg_CloudTexturer.h: Header file for new class for "Cloud" rendering

2000-09-14  Adam Seeger  <seeger@cs.unc.edu>

	* nmg_GraphicsImpl.C (createRealignTextures) : replaced "CUSTOM"
	colormap conversion code to use a simple greyscale map
        * nmg_GraphicsImpl.C (setRealignTexturesConversionMap) : replaced
        "CUSTOM" with "none"
        * nmg_GraphicsRemote.C (setColorMapName) : replaced "CUSTOM" with
	"none"
	( there's no reason CUSTOM can't be a normal colormap just
	  just like the others so this makes things cleaner)

2000-09-13  Kwan Torrich Skinner <skinner@cs.unc.edu>

	* globjects.c (make_collab_hand_icon) : commented out glScalef().

2000-09-13  Adam Seeger  <seeger@cs.unc.edu>

	* spm_gl.c (describe_gl_vertex) : there was some remaining confusion
	from the merge that I attempted to fix. I believe it mostly had to
	to do with the use of the g_just_color variable and the
	related CauseGridReColor() function. This fixes a bug in which changing
	the colormap plane made the surface partially disappear and look
	nasty where it didn't disappear

2000-09-11  Adam Seeger  <seeger@cs.unc.edu>

	* spm_gl.c (spm_render_mark) : In addition to drawing a line from
	Top to Bottom this now draws a line with a different color 
	which is the reflection about Bottom (the intersection tells you
	where the tip was and the size may be extended in both directions so
	that you can see where the intersection with the surface is even if
	you aren't looking at the surface for the same channel used to 
	set the height of the markers) (I think it looks better at least)

2000-09-01  Adam Seeger  <seeger@cs.unc.edu>

	* nmg_GraphicsImpl.C (nmg_Graphics_Implementation),
	(causeGridRebuild) : removed checks of the g_VERTEX_ARRAY variable
	as was done in thirdtech_branch so that even when we don't use
	the vertex array extension, the arrays can still be used for
	storing calculated normals (I had broken this for the pc version in 
	my previous commit)

2000-08-31  Adam Seeger  <seeger@cs.unc.edu>

	* nmg_GraphicsImpl.C (nmg_Graphics_Implementation) : put back in
	some checks of the g_VERTEX_ARRAY
	* nmg_GraphicsImpl.C (causeGridRebuild) : put back in some checks
	of the g_VERTEX_ARRAY
	* spm_gl.c (describe_gl_vertex) : fixed some stuff that got broken
	in the merge - in particular where the local variable Vertex was
	getting set (it wasn't getting set at all perhaps); now it is set
	both at the beginnning (so all the opacity mapping stuff works) and
	at the end where it gets copied into the vertex array

2000-08-31  Kwan Torrich Skinner  <skinner@cs.unc.edu>

        * all : merged merge-2000-summer-thirdtech code with trunk.

2000-08-30  Adam Seeger  <seeger@cs.unc.edu>

        * Makefile: excludes export_scene.C for VC compile

2000-08-27  Adam Seeger  <seeger@cs.unc.edu>

	* chartjunk.c (scale_display): Changed snprintf back to 
	sprintf to fix compile error on pc (its not as safe but its still
	much better than before)

2000-08-24  Adam Seeger  <seeger@cs.unc.edu>

	* chartjunk.c (scale_display): changed to dynamically allocate 
	the buffer for the message displayed on the screen 
	containing the file name so that really long file names
	don't get cut off. Also, changed sprintf to snprintf so
	we don't print past the end of the buffer just in case.

2000-08-17  Adam Seeger  <seeger@cs.unc.edu>

	* nmg_GraphicsImpl.C (createRealignTextures): changed to look at
	minNonZeroValue instead of minValue

2000-08-14  Jeffrey Juliano  <juliano@cs.unc.edu>

	* export_scene.C (get_view_xform): Read unit system from template.
	(export_scene_to_openNURBS): Perform error-checking on args.
	Write unit system to .3dm file.  Put mesh on a layer.

2000-08-11  Kwan Torrich Skinner  <skinner@cs.unc.edu>

	* all: Merge thirdtech_branch code to trunk.

2000-08-11  Jeffrey Juliano  <juliano@cs.unc.edu>

	* export_scene.C (build_mesh): Fix scaling.
	(compute_view_xform): Factor scale out of rot matrix before
	convering to quat, then handle scale separately.  Handle both grid
	scale factor and model scale factor.  May not do the right thing
	with real datasets, but works with ppm file datasets.

2000-08-11  Jeffrey Juliano  <juliano@cs.unc.edu>

	* export_scene.C (compute_view_xform): Debug messages proving that
	quat lib doesn't do what I thought it was advertising.

2000-08-11  Jeffrey Juliano  <juliano@cs.unc.edu>

	* export_scene.C (build_mesh): Add xform to arg list.  Use xform.
	(build_viewport_from_nano): Remove incorrect q_normalize.
	(compute_view_xform, get_view_xform, export_scene_to_openNURBS):
	Incorporate scale.

2000-08-11  Jeffrey Juliano  <juliano@cs.unc.edu>

	* export_scene.C (get_corners_from_file, compute_view_xform):
	New functions.
	(get_view_xform): Change parameter list. Move a lot of stuff to
	the new functions.
	(export_scene_to_openNURBS): Adjust arguments to get_view_xform.

2000-08-10  Jeffrey Juliano  <juliano@cs.unc.edu>

	* ChangeLog: New file.
	
	* export_scene.C (QuadCorners): New class.
	(write_q_vec): New function.
	(operator <<): Same.
	(rhinoException_to_string): Same.
	(set_quad_corner): Same.
	(get_view_xform): Same.
	(export_scene_to_openNURBS): Add error checking. Call get_view_xform.

2000-08-07  Jeffrey Juliano  <juliano@cs.unc.edu>

	* nmg_GraphicsImpl.C (makeAndInstallRulerImage): Allocate correct
	size array.  `texture-size' is the length of a *side*, not the
	number of array cells.

2000-08-06  Jeffrey Juliano  <juliano@cs.unc.edu>

	* spm_gl.c: Tell emacs to use c++-mode.
	* nmg_GraphicsImpl.C (makeAndInstallRulerImage): Move deine of
	macro `texel' out of funct body, and undef texel after funct body.
	* graphics_globals.c: Tell emacs to use c++-mode.
	* graphics.h (buildAllTextures, makeAndInstallRulerImage): Remove
	delcarations for undefined functions. (They were previously moved
	to nmg_GraphicsImpl.)
	* graphics.c: Change "#define min" to "#define NMG_MIN".
	Change "#define max" to "#define NMG_MAX".
	Remove unused preprocessor macros.
	Adjust (fix) comments.
	Remove macro `vec_cmp' because unused.
	Tell emacs to use c++-mode.
	(createPyramid, makeTexture): Make static (internal linkage).

2000-08-03  Jeffrey Juliano  <juliano@cs.unc.edu>

	* nmg_GraphicsImpl.C (nmg_Graphics_Implementation): clean up

2000-08-02  Jeffrey Juliano  <juliano@evans.cs.unc.edu>

	* nmg_GraphicsImpl.C (makeAndInstallRulerImage): dynamically
	allocate texture array (was hardcoded to 512x512 cells).
	Handle float pt. rounding issues in texture size computation.

2000-08-01  Jeffrey Juliano  <juliano@evans.cs.unc.edu>

	* spm_gl.c (describe_gl_vertex): small speed/clarity optimization.
	Dereference pointer once, cache result in a reference.

	* graphics.h: include just quat.h instead of all of v.h

