/* The nanoManipulator and its source code have been released under the
 * Boost software license when nanoManipulator, Inc. ceased operations on
 * January 1, 2014.  At this point, the message below from 3rdTech (who
 * sublicensed from nanoManipulator, Inc.) was superceded.
 * Since that time, the code can be used according to the following
 * license.  Support for this system is now through the NIH/NIBIB
 * National Research Resource at cismm.org.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/



#ifndef __NMM_MICROSCOPE_SEM_OPTICAL_H
#define __NMM_MICROSCOPE_SEM_OPTICAL_H

#include "nmb_Device.h"
#include "nmm_Microscope_SEM.h"

class nmm_Microscope_SEM_optical: public nmb_Device_Server, public nmm_Microscope_SEM
{
public:
	nmm_Microscope_SEM_optical( const char * name, vrpn_Connection * c, vrpn_bool virtualAcq = vrpn_FALSE );
	virtual ~nmm_Microscope_SEM_optical( );

    virtual vrpn_int32 mainloop(const struct timeval *timeout = NULL) = 0;
    
	// functions that change settings
    vrpn_int32 setResolution( vrpn_int32 res_x, vrpn_int32 res_y );
	virtual vrpn_int32 setResolutionByIndex( vrpn_int32 index ) = 0;
	virtual vrpn_int32 setBinning( vrpn_int32 bin ) = 0;
	vrpn_int32 setContrastLevel( vrpn_int32 level );
	virtual vrpn_int32 setExposure( vrpn_int32 millisecs ) = 0;

    // functions for getting settings
    virtual vrpn_int32 getResolution( vrpn_int32 &res_x, vrpn_int32 &res_y ) = 0;
	vrpn_int32 getResolutionIndex( ) { return currentResolutionIndex;  }
	virtual vrpn_int32 getMaxResolution( vrpn_int32& x, vrpn_int32& y ) = 0;
	virtual vrpn_int32 getBinning( ) = 0;
	vrpn_int32 getContrastLevel( ) { return currentContrast; }
	vrpn_int32 getExposure( ) {  return currentExposure;  }

protected:
	nmm_Microscope_SEM_optical( );


	int currentResolutionIndex;  // image resolution = camera resolution / binning
	int currentBinning;
	int currentContrast;
	int currentExposure;

};


#endif __NMM_MICROSCOPE_SEM_OPTICAL_H