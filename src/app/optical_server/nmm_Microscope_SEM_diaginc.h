/* The nanoManipulator and its source code have been released under the
 * Boost software license when nanoManipulator, Inc. ceased operations on
 * January 1, 2014.  At this point, the message below from 3rdTech (who
 * sublicensed from nanoManipulator, Inc.) was superceded.
 * Since that time, the code can be used according to the following
 * license.  Support for this system is now through the NIH/NIBIB
 * National Research Resource at cismm.org.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/


#ifndef __NMM_MICROSCOPE_SEM_DIAGINC_H
#define __NMM_MICROSCOPE_SEM_DIAGINC_H

#include <windows.h>
#include <spotCam.h>

#include <vrpn_Connection.h>
#include "nmm_Microscope_SEM_optical.h"

// from SpotCam.h:
// typedef VOID (WINAPI *SPOTCALLBACK)(int iStatus, long lInfo, DWORD dwUserData);
void WINAPI nmm_Microscope_SEM_diaginc_spotCallback( int iStatus, long lInfo, DWORD dwUserData );


class nmm_Microscope_SEM_diaginc : 
public nmm_Microscope_SEM_optical 
{
	
	
public:
    nmm_Microscope_SEM_diaginc( const char * name, vrpn_Connection * c,
             vrpn_bool virtualAcquisition = vrpn_FALSE );
    virtual ~nmm_Microscope_SEM_diaginc( void );

    virtual vrpn_int32 mainloop(const struct timeval *timeout = NULL);

    // functions that change settings
	vrpn_int32 setResolutionByIndex( vrpn_int32 index );
	vrpn_int32 setBinning( vrpn_int32 bin );
	vrpn_int32 setExposure( vrpn_int32 millisecs );

    // functions for getting settings
    vrpn_int32 getResolution( vrpn_int32 &res_x, vrpn_int32 &res_y );
	vrpn_int32 getMaxResolution( vrpn_int32& x, vrpn_int32& y );
	vrpn_int32 getBinning( );
    vrpn_bool scanEnabled();

    vrpn_int32 getScanRegion_nm( double &x_span_nm, double &y_span_nm );
    vrpn_int32 getMaxScan( int &x_span_DAC, int &y_span_DAC );

    // data acquisition
    vrpn_int32 acquireImage(void);
    vrpn_int32 requestScan( vrpn_int32 nscans );

    // functions that send messages
    vrpn_int32 reportResolution();
    vrpn_int32 reportScanlineData(int line_num);
    vrpn_int32 reportMaxScanSpan();

    vrpn_int32 reportPixelIntegrationTime();
    vrpn_int32 reportInterPixelDelayTime();
    vrpn_int32 reportBeamBlankEnable();
    vrpn_int32 reportPointDwellTime();
    vrpn_int32 reportBeamLocation();
    vrpn_int32 reportRetraceDelays();
    vrpn_int32 reportDACParams();
    vrpn_int32 reportExternalScanControlEnable();
    vrpn_int32 reportMagnification();

protected:

    // other subroutines:
	vrpn_int32 setupCamera( );

	void printSpotValues( );
	
    void checkForParameterChanges(void);
    vrpn_int32 initializeParameterDefaults(void);

    static int VRPN_CALLBACK RcvSetResolution( void *_userdata, vrpn_HANDLERPARAM _p );
    static int VRPN_CALLBACK RcvRequestScan( void *_userdata, vrpn_HANDLERPARAM _p );
    static int VRPN_CALLBACK RcvGotConnection( void *_userdata, vrpn_HANDLERPARAM _p );
    static int VRPN_CALLBACK RcvDroppedConnection( void *_userdata, vrpn_HANDLERPARAM _p );

    vrpn_bool d_image_mode_settings_changed;
    vrpn_bool d_shared_settings_changed;
    vrpn_bool d_scan_enabled;
    vrpn_int32 d_lines_per_message;

    vrpn_int32 d_scans_to_do;

    vrpn_bool d_virtualAcquisition;

	int currentResolutionIndex;  // image resolution = camera resolution / binning
	int maxBufferSize;
	int currentBinning;
	int currentContrast;
	int currentExposure;
	vrpn_uint8* myImageBuffer;
	vrpn_uint8* cameraImageBuffer;

	struct SpotChanges
	{
		bool resolutionChanged;
		int newResolutionIndex;

		bool binningChanged;
		int newBinning;

		bool exposureChanged;
		int newExposure;
	};

	SpotChanges requestedChanges;
	void doRequestedChangesOnSpot( );

	friend void WINAPI nmm_Microscope_SEM_diaginc_spotCallback( int iStatus, long lInfo, DWORD dwUserData );

}; // end class nmm_Microscope_SEM_diaginc

#endif // __NMM_MICROSCOPE_SEM_DIAGINC_H