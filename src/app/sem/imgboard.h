/* The nanoManipulator and its source code have been released under the
 * Boost software license when nanoManipulator, Inc. ceased operations on
 * January 1, 2014.  At this point, the message below from 3rdTech (who
 * sublicensed from nanoManipulator, Inc.) was superceded.
 * Since that time, the code can be used according to the following
 * license.  Support for this system is now through the NIH/NIBIB
 * National Research Resource at cismm.org.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/* IMGBOARD.H   */
#ifndef IMGBOARD_H
#define IMGBOARD_H
#define EDXCALL _stdcall
/***************** FUNCTION DECLARATIONS ************************/
#ifdef __cplusplus
extern "C" {
#endif
	int  EDXCALL  GetBoardId();
	int  EDXCALL  InitBoard(HANDLE, int, unsigned int *);
	int  EDXCALL  InitGpuBoard(ULONG);
	int  EDXCALL  SetStatusWindow(HANDLE);
	int  EDXCALL  PcMtim(unsigned int, float);
	int  EDXCALL  SgHdwr(int *);
	int  EDXCALL  SgRset();
//	int  EDXCALL  ResizeDib(unsigned int);
	int  EDXCALL  GrXlin(HANDLE, unsigned int, unsigned int, unsigned int, unsigned int *);
	int  EDXCALL  SetupCollect(HANDLE, HANDLE, int);
	int  EDXCALL  SetupLineCollect(HANDLE);
	int  EDXCALL  SetupQline(HANDLE);
	int  EDXCALL  SetupQmaps(HANDLE);
	int  EDXCALL  SetupPlayback(HANDLE, HANDLE);
	int  EDXCALL  PcSets(HANDLE, HANDLE, HANDLE);
	int  EDXCALL  SetupScanSegment(HANDLE, int, int);
	int  EDXCALL  ScanSegment(int, int, int);
//	int  EDXCALL  PcScan(int);
	int  EDXCALL  SpVidm(int);
	int  EDXCALL  AutoScale(HANDLE, HANDLE);
	int  EDXCALL  SetupXscale(HANDLE, HANDLE);
	int  EDXCALL  AutoXscale(HANDLE, int);
	int  EDXCALL  CollStrip(HANDLE, HANDLE, unsigned int);
	int  EDXCALL  CollImgLine(HANDLE, HANDLE, unsigned int);
//	int  EDXCALL  PlayStrip(unsigned int, unsigned int, unsigned int);
	int  EDXCALL  PlayImgLine(HANDLE, HANDLE, unsigned int);
	int  EDXCALL  CollPoints(HANDLE, HANDLE, unsigned int);
	int  EDXCALL  CollPoint(int, int);
	int  EDXCALL  CollectLinePoint(int, float *);
	int  EDXCALL  CollectQlinePoint(int);
	int  EDXCALL  CollectXLine(int);
	int  EDXCALL  CollectXPoint(int, int);
	int  EDXCALL  CollectQPoint(int, int);
//	int  EDXCALL  CollPointsStrip(unsigned int, unsigned int, unsigned int);
	int  EDXCALL  CollFast1(HANDLE, int);
	int  EDXCALL  ResetCollect(HANDLE);
	int  EDXCALL  ResetPlayback(HANDLE);
	int  EDXCALL  CollectFirst(int);
//	int  EDXCALL  GetBuffAddr (int);
//	int  EDXCALL  GetRamData (unsigned int, unsigned int *, int);
//	int  EDXCALL  LoadRamData (unsigned int, unsigned int *, int);
	int  EDXCALL  SetupSgColl(int, int, int, int);
	LONG  EDXCALL  CollectSgLine(unsigned char *);
	int  EDXCALL  CollectSgStrip(unsigned char *);
	int  EDXCALL  ResetSgColl();
	int  EDXCALL  ResetGpuBoard();
	int  EDXCALL  SetSgScan(int);
	int  EDXCALL  SetScan(int, int);
	int  EDXCALL  SetupSgScan(int,int,int,int,int,int,int);
	int  EDXCALL  SyncEDS1(int);
	int  EDXCALL  SetupGetLine(HANDLE);
	int  EDXCALL  GetLine(unsigned int, unsigned int *);
	BOOL EDXCALL  ScanInit(HANDLE hGpuScan);

	// Set/Get the gain and offset for the x and y dacs and the z adc

	int	EDXCALL	  SetupDACParams(SHORT GainParams[3], SHORT OffsetParams[3]);
	int EDXCALL	  ReadDACParams(SHORT GainParams[3], SHORT OffsetParams[3]);

	// Set the line frequency synchronization mode (0 = off, 1 = 50 hz, 2 = 60 hz)

	int EDXCALL   SgLineSync(LONG SyncMode);

	// Set the beam blanking mode (0 = Unblanked, 1 = Blanked)

	int EDXCALL   SgBeamBlank(LONG BlankMode);

	// Set/Get the horizontal and vertical retrace delays

	int EDXCALL   SgSetRetrace(LONG Horz, LONG Vert);
	int EDXCALL   SgGetRetrace(PLONG Horz, PLONG Vert);

	// Set/Get the scan direction for the x and y axis

	int EDXCALL	  SgSetScanDir(LONG xMirror, LONG yMirror);
	int EDXCALL	  SgGetScanDir(PLONG xMirror, PLONG yMirror);

	// Set/Get the video polarity of the 16 physical channels

	int EDXCALL   SgSetVideoPolarity(LONG VideoPol[16]); 
	int EDXCALL   SgGetVideoPolarity(LONG VideoPol[16]);
	
	// Set/Get the max horizontal and vertical dac span

	int EDXCALL   SgSetMaxSpan(LONG XSpan, LONG YSpan);
	int EDXCALL   SgGetMaxSpan(PLONG XSpan, PLONG YSpan);

	// Set/Get the mapping between the x/y axis and the physical
	// scan dac's.

	int EDXCALL   SgSetXScanDAC(LONG xDAC);
	int EDXCALL   SgGetXScanDAC(PLONG xDAC);

	// Set/Get the 
	//
	//			scan type: normal/fast (0,1)
	//			DataTransfer: off/on (0,1)
	//			PixelDataSize: byte/work (0,1)

	int EDXCALL	  SgSetScanParams(LONG ScanType, LONG DataTransfer);
	int EDXCALL	  SgGetScanParams(PLONG ScanType, PLONG DataTransfer);

	// Enable/Disable the external interface
	//
	// mode (0 = off, 1 = on)
	// photo (ignored)
	//
	int EDXCALL SpMode(int mode, int iPhoto);

	// Enable/Disable the EMIA for vb.

	int EDXCALL SgEmia(int rwmode, int *onoff);  // VB Only

	// v2.2

	int  EDXCALL  SpMove(int, int, int);
	int  EDXCALL  ScanSegments(unsigned int, int *, int *, int *);
	int  EDXCALL  ScanTable(unsigned int, int *, int *);

	BOOL EDXCALL  IsWin95();
	int  EDXCALL  SpDwel(int, int, int);

	int EDXCALL		CollectPointVideo(ULONG idc, ULONG nReads, ULONG ipd, PULONG video);
	int SpMoveEx(int x, int y);
#ifdef __cplusplus
	};
#endif

/****************************************************************/

#endif
