2002-04-15  David Borland <borland@cs.unc.edu>
        * sim.cpp : sends translation whenever cylinders are sent

2002-04-15  David Borland <borland@cs.unc.edu>

        * sim.cpp : made changes so that when the current static
        file is a .tfr, the correct info is sent to the AFM simulator

2002-04-05  Andrea Hilchey <hilchey@cs.unc.edu>

	* sim.cpp : added code to handle translation change from import
	object tcl window.  translates objects in simulator in x, y, and
	z rel. to current translation so that translation in simulator
	matches up with absolute translation value in tcl box.  also 
	modified grouping so that you can add to a current group by
	holding down 'shift' and first clicking on any object in the
	group, then clicking on any additional objects to add in.

	* 3dobject.cpp : modifications to changeGroup function for
	new grouping functionality described above

2002-04-04  Andrea Hilchey <hilchey@cs.unc.edu>

	* sim.cpp : added code to handle grouping of objects.  
	mouseFuncMain checks whether the shift button is held down, and
	if it is, groups all objects left-clicked on while that instance
	of holding down the shift button persists.  when new instance of
	shift button down occurs, new group is formed.  if button
	clicked on object in a group while shift button held down,
	object is removed from group.  supposed to work like powerpoint.

	* 3dobject.cpp,h : added the following functions:

	int changeGroup(OB* obj,int* new_group_number);
	bool inGroup(OB* obj,int* group_number);
	void removeFromGroup(OB* obj,int* group_number);

	deal with grouping of objects, and moving, rotating objects
	within a group.  rotations of grouped objects rotate 
	all objects in group around group center.

2002-03-29  Andrea Hilchey <hilchey@cs.unc.edu>

	* 3dobject.h,.cpp : added capabilities to group objects
	together, and then move the group as a whole, added function 
	int addToGroup(OB* obj,int* group_number);
	which adds object obj to group # group_number.  also
	added default NULL parameter group_number to addDNA,
	addTriangle, and addNtube functions, which now call addToGroup
	function.  object is placed in its own group if not specified

	* sim.h : added variables associated with groups

	* sim.cpp : added ability to add little nanotubes to display
	when sent over to SimulatedMicroscope to form big nanotube
	object (model extraction results into simulator).  nanotubes
	are scaled so that they fit the scaling of both the model
	object in nano, and the scaling ratio between the nano file
	and the simulator space.  objects are added to NANOTUBE_GROUP
	for grouping.

2002-03-13  Aron Helser  <helser@cs.unc.edu>

	* Unca.h,cpp: Change to standard iostream/STL headers. 
	* 3Dobject.cpp: same
	* ConeSphere.cpp: same
	* Tips.cpp: same
	* Uncertw.h: same
	* Vec3d.h,cpp: same
	* dna.cpp: same
	* draw.cpp: same
	* input.cpp: same
	* sim.cpp: same
	* simulator_server.C: same
	* surface.C: same
	* 3d_afm.dsp: same, stop including ghost-stl. 
	
2002-03-13 David Marshburn <marshbur@cs.unc.edu>
	
	* 3d-afmsim.[dsp,dsw]:  makes this the workspace for 3d-afmsim,
	adds the correct projects from the rest of nano, removed
	extraneous projects/libraries, fixed some linking parameters.

2002-01-25 Andrea Hilchey <hilchey@cs.unc.edu>

	* sim.cpp : added offset to vertices for triangle display

	* scan.cpp : some modification to zscale for object information
	sent from simulator to nano, further modification needed

2002-02-26 Andrea Hilchey <hilchey@cs.unc.edu>

	* 3d_afm.dsp : deleted .dat files (not needed) and changed Debug
	configuration settings so that they match the Release settings,
	also changed linking with vrpn.lib so that looking in correct
	location


2002-02-25 Andrea Hilchey <hilchey@cs.unc.edu>

	* sim.cpp : added code to check for triangles stored in list in
	nmm_SimulatedMicroscope object (SimMicroscopeServer), and draws 
	the triangles that are there

2002-01-18 Andrea Hilchey <hilchey@cs.unc.edu>

	* scan.cpp : changed zDistance and zDistanceScaled so that inverse
	of zBuffer, zBuffer stores values s.t. low row numbers are at the
	bottom of the grid, while we want zDistance to store values
	s.t. low row numbers are at the top of the grid

2002-01-17 Andrea Hilchey <hilchey@cs.unc.edu>

	* scan.cpp : fixed a memory leak (oops!)

	* sim.cpp : some reformatting

	* 3d_afm.dsp : fixed some settings so that simulator runs correctly
	(added include paths, libraries, etc.)

2002-01-15 Andrea Hilchey <hilchey@cs.unc.edu>

	* scan.cpp : added a zDistanceScaled array which scaled the height 
	array values so that the display in the simulator matches that in 
	nano when the data is sent across--no need to change z scale in nano

	* sim.cpp : now data is sent constantly

