/* The nanoManipulator and its source code have been released under the
 * Boost software license when nanoManipulator, Inc. ceased operations on
 * January 1, 2014.  At this point, the message below from 3rdTech (who
 * sublicensed from nanoManipulator, Inc.) was superceded.
 * Since that time, the code can be used according to the following
 * license.  Support for this system is now through the NIH/NIBIB
 * National Research Resource at cismm.org.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef _MYGLU_H_
#define _MYGLU_H_

#include <stdio.h>
#include <GL/glut_UNC.h>
#include "Tips.h"
#include "defns.h"

struct myGLUquadric
{
  GLenum DrawStyle;            /* GLU_FILL, LINE, SILHOUETTE, or POINT */
  GLenum Orientation;          /* GLU_INSIDE or GLU_OUTSIDE */
  GLboolean TextureFlag;       /* Generate texture coords? */
  GLenum Normals;              /* GLU_NONE, GLU_FLAT, or GLU_SMOOTH */
  //  void (GLCALLBACK  *ErrorFunc) (GLenum err);  /* Error handler callback function */
  void (*ErrorFunc) (GLenum err);  /* Error handler callback function */
};

typedef struct myGLUquadric myGLUquadricObj;

myGLUquadricObj *mygluNewQuadric(void);
void mygluDeleteQuadric(myGLUquadricObj * state);
void mygluQuadricDrawStyle(myGLUquadricObj * quadObject, GLenum drawStyle);
void mygluQuadricOrientation(myGLUquadricObj * quadObject, GLenum orientation);
void mygluQuadricNormals(myGLUquadricObj * quadObject, GLenum normals);

void uncert_sphere(myGLUquadricObj * qobj, GLdouble radius, GLint slices, GLint stacks);
void uncert_frustum(myGLUquadricObj * qobj,
		   GLdouble baseRadius, GLdouble topRadius,
		   GLdouble height, GLint slices, GLint stacks,
		    GLfloat grad_l, GLfloat grad_r);

#if DISP_LIST
void make_uncert_sphere();
void make_uncert_cylinder();
void make_uncert_cone_sphere(InvConeSphereTip ics);
#endif

void draw_uncert_sphere( double diameter);
void draw_uncert_cylinder(double diameter, double height);
void draw_uncert_frustum(double bottomdiameter, double topdiameter, double height);
GLfloat get_sphere_color_rho(GLfloat rho);
void set_sphere_color_z(GLfloat z);
GLfloat get_sphere_color_z(GLfloat z);
#endif
